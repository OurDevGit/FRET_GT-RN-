package com.guitartunes;

import android.content.Context;
import android.graphics.Paint;
import android.graphics.Matrix;
import android.graphics.RectF;
import android.graphics.Shader;
import android.graphics.LinearGradient;
import android.graphics.RadialGradient;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Path;
import android.graphics.Typeface;
import android.text.Layout;
import android.text.StaticLayout;
import android.text.TextPaint;
import java.util.Stack;
import java.util.Arrays;



/**
 * Created by Stephen Haase & Rick Terrill on 8/21/17.
 * Copyright Â© 2017 Big Swing. All rights reserved.
 *
 * Generated by PaintCode
 * http://www.paintcodeapp.com
 *
 * @author Stephen Haase & Rick Terrill
 */
public class GuitarTunesStyleKit {
    // Colors
    public static int playbackBackground = Color.argb(255, 233, 242, 247);
    public static int rowTitle = Color.argb(255, 64, 64, 64);
    public static int rowSubTitle = Color.argb(255, 143, 142, 148);
    public static int mediaTitle = Color.argb(255, 76, 142, 162);
    public static int fretboardBG = Color.argb(255, 230, 217, 187);
    public static int fretboardAssignees = Color.argb(255, 84, 58, 21);
    public static int goldDark = Color.argb(255, 158, 136, 68);
    public static int goldLight = Color.argb(255, 249, 247, 242);
    public static int storeDark = Color.argb(255, 92, 121, 150);
    public static int storeLight = Color.argb(255, 216, 227, 238);
    public static int mediaTitleSemi = Color.argb(179, 76, 142, 162);
    
    
    
    
    // Resizing Behavior
    public enum ResizingBehavior {
        AspectFit, //!< The content is proportionally resized to fit into the target rectangle.
        AspectFill, //!< The content is proportionally resized to completely fill the target rectangle.
        Stretch, //!< The content is stretched to match the entire target rectangle.
        Center, //!< The content is centered in the target rectangle, but it is NOT resized.
    }
    
    // Canvas Drawings
    // App
    
    private static class CacheForBtnSettings {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF ovalRect = new RectF();
        private static Path ovalPath = new Path();
    }
    
    public static void drawBtnSettings(Canvas canvas, boolean isPressed) {
        GuitarTunesStyleKit.drawBtnSettings(canvas, new RectF(0f, 0f, 44f, 44f), ResizingBehavior.AspectFit, isPressed);
    }
    
    public static void drawBtnSettings(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, boolean isPressed) {
        // General Declarations
        Paint paint = CacheForBtnSettings.paint;
        
        // Local Colors
        int navColorUp = Color.argb(255, 255, 255, 255);
        int navColorDown = Color.argb(255, 205, 205, 205);
        
        // Local Variables
        int btnNavColor = isPressed ? navColorDown : navColorUp;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForBtnSettings.resizedFrame;
        GuitarTunesStyleKit.resizingBehaviorApply(resizing, CacheForBtnSettings.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 44f);
        
        // Group 2
        {
            // Bezier
            RectF bezierRect = CacheForBtnSettings.bezierRect;
            bezierRect.set(8.5f, 6.5f, 36.5f, 34.5f);
            Path bezierPath = CacheForBtnSettings.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(32.55f, 22.33f);
            bezierPath.lineTo(36.5f, 22.33f);
            bezierPath.lineTo(36.5f, 18.67f);
            bezierPath.lineTo(32.55f, 18.67f);
            bezierPath.cubicTo(32.29f, 17.62f, 31.88f, 16.02f, 31.33f, 15.12f);
            bezierPath.lineTo(34.12f, 12.32f);
            bezierPath.lineTo(30.68f, 8.88f);
            bezierPath.lineTo(27.88f, 11.67f);
            bezierPath.cubicTo(26.98f, 11.12f, 25.38f, 10.71f, 24.33f, 10.45f);
            bezierPath.lineTo(24.33f, 6.5f);
            bezierPath.lineTo(20.67f, 6.5f);
            bezierPath.lineTo(20.67f, 10.45f);
            bezierPath.cubicTo(19.62f, 10.71f, 18.02f, 11.12f, 17.12f, 11.67f);
            bezierPath.lineTo(14.32f, 8.88f);
            bezierPath.lineTo(10.88f, 12.32f);
            bezierPath.lineTo(13.67f, 15.12f);
            bezierPath.cubicTo(13.12f, 16.02f, 12.71f, 17.62f, 12.45f, 18.67f);
            bezierPath.lineTo(8.5f, 18.67f);
            bezierPath.lineTo(8.5f, 22.33f);
            bezierPath.lineTo(12.45f, 22.33f);
            bezierPath.cubicTo(12.71f, 23.38f, 13.12f, 24.98f, 13.67f, 25.88f);
            bezierPath.lineTo(10.88f, 28.68f);
            bezierPath.lineTo(14.32f, 32.12f);
            bezierPath.lineTo(17.12f, 29.32f);
            bezierPath.cubicTo(18.02f, 29.88f, 19.62f, 30.29f, 20.67f, 30.55f);
            bezierPath.lineTo(20.67f, 34.5f);
            bezierPath.lineTo(24.33f, 34.5f);
            bezierPath.lineTo(24.33f, 30.55f);
            bezierPath.cubicTo(25.38f, 30.29f, 26.98f, 29.88f, 27.88f, 29.33f);
            bezierPath.lineTo(30.68f, 32.12f);
            bezierPath.lineTo(34.12f, 28.68f);
            bezierPath.lineTo(31.33f, 25.88f);
            bezierPath.cubicTo(31.88f, 24.98f, 32.29f, 23.38f, 32.55f, 22.33f);
            bezierPath.lineTo(32.55f, 22.33f);
            bezierPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnNavColor);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
            
            // Oval
            RectF ovalRect = CacheForBtnSettings.ovalRect;
            ovalRect.set(17.5f, 15.5f, 27.5f, 25.5f);
            Path ovalPath = CacheForBtnSettings.ovalPath;
            ovalPath.reset();
            ovalPath.addOval(ovalRect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnNavColor);
            canvas.drawPath(ovalPath, paint);
            canvas.restore();
        }
        
        canvas.restore();
    }
    
    private static class CacheForBtnChordsAndScales {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
        private static RectF bezier4Rect = new RectF();
        private static Path bezier4Path = new Path();
        private static RectF bezier5Rect = new RectF();
        private static Path bezier5Path = new Path();
        private static RectF bezier6Rect = new RectF();
        private static Path bezier6Path = new Path();
        private static RectF bezier7Rect = new RectF();
        private static Path bezier7Path = new Path();
        private static RectF bezier8Rect = new RectF();
        private static Path bezier8Path = new Path();
        private static RectF ovalRect = new RectF();
        private static Path ovalPath = new Path();
        private static RectF oval2Rect = new RectF();
        private static Path oval2Path = new Path();
        private static RectF oval3Rect = new RectF();
        private static Path oval3Path = new Path();
    }
    
    public static void drawBtnChordsAndScales(Canvas canvas, boolean isChordsAndScales) {
        GuitarTunesStyleKit.drawBtnChordsAndScales(canvas, new RectF(0f, 0f, 44f, 44f), ResizingBehavior.AspectFit, isChordsAndScales);
    }
    
    public static void drawBtnChordsAndScales(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, boolean isChordsAndScales) {
        // General Declarations
        Paint paint = CacheForBtnChordsAndScales.paint;
        
        // Local Colors
        int white = Color.argb(255, 255, 255, 255);
        int gold = Color.argb(255, 158, 136, 68);
        
        // Local Variables
        int chordsAndScalesIconColor = isChordsAndScales ? gold : white;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForBtnChordsAndScales.resizedFrame;
        GuitarTunesStyleKit.resizingBehaviorApply(resizing, CacheForBtnChordsAndScales.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 44f);
        
        // Group 2
        {
            // Rectangle
            RectF rectangleRect = CacheForBtnChordsAndScales.rectangleRect;
            rectangleRect.set(8.95f, 6.95f, 35.95f, 33.95f);
            Path rectanglePath = CacheForBtnChordsAndScales.rectanglePath;
            rectanglePath.reset();
            rectanglePath.addRoundRect(rectangleRect, 2f, 2f, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(chordsAndScalesIconColor);
            canvas.drawPath(rectanglePath, paint);
            canvas.restore();
            
            // Bezier 2
            RectF bezier2Rect = CacheForBtnChordsAndScales.bezier2Rect;
            bezier2Rect.set(14.7f, 7.4f, 14.7f, 33.79f);
            Path bezier2Path = CacheForBtnChordsAndScales.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(14.7f, 7.4f);
            bezier2Path.lineTo(14.7f, 33.79f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(chordsAndScalesIconColor);
            canvas.drawPath(bezier2Path, paint);
            canvas.restore();
            
            // Bezier
            RectF bezierRect = CacheForBtnChordsAndScales.bezierRect;
            bezierRect.set(20.1f, 7.4f, 20.1f, 33.79f);
            Path bezierPath = CacheForBtnChordsAndScales.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(20.1f, 7.4f);
            bezierPath.lineTo(20.1f, 33.79f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(chordsAndScalesIconColor);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
            
            // Bezier 3
            RectF bezier3Rect = CacheForBtnChordsAndScales.bezier3Rect;
            bezier3Rect.set(25.5f, 7.4f, 25.5f, 33.79f);
            Path bezier3Path = CacheForBtnChordsAndScales.bezier3Path;
            bezier3Path.reset();
            bezier3Path.moveTo(25.5f, 7.4f);
            bezier3Path.lineTo(25.5f, 33.79f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(chordsAndScalesIconColor);
            canvas.drawPath(bezier3Path, paint);
            canvas.restore();
            
            // Bezier 4
            RectF bezier4Rect = CacheForBtnChordsAndScales.bezier4Rect;
            bezier4Rect.set(30.9f, 7.4f, 30.9f, 33.79f);
            Path bezier4Path = CacheForBtnChordsAndScales.bezier4Path;
            bezier4Path.reset();
            bezier4Path.moveTo(30.9f, 7.4f);
            bezier4Path.lineTo(30.9f, 33.79f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(chordsAndScalesIconColor);
            canvas.drawPath(bezier4Path, paint);
            canvas.restore();
            
            // Bezier 5
            RectF bezier5Rect = CacheForBtnChordsAndScales.bezier5Rect;
            bezier5Rect.set(9.36f, 11.76f, 35.62f, 11.76f);
            Path bezier5Path = CacheForBtnChordsAndScales.bezier5Path;
            bezier5Path.reset();
            bezier5Path.moveTo(9.36f, 11.76f);
            bezier5Path.lineTo(35.62f, 11.76f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(chordsAndScalesIconColor);
            canvas.drawPath(bezier5Path, paint);
            canvas.restore();
            
            // Bezier 6
            RectF bezier6Rect = CacheForBtnChordsAndScales.bezier6Rect;
            bezier6Rect.set(9.36f, 17.16f, 35.62f, 17.16f);
            Path bezier6Path = CacheForBtnChordsAndScales.bezier6Path;
            bezier6Path.reset();
            bezier6Path.moveTo(9.36f, 17.16f);
            bezier6Path.lineTo(35.62f, 17.16f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(chordsAndScalesIconColor);
            canvas.drawPath(bezier6Path, paint);
            canvas.restore();
            
            // Bezier 7
            RectF bezier7Rect = CacheForBtnChordsAndScales.bezier7Rect;
            bezier7Rect.set(9.36f, 23.46f, 35.62f, 23.46f);
            Path bezier7Path = CacheForBtnChordsAndScales.bezier7Path;
            bezier7Path.reset();
            bezier7Path.moveTo(9.36f, 23.46f);
            bezier7Path.lineTo(35.62f, 23.46f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(chordsAndScalesIconColor);
            canvas.drawPath(bezier7Path, paint);
            canvas.restore();
            
            // Bezier 8
            RectF bezier8Rect = CacheForBtnChordsAndScales.bezier8Rect;
            bezier8Rect.set(9.36f, 28.86f, 35.62f, 28.86f);
            Path bezier8Path = CacheForBtnChordsAndScales.bezier8Path;
            bezier8Path.reset();
            bezier8Path.moveTo(9.36f, 28.86f);
            bezier8Path.lineTo(35.62f, 28.86f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(chordsAndScalesIconColor);
            canvas.drawPath(bezier8Path, paint);
            canvas.restore();
            
            // Oval
            RectF ovalRect = CacheForBtnChordsAndScales.ovalRect;
            ovalRect.set(13.06f, 18.5f, 16.56f, 22f);
            Path ovalPath = CacheForBtnChordsAndScales.ovalPath;
            ovalPath.reset();
            ovalPath.addOval(ovalRect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(chordsAndScalesIconColor);
            canvas.drawPath(ovalPath, paint);
            
            // Oval 2
            RectF oval2Rect = CacheForBtnChordsAndScales.oval2Rect;
            oval2Rect.set(18.5f, 12.38f, 22f, 15.88f);
            Path oval2Path = CacheForBtnChordsAndScales.oval2Path;
            oval2Path.reset();
            oval2Path.addOval(oval2Rect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(chordsAndScalesIconColor);
            canvas.drawPath(oval2Path, paint);
            
            // Oval 3
            RectF oval3Rect = CacheForBtnChordsAndScales.oval3Rect;
            oval3Rect.set(29.06f, 7.44f, 32.56f, 10.94f);
            Path oval3Path = CacheForBtnChordsAndScales.oval3Path;
            oval3Path.reset();
            oval3Path.addOval(oval3Rect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(chordsAndScalesIconColor);
            canvas.drawPath(oval3Path, paint);
        }
        
        canvas.restore();
    }
    
    private static class CacheForBtnLibrary {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
    }
    
    public static void drawBtnLibrary(Canvas canvas, boolean isPressed) {
        GuitarTunesStyleKit.drawBtnLibrary(canvas, new RectF(0f, 0f, 44f, 44f), ResizingBehavior.AspectFit, isPressed);
    }
    
    public static void drawBtnLibrary(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, boolean isPressed) {
        // General Declarations
        Paint paint = CacheForBtnLibrary.paint;
        
        // Local Colors
        int navColorUp = Color.argb(255, 255, 255, 255);
        int navColorDown = Color.argb(255, 205, 205, 205);
        
        // Local Variables
        int btnNavColor = isPressed ? navColorDown : navColorUp;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForBtnLibrary.resizedFrame;
        GuitarTunesStyleKit.resizingBehaviorApply(resizing, CacheForBtnLibrary.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 44f);
        
        // Group 2
        {
            // Bezier
            RectF bezierRect = CacheForBtnLibrary.bezierRect;
            bezierRect.set(8.5f, 7.5f, 36.5f, 33.5f);
            Path bezierPath = CacheForBtnLibrary.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(22.5f, 12.05f);
            bezierPath.cubicTo(22.5f, 9.54f, 29.05f, 7.5f, 36.5f, 7.5f);
            bezierPath.lineTo(36.5f, 28.95f);
            bezierPath.cubicTo(29.05f, 28.95f, 22.5f, 30.99f, 22.5f, 33.5f);
            bezierPath.cubicTo(22.5f, 30.99f, 15.95f, 28.95f, 8.5f, 28.95f);
            bezierPath.lineTo(8.5f, 7.5f);
            bezierPath.cubicTo(15.95f, 7.5f, 22.5f, 9.54f, 22.5f, 12.05f);
            bezierPath.lineTo(22.5f, 12.05f);
            bezierPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnNavColor);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
            
            // Bezier 2
            RectF bezier2Rect = CacheForBtnLibrary.bezier2Rect;
            bezier2Rect.set(22.5f, 12.05f, 22.5f, 33.34f);
            Path bezier2Path = CacheForBtnLibrary.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(22.5f, 12.05f);
            bezier2Path.lineTo(22.5f, 33.34f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnNavColor);
            canvas.drawPath(bezier2Path, paint);
            canvas.restore();
        }
        
        canvas.restore();
    }
    
    private static class CacheForBtnHome {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezier4Rect = new RectF();
        private static Path bezier4Path = new Path();
        private static RectF bezier5Rect = new RectF();
        private static Path bezier5Path = new Path();
        private static RectF bezier6Rect = new RectF();
        private static Path bezier6Path = new Path();
    }
    
    public static void drawBtnHome(Canvas canvas, boolean isHome) {
        GuitarTunesStyleKit.drawBtnHome(canvas, new RectF(0f, 0f, 44f, 44f), ResizingBehavior.AspectFit, isHome);
    }
    
    public static void drawBtnHome(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, boolean isHome) {
        // General Declarations
        Paint paint = CacheForBtnHome.paint;
        
        // Local Colors
        int gold = Color.argb(255, 158, 136, 68);
        int white = Color.argb(255, 255, 255, 255);
        
        // Local Variables
        int btnHomeColor = isHome ? gold : white;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForBtnHome.resizedFrame;
        GuitarTunesStyleKit.resizingBehaviorApply(resizing, CacheForBtnHome.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 44f);
        
        // Group 2
        {
            // Bezier 4
            RectF bezier4Rect = CacheForBtnHome.bezier4Rect;
            bezier4Rect.set(11.43f, 21.45f, 33.18f, 35.42f);
            Path bezier4Path = CacheForBtnHome.bezier4Path;
            bezier4Path.reset();
            bezier4Path.moveTo(11.43f, 35.42f);
            bezier4Path.cubicTo(11.43f, 31.05f, 11.43f, 26.68f, 11.43f, 22.32f);
            bezier4Path.cubicTo(11.43f, 22.21f, 11.43f, 22.1f, 11.44f, 21.99f);
            bezier4Path.cubicTo(11.49f, 21.67f, 11.76f, 21.43f, 12.06f, 21.45f);
            bezier4Path.cubicTo(12.37f, 21.46f, 12.6f, 21.71f, 12.62f, 22.04f);
            bezier4Path.cubicTo(12.63f, 22.15f, 12.63f, 22.26f, 12.63f, 22.37f);
            bezier4Path.cubicTo(12.63f, 26.18f, 12.63f, 29.99f, 12.62f, 33.8f);
            bezier4Path.cubicTo(12.62f, 34.09f, 12.69f, 34.17f, 12.96f, 34.16f);
            bezier4Path.cubicTo(14.77f, 34.15f, 16.57f, 34.16f, 18.37f, 34.16f);
            bezier4Path.cubicTo(18.46f, 34.16f, 18.56f, 34.15f, 18.68f, 34.14f);
            bezier4Path.cubicTo(18.68f, 31.39f, 18.68f, 28.66f, 18.68f, 25.91f);
            bezier4Path.cubicTo(21.1f, 25.91f, 23.49f, 25.91f, 25.92f, 25.91f);
            bezier4Path.cubicTo(25.92f, 28.65f, 25.92f, 31.38f, 25.92f, 34.16f);
            bezier4Path.cubicTo(26.05f, 34.16f, 26.15f, 34.16f, 26.25f, 34.16f);
            bezier4Path.cubicTo(28.05f, 34.16f, 29.85f, 34.15f, 31.66f, 34.16f);
            bezier4Path.cubicTo(31.91f, 34.17f, 31.99f, 34.1f, 31.99f, 33.82f);
            bezier4Path.cubicTo(31.98f, 30.21f, 31.98f, 26.59f, 31.98f, 22.98f);
            bezier4Path.cubicTo(31.98f, 22.88f, 31.98f, 22.78f, 31.99f, 22.68f);
            bezier4Path.cubicTo(32.01f, 22.35f, 32.24f, 22.1f, 32.54f, 22.08f);
            bezier4Path.cubicTo(32.85f, 22.07f, 33.13f, 22.31f, 33.17f, 22.64f);
            bezier4Path.cubicTo(33.18f, 22.75f, 33.17f, 22.86f, 33.17f, 22.97f);
            bezier4Path.cubicTo(33.18f, 27.12f, 33.18f, 31.27f, 33.18f, 35.42f);
            bezier4Path.cubicTo(30.37f, 35.42f, 27.55f, 35.42f, 24.74f, 35.42f);
            bezier4Path.cubicTo(24.74f, 35.29f, 24.73f, 35.16f, 24.73f, 35.03f);
            bezier4Path.cubicTo(24.73f, 32.51f, 24.73f, 29.99f, 24.74f, 27.48f);
            bezier4Path.cubicTo(24.74f, 27.22f, 24.68f, 27.14f, 24.43f, 27.14f);
            bezier4Path.cubicTo(23.04f, 27.15f, 21.65f, 27.15f, 20.27f, 27.15f);
            bezier4Path.cubicTo(19.88f, 27.15f, 19.88f, 27.15f, 19.88f, 27.56f);
            bezier4Path.cubicTo(19.87f, 30.18f, 19.87f, 32.8f, 19.87f, 35.42f);
            bezier4Path.cubicTo(17.06f, 35.42f, 14.24f, 35.42f, 11.43f, 35.42f);
            bezier4Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(btnHomeColor);
            canvas.drawPath(bezier4Path, paint);
            
            // Bezier 5
            RectF bezier5Rect = CacheForBtnHome.bezier5Rect;
            bezier5Rect.set(7.8f, 6.61f, 36.8f, 22.08f);
            Path bezier5Path = CacheForBtnHome.bezier5Path;
            bezier5Path.reset();
            bezier5Path.moveTo(7.8f, 21.24f);
            bezier5Path.cubicTo(8.19f, 20.84f, 8.56f, 20.42f, 8.95f, 20.02f);
            bezier5Path.cubicTo(13.34f, 15.61f, 17.72f, 11.2f, 22.11f, 6.79f);
            bezier5Path.cubicTo(22.17f, 6.73f, 22.23f, 6.68f, 22.31f, 6.61f);
            bezier5Path.cubicTo(22.84f, 7.13f, 23.36f, 7.65f, 23.87f, 8.17f);
            bezier5Path.cubicTo(28.05f, 12.38f, 32.23f, 16.58f, 36.41f, 20.79f);
            bezier5Path.cubicTo(36.55f, 20.93f, 36.67f, 21.09f, 36.8f, 21.24f);
            bezier5Path.cubicTo(36.8f, 21.36f, 36.8f, 21.48f, 36.8f, 21.6f);
            bezier5Path.cubicTo(36.47f, 22.18f, 36.12f, 22.23f, 35.65f, 21.76f);
            bezier5Path.cubicTo(31.28f, 17.36f, 26.91f, 12.97f, 22.53f, 8.57f);
            bezier5Path.cubicTo(22.47f, 8.5f, 22.4f, 8.44f, 22.31f, 8.35f);
            bezier5Path.cubicTo(22.23f, 8.43f, 22.15f, 8.5f, 22.08f, 8.57f);
            bezier5Path.cubicTo(17.7f, 12.96f, 13.33f, 17.36f, 8.96f, 21.76f);
            bezier5Path.cubicTo(8.48f, 22.23f, 8.13f, 22.18f, 7.8f, 21.6f);
            bezier5Path.cubicTo(7.8f, 21.48f, 7.8f, 21.36f, 7.8f, 21.24f);
            bezier5Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(btnHomeColor);
            canvas.drawPath(bezier5Path, paint);
            
            // Bezier 6
            RectF bezier6Rect = CacheForBtnHome.bezier6Rect;
            bezier6Rect.set(26.55f, 8.74f, 31.97f, 14.45f);
            Path bezier6Path = CacheForBtnHome.bezier6Path;
            bezier6Path.reset();
            bezier6Path.moveTo(31.95f, 8.74f);
            bezier6Path.cubicTo(31.96f, 8.87f, 31.97f, 8.97f, 31.97f, 9.07f);
            bezier6Path.cubicTo(31.97f, 10.59f, 31.97f, 12.12f, 31.97f, 13.65f);
            bezier6Path.cubicTo(31.97f, 13.75f, 31.96f, 13.87f, 31.94f, 13.97f);
            bezier6Path.cubicTo(31.88f, 14.26f, 31.64f, 14.45f, 31.36f, 14.45f);
            bezier6Path.cubicTo(31.09f, 14.45f, 30.85f, 14.25f, 30.79f, 13.97f);
            bezier6Path.cubicTo(30.77f, 13.85f, 30.77f, 13.73f, 30.77f, 13.61f);
            bezier6Path.cubicTo(30.76f, 12.53f, 30.77f, 11.45f, 30.77f, 10.37f);
            bezier6Path.cubicTo(30.77f, 10.26f, 30.77f, 10.15f, 30.77f, 10f);
            bezier6Path.cubicTo(30.63f, 10f, 30.53f, 10f, 30.42f, 10f);
            bezier6Path.cubicTo(29.34f, 10f, 28.27f, 10f, 27.19f, 9.99f);
            bezier6Path.cubicTo(26.8f, 9.99f, 26.56f, 9.76f, 26.55f, 9.4f);
            bezier6Path.cubicTo(26.53f, 9.01f, 26.79f, 8.75f, 27.19f, 8.75f);
            bezier6Path.cubicTo(28.19f, 8.74f, 29.19f, 8.74f, 30.19f, 8.74f);
            bezier6Path.cubicTo(30.77f, 8.74f, 31.34f, 8.74f, 31.95f, 8.74f);
            bezier6Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(btnHomeColor);
            canvas.drawPath(bezier6Path, paint);
        }
        
        canvas.restore();
    }
    
    private static class CacheForBtnTwitter {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF ovalRect = new RectF();
        private static Path ovalPath = new Path();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    public static void drawBtnTwitter(Canvas canvas, boolean isPressed) {
        GuitarTunesStyleKit.drawBtnTwitter(canvas, new RectF(0f, 0f, 44f, 44f), ResizingBehavior.AspectFit, isPressed);
    }
    
    public static void drawBtnTwitter(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, boolean isPressed) {
        // General Declarations
        Paint paint = CacheForBtnTwitter.paint;
        
        // Local Colors
        int navColorUp = Color.argb(255, 255, 255, 255);
        int navColorDown = Color.argb(255, 205, 205, 205);
        
        // Local Variables
        int btnNavColor = isPressed ? navColorDown : navColorUp;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForBtnTwitter.resizedFrame;
        GuitarTunesStyleKit.resizingBehaviorApply(resizing, CacheForBtnTwitter.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 44f);
        
        // Group 2
        {
            // Oval
            RectF ovalRect = CacheForBtnTwitter.ovalRect;
            ovalRect.set(8f, 6f, 36f, 34f);
            Path ovalPath = CacheForBtnTwitter.ovalPath;
            ovalPath.reset();
            ovalPath.addOval(ovalRect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnNavColor);
            canvas.drawPath(ovalPath, paint);
            canvas.restore();
            
            // Bezier
            RectF bezierRect = CacheForBtnTwitter.bezierRect;
            bezierRect.set(14.39f, 13.65f, 29.91f, 26.35f);
            Path bezierPath = CacheForBtnTwitter.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(29.91f, 14.34f);
            bezierPath.cubicTo(29.91f, 14.34f, 28.27f, 14.52f, 27.54f, 14.67f);
            bezierPath.cubicTo(26.95f, 14.04f, 26.12f, 13.65f, 25.2f, 13.65f);
            bezierPath.cubicTo(23.43f, 13.65f, 22f, 15.09f, 22f, 16.86f);
            bezierPath.cubicTo(22f, 17.11f, 22.02f, 17.36f, 22.08f, 17.59f);
            bezierPath.cubicTo(19.42f, 17.46f, 17.05f, 16.18f, 15.47f, 14.24f);
            bezierPath.cubicTo(15.2f, 14.72f, 15.04f, 15.26f, 15.04f, 15.85f);
            bezierPath.cubicTo(15.04f, 16.96f, 15.61f, 17.94f, 16.47f, 18.52f);
            bezierPath.cubicTo(15.94f, 18.5f, 15.45f, 18.36f, 15.01f, 18.12f);
            bezierPath.lineTo(15.01f, 18.16f);
            bezierPath.cubicTo(15.01f, 19.71f, 16.12f, 21.01f, 17.58f, 21.3f);
            bezierPath.cubicTo(17.11f, 21.43f, 16.62f, 21.45f, 16.14f, 21.36f);
            bezierPath.cubicTo(16.54f, 22.63f, 17.73f, 23.55f, 19.13f, 23.58f);
            bezierPath.cubicTo(17.76f, 24.66f, 16.06f, 25.1f, 14.39f, 24.91f);
            bezierPath.cubicTo(15.8f, 25.82f, 17.49f, 26.35f, 19.3f, 26.35f);
            bezierPath.cubicTo(25.19f, 26.35f, 28.41f, 21.46f, 28.41f, 17.23f);
            bezierPath.cubicTo(28.41f, 17.09f, 28.41f, 16.95f, 28.41f, 16.82f);
            bezierPath.cubicTo(29.03f, 16.36f, 29.48f, 14.99f, 29.91f, 14.34f);
            bezierPath.lineTo(29.91f, 14.34f);
            bezierPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnNavColor);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
        }
        
        canvas.restore();
    }
    
    private static class CacheForBtnFacebook {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF ovalRect = new RectF();
        private static Path ovalPath = new Path();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    public static void drawBtnFacebook(Canvas canvas, boolean isPressed) {
        GuitarTunesStyleKit.drawBtnFacebook(canvas, new RectF(0f, 0f, 44f, 44f), ResizingBehavior.AspectFit, isPressed);
    }
    
    public static void drawBtnFacebook(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, boolean isPressed) {
        // General Declarations
        Paint paint = CacheForBtnFacebook.paint;
        
        // Local Colors
        int navColorUp = Color.argb(255, 255, 255, 255);
        int navColorDown = Color.argb(255, 205, 205, 205);
        
        // Local Variables
        int btnNavColor = isPressed ? navColorDown : navColorUp;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForBtnFacebook.resizedFrame;
        GuitarTunesStyleKit.resizingBehaviorApply(resizing, CacheForBtnFacebook.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 44f);
        
        // Group 2
        {
            // Oval
            RectF ovalRect = CacheForBtnFacebook.ovalRect;
            ovalRect.set(8f, 6f, 36f, 34f);
            Path ovalPath = CacheForBtnFacebook.ovalPath;
            ovalPath.reset();
            ovalPath.addOval(ovalRect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnNavColor);
            canvas.drawPath(ovalPath, paint);
            canvas.restore();
            
            // Bezier
            RectF bezierRect = CacheForBtnFacebook.bezierRect;
            bezierRect.set(17.74f, 12.11f, 26.67f, 27.91f);
            Path bezierPath = CacheForBtnFacebook.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(26.67f, 16.96f);
            bezierPath.lineTo(23.83f, 16.96f);
            bezierPath.lineTo(23.83f, 15.71f);
            bezierPath.cubicTo(23.83f, 15.07f, 24.25f, 14.92f, 24.55f, 14.92f);
            bezierPath.lineTo(26.26f, 14.92f);
            bezierPath.lineTo(26.26f, 12.12f);
            bezierPath.lineTo(23.4f, 12.11f);
            bezierPath.cubicTo(20.6f, 12.11f, 20.17f, 14.2f, 20.17f, 15.54f);
            bezierPath.lineTo(20.17f, 16.96f);
            bezierPath.lineTo(17.74f, 16.96f);
            bezierPath.lineTo(17.74f, 19.39f);
            bezierPath.lineTo(20.17f, 19.39f);
            bezierPath.lineTo(20.17f, 27.91f);
            bezierPath.lineTo(23.83f, 27.91f);
            bezierPath.lineTo(23.83f, 19.39f);
            bezierPath.lineTo(26.38f, 19.39f);
            bezierPath.lineTo(26.67f, 16.96f);
            bezierPath.lineTo(26.67f, 16.96f);
            bezierPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnNavColor);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
        }
        
        canvas.restore();
    }
    
    private static class CacheForIconStatusConnected {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
    }
    
    public static void drawIconStatusConnected(Canvas canvas) {
        GuitarTunesStyleKit.drawIconStatusConnected(canvas, new RectF(0f, 0f, 44f, 44f), ResizingBehavior.AspectFit);
    }
    
    public static void drawIconStatusConnected(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForIconStatusConnected.paint;
        
        // Local Colors
        int fillColor9 = Color.argb(255, 31, 245, 43);
        int strokeColor5 = Color.argb(255, 255, 255, 255);
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForIconStatusConnected.resizedFrame;
        GuitarTunesStyleKit.resizingBehaviorApply(resizing, CacheForIconStatusConnected.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 44f);
        
        // Group
        {
            // Bezier
            RectF bezierRect = CacheForIconStatusConnected.bezierRect;
            bezierRect.set(2f, 2f, 42f, 42f);
            Path bezierPath = CacheForIconStatusConnected.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(22f, 42f);
            bezierPath.cubicTo(33.05f, 42f, 42f, 33.05f, 42f, 22f);
            bezierPath.cubicTo(42f, 10.95f, 33.05f, 2f, 22f, 2f);
            bezierPath.cubicTo(10.95f, 2f, 2f, 10.95f, 2f, 22f);
            bezierPath.cubicTo(2f, 33.05f, 10.95f, 42f, 22f, 42f);
            bezierPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            bezierPath.setFillType(Path.FillType.EVEN_ODD);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(fillColor9);
            canvas.drawPath(bezierPath, paint);
            
            // Bezier 2
            RectF bezier2Rect = CacheForIconStatusConnected.bezier2Rect;
            bezier2Rect.set(11.6f, 12.48f, 31.15f, 33.04f);
            Path bezier2Path = CacheForIconStatusConnected.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(22.77f, 26.73f);
            bezier2Path.cubicTo(22.77f, 26.73f, 21.48f, 27.11f, 21.13f, 28.78f);
            bezier2Path.cubicTo(21.13f, 28.78f, 20.67f, 32.38f, 18.6f, 32.89f);
            bezier2Path.cubicTo(18.6f, 32.89f, 17.26f, 33.69f, 14.68f, 31.56f);
            bezier2Path.cubicTo(14.68f, 31.56f, 10.44f, 28.48f, 11.9f, 26.04f);
            bezier2Path.cubicTo(11.9f, 26.04f, 12.41f, 24.96f, 14.53f, 23.92f);
            bezier2Path.cubicTo(14.53f, 23.92f, 16.37f, 23.22f, 16.72f, 22.32f);
            bezier2Path.cubicTo(16.72f, 22.32f, 17.9f, 18.41f, 19.67f, 18.21f);
            bezier2Path.cubicTo(19.67f, 18.21f, 21.01f, 18.32f, 20.4f, 19.23f);
            bezier2Path.cubicTo(20.4f, 19.23f, 18.91f, 21.78f, 20.94f, 21.99f);
            bezier2Path.lineTo(25.61f, 16.2f);
            bezier2Path.cubicTo(25.61f, 16.2f, 26.09f, 15.79f, 25.76f, 15.33f);
            bezier2Path.lineTo(29.99f, 12.59f);
            bezier2Path.cubicTo(29.99f, 12.59f, 31.08f, 12.07f, 31.15f, 13.32f);
            bezier2Path.cubicTo(31.15f, 13.32f, 29.94f, 13.63f, 29.37f, 15.38f);
            bezier2Path.cubicTo(29.37f, 15.38f, 29.19f, 16.36f, 28.35f, 16.61f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1.2f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(strokeColor5);
            canvas.drawPath(bezier2Path, paint);
            canvas.restore();
        }
        
        canvas.restore();
    }
    
    private static class CacheForBtnMail {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
    }
    
    public static void drawBtnMail(Canvas canvas, boolean isPressed) {
        GuitarTunesStyleKit.drawBtnMail(canvas, new RectF(0f, 0f, 44f, 44f), ResizingBehavior.AspectFit, isPressed);
    }
    
    public static void drawBtnMail(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, boolean isPressed) {
        // General Declarations
        Paint paint = CacheForBtnMail.paint;
        
        // Local Colors
        int downControls = Color.argb(255, 132, 132, 132);
        int upControls = Color.argb(255, 0, 0, 0);
        
        // Local Variables
        int btnDarkColor = isPressed ? downControls : upControls;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForBtnMail.resizedFrame;
        GuitarTunesStyleKit.resizingBehaviorApply(resizing, CacheForBtnMail.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 44f);
        
        // Group 2
        {
            // Bezier
            RectF bezierRect = CacheForBtnMail.bezierRect;
            bezierRect.set(8.5f, 10.5f, 34.07f, 27.3f);
            Path bezierPath = CacheForBtnMail.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(17.63f, 27.3f);
            bezierPath.lineTo(10.33f, 27.3f);
            bezierPath.cubicTo(9.32f, 27.3f, 8.5f, 26.49f, 8.5f, 25.5f);
            bezierPath.lineTo(8.5f, 12.3f);
            bezierPath.cubicTo(8.5f, 11.31f, 9.32f, 10.5f, 10.33f, 10.5f);
            bezierPath.lineTo(32.24f, 10.5f);
            bezierPath.cubicTo(33.25f, 10.5f, 34.07f, 11.31f, 34.07f, 12.3f);
            bezierPath.lineTo(34.07f, 19.58f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnDarkColor);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
            
            // Bezier 2
            RectF bezier2Rect = CacheForBtnMail.bezier2Rect;
            bezier2Rect.set(9.11f, 11.1f, 33.46f, 20.7f);
            Path bezier2Path = CacheForBtnMail.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(33.46f, 11.1f);
            bezier2Path.lineTo(21.28f, 20.7f);
            bezier2Path.lineTo(9.11f, 11.1f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnDarkColor);
            canvas.drawPath(bezier2Path, paint);
            canvas.restore();
            
            // Bezier 3
            RectF bezier3Rect = CacheForBtnMail.bezier3Rect;
            bezier3Rect.set(20.67f, 21.3f, 36.5f, 34.5f);
            Path bezier3Path = CacheForBtnMail.bezier3Path;
            bezier3Path.reset();
            bezier3Path.moveTo(29.2f, 30.9f);
            bezier3Path.lineTo(29.2f, 34.5f);
            bezier3Path.lineTo(36.5f, 27.9f);
            bezier3Path.lineTo(29.2f, 21.3f);
            bezier3Path.lineTo(29.2f, 24.9f);
            bezier3Path.lineTo(20.67f, 24.9f);
            bezier3Path.lineTo(20.67f, 30.9f);
            bezier3Path.lineTo(29.2f, 30.9f);
            bezier3Path.lineTo(29.2f, 30.9f);
            bezier3Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnDarkColor);
            canvas.drawPath(bezier3Path, paint);
            canvas.restore();
        }
        
        canvas.restore();
    }
    
    private static class CacheForBtnMailSignup {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezier4Rect = new RectF();
        private static Path bezier4Path = new Path();
        private static RectF bezier5Rect = new RectF();
        private static Path bezier5Path = new Path();
        private static RectF bezier6Rect = new RectF();
        private static Path bezier6Path = new Path();
        private static RectF bezier7Rect = new RectF();
        private static Path bezier7Path = new Path();
        private static RectF bezier8Rect = new RectF();
        private static Path bezier8Path = new Path();
    }
    
    public static void drawBtnMailSignup(Canvas canvas, boolean isPressed) {
        GuitarTunesStyleKit.drawBtnMailSignup(canvas, new RectF(0f, 0f, 44f, 44f), ResizingBehavior.AspectFit, isPressed);
    }
    
    public static void drawBtnMailSignup(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, boolean isPressed) {
        // General Declarations
        Paint paint = CacheForBtnMailSignup.paint;
        
        // Local Colors
        int downControls = Color.argb(255, 132, 132, 132);
        int upControls = Color.argb(255, 0, 0, 0);
        
        // Local Variables
        int btnDarkColor = isPressed ? downControls : upControls;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForBtnMailSignup.resizedFrame;
        GuitarTunesStyleKit.resizingBehaviorApply(resizing, CacheForBtnMailSignup.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 44f);
        
        // Group 3
        {
            // Bezier 4
            RectF bezier4Rect = CacheForBtnMailSignup.bezier4Rect;
            bezier4Rect.set(24.09f, 22.46f, 37f, 35.66f);
            Path bezier4Path = CacheForBtnMailSignup.bezier4Path;
            bezier4Path.reset();
            bezier4Path.moveTo(28.2f, 34.46f);
            bezier4Path.lineTo(24.09f, 35.66f);
            bezier4Path.lineTo(25.26f, 31.46f);
            bezier4Path.lineTo(34.07f, 22.46f);
            bezier4Path.lineTo(37f, 25.46f);
            bezier4Path.lineTo(28.2f, 34.46f);
            bezier4Path.lineTo(28.2f, 34.46f);
            bezier4Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnDarkColor);
            canvas.drawPath(bezier4Path, paint);
            canvas.restore();
            
            // Bezier 5
            RectF bezier5Rect = CacheForBtnMailSignup.bezier5Rect;
            bezier5Rect.set(31.72f, 24.86f, 34.66f, 27.86f);
            Path bezier5Path = CacheForBtnMailSignup.bezier5Path;
            bezier5Path.reset();
            bezier5Path.moveTo(31.72f, 24.86f);
            bezier5Path.lineTo(34.66f, 27.86f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnDarkColor);
            canvas.drawPath(bezier5Path, paint);
            canvas.restore();
            
            // Bezier 6
            RectF bezier6Rect = CacheForBtnMailSignup.bezier6Rect;
            bezier6Rect.set(25.26f, 31.46f, 28.2f, 34.46f);
            Path bezier6Path = CacheForBtnMailSignup.bezier6Path;
            bezier6Path.reset();
            bezier6Path.moveTo(25.26f, 31.46f);
            bezier6Path.lineTo(28.2f, 34.46f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnDarkColor);
            canvas.drawPath(bezier6Path, paint);
            canvas.restore();
            
            // Bezier 7
            RectF bezier7Rect = CacheForBtnMailSignup.bezier7Rect;
            bezier7Rect.set(10f, 11.66f, 34.66f, 28.46f);
            Path bezier7Path = CacheForBtnMailSignup.bezier7Path;
            bezier7Path.reset();
            bezier7Path.moveTo(22.33f, 28.46f);
            bezier7Path.lineTo(11.76f, 28.46f);
            bezier7Path.cubicTo(10.79f, 28.46f, 10f, 27.66f, 10f, 26.66f);
            bezier7Path.lineTo(10f, 13.46f);
            bezier7Path.cubicTo(10f, 12.47f, 10.79f, 11.66f, 11.76f, 11.66f);
            bezier7Path.lineTo(32.89f, 11.66f);
            bezier7Path.cubicTo(33.87f, 11.66f, 34.66f, 12.47f, 34.66f, 13.46f);
            bezier7Path.lineTo(34.66f, 20.06f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnDarkColor);
            canvas.drawPath(bezier7Path, paint);
            canvas.restore();
            
            // Bezier 8
            RectF bezier8Rect = CacheForBtnMailSignup.bezier8Rect;
            bezier8Rect.set(10.59f, 12.26f, 34.07f, 21.86f);
            Path bezier8Path = CacheForBtnMailSignup.bezier8Path;
            bezier8Path.reset();
            bezier8Path.moveTo(34.07f, 12.26f);
            bezier8Path.lineTo(22.33f, 21.86f);
            bezier8Path.lineTo(10.59f, 12.26f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnDarkColor);
            canvas.drawPath(bezier8Path, paint);
            canvas.restore();
        }
        
        canvas.restore();
    }
    
    // Playback
    
    private static class CacheForBtnPlay {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF playRect = new RectF();
        private static Path playPath = new Path();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
        private static RectF rectangle2Rect = new RectF();
        private static Path rectangle2Path = new Path();
    }
    
    public static void drawBtnPlay(Canvas canvas, boolean isPressed, boolean isShowingPause, float redValue, float greenValue, float blueValue) {
        GuitarTunesStyleKit.drawBtnPlay(canvas, new RectF(0f, 0f, 44f, 44f), ResizingBehavior.AspectFit, isPressed, isShowingPause, redValue, greenValue, blueValue);
    }
    
    public static void drawBtnPlay(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, boolean isPressed, boolean isShowingPause, float redValue, float greenValue, float blueValue) {
        // General Declarations
        Paint paint = CacheForBtnPlay.paint;
        
        // Local Colors
        int downControls = Color.argb(255, 132, 132, 132);
        
        // Local Variables
        int backgroundColor = isPressed ? downControls : Color.argb(255, (int) (redValue * 255f), (int) (greenValue * 255f), (int) (blueValue * 255f));
        boolean isPlaying = !isShowingPause;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForBtnPlay.resizedFrame;
        GuitarTunesStyleKit.resizingBehaviorApply(resizing, CacheForBtnPlay.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 44f);
        
        // Play
        if (isPlaying) {
            RectF playRect = CacheForBtnPlay.playRect;
            playRect.set(4.3f, 1.56f, 40.6f, 41.56f);
            Path playPath = CacheForBtnPlay.playPath;
            playPath.reset();
            playPath.moveTo(4.3f, 41.56f);
            playPath.lineTo(4.3f, 1.56f);
            playPath.lineTo(40.6f, 21.56f);
            playPath.lineTo(4.3f, 41.56f);
            playPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            playPath.setFillType(Path.FillType.EVEN_ODD);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(backgroundColor);
            canvas.drawPath(playPath, paint);
        }
        
        // Pause
        if (isShowingPause) {
            // Rectangle
            RectF rectangleRect = CacheForBtnPlay.rectangleRect;
            rectangleRect.set(3.94f, 1.81f, 19.94f, 41.81f);
            Path rectanglePath = CacheForBtnPlay.rectanglePath;
            rectanglePath.reset();
            rectanglePath.moveTo(rectangleRect.left, rectangleRect.top);
            rectanglePath.lineTo(rectangleRect.right, rectangleRect.top);
            rectanglePath.lineTo(rectangleRect.right, rectangleRect.bottom);
            rectanglePath.lineTo(rectangleRect.left, rectangleRect.bottom);
            rectanglePath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(backgroundColor);
            canvas.drawPath(rectanglePath, paint);
            
            // Rectangle 2
            RectF rectangle2Rect = CacheForBtnPlay.rectangle2Rect;
            rectangle2Rect.set(24.94f, 1.81f, 40.94f, 41.81f);
            Path rectangle2Path = CacheForBtnPlay.rectangle2Path;
            rectangle2Path.reset();
            rectangle2Path.moveTo(rectangle2Rect.left, rectangle2Rect.top);
            rectangle2Path.lineTo(rectangle2Rect.right, rectangle2Rect.top);
            rectangle2Path.lineTo(rectangle2Rect.right, rectangle2Rect.bottom);
            rectangle2Path.lineTo(rectangle2Rect.left, rectangle2Rect.bottom);
            rectangle2Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(backgroundColor);
            canvas.drawPath(rectangle2Path, paint);
        }
        
        canvas.restore();
    }
    
    private static class CacheForBtnRewind {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF stroke260Rect = new RectF();
        private static Path stroke260Path = new Path();
        private static RectF stroke261Rect = new RectF();
        private static Path stroke261Path = new Path();
    }
    
    public static void drawBtnRewind(Canvas canvas, Context context, boolean isPressed, float redValue, float greenValue, float blueValue) {
        GuitarTunesStyleKit.drawBtnRewind(canvas, context, new RectF(0f, 0f, 44f, 44f), ResizingBehavior.AspectFit, isPressed, redValue, greenValue, blueValue);
    }
    
    public static void drawBtnRewind(Canvas canvas, Context context, RectF targetFrame, ResizingBehavior resizing, boolean isPressed, float redValue, float greenValue, float blueValue) {
        // General Declarations
        Paint paint = CacheForBtnRewind.paint;
        
        // Local Colors
        int downControls = Color.argb(255, 132, 132, 132);
        
        // Local Variables
        int backgroundColor = isPressed ? downControls : Color.argb(255, (int) (redValue * 255f), (int) (greenValue * 255f), (int) (blueValue * 255f));
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForBtnRewind.resizedFrame;
        GuitarTunesStyleKit.resizingBehaviorApply(resizing, CacheForBtnRewind.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 44f);
        
        // Group
        {
            // bezier
            RectF bezierRect = CacheForBtnRewind.bezierRect;
            bezierRect.set(18.59f, 19.62f, 26.68f, 30.79f);
            Path bezierPath = CacheForBtnRewind.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(22.58f, 30.79f);
            bezierPath.cubicTo(25.04f, 30.79f, 26.68f, 29.21f, 26.68f, 26.9f);
            bezierPath.cubicTo(26.68f, 24.76f, 25.24f, 23.25f, 23.2f, 23.25f);
            bezierPath.cubicTo(22.14f, 23.25f, 21.38f, 23.65f, 20.93f, 24.31f);
            bezierPath.lineTo(20.79f, 24.31f);
            bezierPath.lineTo(21.03f, 21.51f);
            bezierPath.lineTo(26.03f, 21.51f);
            bezierPath.lineTo(26.03f, 19.62f);
            bezierPath.lineTo(19.29f, 19.62f);
            bezierPath.lineTo(18.76f, 25.93f);
            bezierPath.lineTo(20.76f, 25.93f);
            bezierPath.cubicTo(21.13f, 25.32f, 21.77f, 24.95f, 22.6f, 24.95f);
            bezierPath.cubicTo(23.74f, 24.95f, 24.54f, 25.75f, 24.54f, 26.95f);
            bezierPath.cubicTo(24.54f, 28.14f, 23.74f, 28.92f, 22.59f, 28.92f);
            bezierPath.cubicTo(21.57f, 28.92f, 20.79f, 28.32f, 20.66f, 27.41f);
            bezierPath.lineTo(18.59f, 27.41f);
            bezierPath.cubicTo(18.65f, 29.36f, 20.24f, 30.79f, 22.58f, 30.79f);
            bezierPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(backgroundColor);
            canvas.drawPath(bezierPath, paint);
            
            // Play
            {
                // Stroke-260
                RectF stroke260Rect = CacheForBtnRewind.stroke260Rect;
                stroke260Rect.set(19.6f, 1.5f, 27.69f, 13.32f);
                Path stroke260Path = CacheForBtnRewind.stroke260Path;
                stroke260Path.reset();
                stroke260Path.moveTo(27.69f, 1.5f);
                stroke260Path.lineTo(19.6f, 6.95f);
                stroke260Path.lineTo(26.79f, 13.32f);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(2f);
                paint.setStrokeJoin(Paint.Join.ROUND);
                paint.setStrokeCap(Paint.Cap.ROUND);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(backgroundColor);
                canvas.drawPath(stroke260Path, paint);
                canvas.restore();
                
                // Stroke-261
                RectF stroke261Rect = CacheForBtnRewind.stroke261Rect;
                stroke261Rect.set(5.22f, 6.82f, 39.39f, 41.5f);
                Path stroke261Path = CacheForBtnRewind.stroke261Path;
                stroke261Path.reset();
                stroke261Path.moveTo(19.6f, 6.97f);
                stroke261Path.cubicTo(30.54f, 5.59f, 39.03f, 14.06f, 39.38f, 23.59f);
                stroke261Path.cubicTo(39.72f, 33.13f, 32.36f, 41.14f, 22.93f, 41.49f);
                stroke261Path.cubicTo(13.49f, 41.85f, 5.57f, 34.4f, 5.22f, 24.87f);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(2f);
                paint.setStrokeJoin(Paint.Join.ROUND);
                paint.setStrokeCap(Paint.Cap.ROUND);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(backgroundColor);
                canvas.drawPath(stroke261Path, paint);
                canvas.restore();
            }
        }
        
        canvas.restore();
    }
    
    private static class CacheForBtnForward {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF stroke260Rect = new RectF();
        private static Path stroke260Path = new Path();
        private static RectF stroke261Rect = new RectF();
        private static Path stroke261Path = new Path();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    public static void drawBtnForward(Canvas canvas, Context context, boolean isPressed, float redValue, float greenValue, float blueValue) {
        GuitarTunesStyleKit.drawBtnForward(canvas, context, new RectF(0f, 0f, 44f, 44f), ResizingBehavior.AspectFit, isPressed, redValue, greenValue, blueValue);
    }
    
    public static void drawBtnForward(Canvas canvas, Context context, RectF targetFrame, ResizingBehavior resizing, boolean isPressed, float redValue, float greenValue, float blueValue) {
        // General Declarations
        Paint paint = CacheForBtnForward.paint;
        
        // Local Colors
        int downControls = Color.argb(255, 132, 132, 132);
        
        // Local Variables
        int backgroundColor = isPressed ? downControls : Color.argb(255, (int) (redValue * 255f), (int) (greenValue * 255f), (int) (blueValue * 255f));
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForBtnForward.resizedFrame;
        GuitarTunesStyleKit.resizingBehaviorApply(resizing, CacheForBtnForward.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 44f);
        
        // Group
        {
            // Stroke-260-+-Stroke-261-+-Stroke-262-Copy
            {
                // Stroke-260
                RectF stroke260Rect = CacheForBtnForward.stroke260Rect;
                stroke260Rect.set(16.34f, 1.5f, 24.44f, 13.32f);
                Path stroke260Path = CacheForBtnForward.stroke260Path;
                stroke260Path.reset();
                stroke260Path.moveTo(16.34f, 1.5f);
                stroke260Path.lineTo(24.44f, 6.95f);
                stroke260Path.lineTo(17.24f, 13.32f);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(2f);
                paint.setStrokeJoin(Paint.Join.ROUND);
                paint.setStrokeCap(Paint.Cap.ROUND);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(backgroundColor);
                canvas.drawPath(stroke260Path, paint);
                canvas.restore();
                
                // Stroke-261
                RectF stroke261Rect = CacheForBtnForward.stroke261Rect;
                stroke261Rect.set(4.65f, 6.82f, 38.82f, 41.5f);
                Path stroke261Path = CacheForBtnForward.stroke261Path;
                stroke261Path.reset();
                stroke261Path.moveTo(24.44f, 6.97f);
                stroke261Path.cubicTo(13.49f, 5.59f, 5.01f, 14.06f, 4.66f, 23.59f);
                stroke261Path.cubicTo(4.32f, 33.13f, 11.68f, 41.14f, 21.11f, 41.49f);
                stroke261Path.cubicTo(30.54f, 41.84f, 38.47f, 34.4f, 38.82f, 24.86f);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(2f);
                paint.setStrokeJoin(Paint.Join.ROUND);
                paint.setStrokeCap(Paint.Cap.ROUND);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(backgroundColor);
                canvas.drawPath(stroke261Path, paint);
                canvas.restore();
            }
            
            // bezier
            RectF bezierRect = CacheForBtnForward.bezierRect;
            bezierRect.set(13.14f, 18.73f, 31.77f, 30.18f);
            Path bezierPath = CacheForBtnForward.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(15.9f, 25.18f);
            bezierPath.lineTo(17.23f, 25.18f);
            bezierPath.cubicTo(18.43f, 25.18f, 19.17f, 25.77f, 19.17f, 26.72f);
            bezierPath.cubicTo(19.17f, 27.65f, 18.39f, 28.29f, 17.27f, 28.29f);
            bezierPath.cubicTo(16.12f, 28.29f, 15.35f, 27.71f, 15.28f, 26.79f);
            bezierPath.lineTo(13.14f, 26.79f);
            bezierPath.cubicTo(13.23f, 28.84f, 14.85f, 30.18f, 17.25f, 30.18f);
            bezierPath.cubicTo(19.69f, 30.18f, 21.46f, 28.8f, 21.46f, 26.89f);
            bezierPath.cubicTo(21.46f, 25.46f, 20.54f, 24.46f, 19.07f, 24.3f);
            bezierPath.lineTo(19.07f, 24.16f);
            bezierPath.cubicTo(20.26f, 23.91f, 21.04f, 22.93f, 21.04f, 21.67f);
            bezierPath.cubicTo(21.04f, 19.96f, 19.46f, 18.73f, 17.26f, 18.73f);
            bezierPath.cubicTo(14.92f, 18.73f, 13.41f, 20.03f, 13.34f, 22.09f);
            bezierPath.lineTo(15.41f, 22.09f);
            bezierPath.cubicTo(15.47f, 21.15f, 16.16f, 20.55f, 17.2f, 20.55f);
            bezierPath.cubicTo(18.25f, 20.55f, 18.92f, 21.11f, 18.92f, 21.99f);
            bezierPath.cubicTo(18.92f, 22.88f, 18.23f, 23.48f, 17.21f, 23.48f);
            bezierPath.lineTo(15.9f, 23.48f);
            bezierPath.lineTo(15.9f, 25.18f);
            bezierPath.close();
            bezierPath.moveTo(27.51f, 30.18f);
            bezierPath.cubicTo(30.17f, 30.18f, 31.77f, 28.05f, 31.77f, 24.45f);
            bezierPath.cubicTo(31.77f, 20.83f, 30.15f, 18.73f, 27.51f, 18.73f);
            bezierPath.cubicTo(24.88f, 18.73f, 23.26f, 20.83f, 23.26f, 24.44f);
            bezierPath.cubicTo(23.26f, 28.05f, 24.86f, 30.18f, 27.51f, 30.18f);
            bezierPath.close();
            bezierPath.moveTo(27.51f, 28.33f);
            bezierPath.cubicTo(26.29f, 28.33f, 25.53f, 26.98f, 25.53f, 24.44f);
            bezierPath.cubicTo(25.53f, 21.91f, 26.3f, 20.6f, 27.51f, 20.6f);
            bezierPath.cubicTo(28.74f, 20.6f, 29.5f, 21.9f, 29.5f, 24.44f);
            bezierPath.cubicTo(29.5f, 26.99f, 28.75f, 28.33f, 27.51f, 28.33f);
            bezierPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(backgroundColor);
            canvas.drawPath(bezierPath, paint);
        }
        
        canvas.restore();
    }
    
    private static class CacheForBtnLoopRight {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF strokeRect = new RectF();
        private static Path strokePath = new Path();
        private static RectF triangle1Rect = new RectF();
        private static Path triangle1Path = new Path();
    }
    
    public static void drawBtnLoopRight(Canvas canvas, boolean isEnabled) {
        GuitarTunesStyleKit.drawBtnLoopRight(canvas, new RectF(0f, 0f, 44f, 44f), ResizingBehavior.AspectFit, isEnabled);
    }
    
    public static void drawBtnLoopRight(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, boolean isEnabled) {
        // General Declarations
        Paint paint = CacheForBtnLoopRight.paint;
        
        // Local Colors
        int loopColor = Color.argb(255, 197, 7, 7);
        
        // Local Variables
        float opacity = isEnabled ? 1f : 0.5f;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForBtnLoopRight.resizedFrame;
        GuitarTunesStyleKit.resizingBehaviorApply(resizing, CacheForBtnLoopRight.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 44f);
        
        // Stroke-
        canvas.saveLayerAlpha(null, (int) (opacity * 255f), Canvas.ALL_SAVE_FLAG);
        {
            RectF strokeRect = CacheForBtnLoopRight.strokeRect;
            strokeRect.set(43f, 3f, 43f, 40f);
            Path strokePath = CacheForBtnLoopRight.strokePath;
            strokePath.reset();
            strokePath.moveTo(43f, 3f);
            strokePath.lineTo(43f, 40f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(loopColor);
            canvas.drawPath(strokePath, paint);
            canvas.restore();
        }
        canvas.restore();
        
        // Triangle-1
        canvas.saveLayerAlpha(null, (int) (opacity * 255f), Canvas.ALL_SAVE_FLAG);
        {
            RectF triangle1Rect = CacheForBtnLoopRight.triangle1Rect;
            triangle1Rect.set(20f, 3f, 42f, 21f);
            Path triangle1Path = CacheForBtnLoopRight.triangle1Path;
            triangle1Path.reset();
            triangle1Path.moveTo(20f, 11.94f);
            triangle1Path.lineTo(42f, 21f);
            triangle1Path.lineTo(42f, 3f);
            triangle1Path.lineTo(20f, 11.94f);
            triangle1Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            triangle1Path.setFillType(Path.FillType.EVEN_ODD);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(loopColor);
            canvas.drawPath(triangle1Path, paint);
        }
        canvas.restore();
        
        canvas.restore();
    }
    
    private static class CacheForBtnLoopLeft {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF strokeRect = new RectF();
        private static Path strokePath = new Path();
        private static RectF triangle1Rect = new RectF();
        private static Path triangle1Path = new Path();
    }
    
    public static void drawBtnLoopLeft(Canvas canvas, boolean isEnabled) {
        GuitarTunesStyleKit.drawBtnLoopLeft(canvas, new RectF(0f, 0f, 44f, 44f), ResizingBehavior.AspectFit, isEnabled);
    }
    
    public static void drawBtnLoopLeft(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, boolean isEnabled) {
        // General Declarations
        Paint paint = CacheForBtnLoopLeft.paint;
        
        // Local Colors
        int loopColorGreen = Color.argb(255, 63, 160, 55);
        
        // Local Variables
        float opacity = isEnabled ? 1f : 0.5f;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForBtnLoopLeft.resizedFrame;
        GuitarTunesStyleKit.resizingBehaviorApply(resizing, CacheForBtnLoopLeft.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 44f);
        
        // Stroke-
        canvas.saveLayerAlpha(null, (int) (opacity * 255f), Canvas.ALL_SAVE_FLAG);
        {
            RectF strokeRect = CacheForBtnLoopLeft.strokeRect;
            strokeRect.set(1.3f, 3f, 1.3f, 40f);
            Path strokePath = CacheForBtnLoopLeft.strokePath;
            strokePath.reset();
            strokePath.moveTo(1.3f, 3f);
            strokePath.lineTo(1.3f, 40f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(loopColorGreen);
            canvas.drawPath(strokePath, paint);
            canvas.restore();
        }
        canvas.restore();
        
        // Triangle-1
        canvas.saveLayerAlpha(null, (int) (opacity * 255f), Canvas.ALL_SAVE_FLAG);
        {
            RectF triangle1Rect = CacheForBtnLoopLeft.triangle1Rect;
            triangle1Rect.set(2.3f, 3f, 24.3f, 21f);
            Path triangle1Path = CacheForBtnLoopLeft.triangle1Path;
            triangle1Path.reset();
            triangle1Path.moveTo(24.3f, 12f);
            triangle1Path.lineTo(2.3f, 21f);
            triangle1Path.lineTo(2.3f, 3f);
            triangle1Path.lineTo(24.3f, 12f);
            triangle1Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            triangle1Path.setFillType(Path.FillType.EVEN_ODD);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(loopColorGreen);
            canvas.drawPath(triangle1Path, paint);
        }
        canvas.restore();
        
        canvas.restore();
    }
    
    private static class CacheForBtnLoop {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF stroke67Rect = new RectF();
        private static Path stroke67Path = new Path();
        private static RectF stroke68Rect = new RectF();
        private static Path stroke68Path = new Path();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    public static void drawBtnLoop(Canvas canvas, boolean isPressed, boolean loopsEnabled) {
        GuitarTunesStyleKit.drawBtnLoop(canvas, new RectF(0f, 0f, 44f, 44f), ResizingBehavior.AspectFit, isPressed, loopsEnabled);
    }
    
    public static void drawBtnLoop(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, boolean isPressed, boolean loopsEnabled) {
        // General Declarations
        Paint paint = CacheForBtnLoop.paint;
        
        // Local Colors
        int downControls = Color.argb(255, 132, 132, 132);
        int upControls = Color.argb(255, 0, 0, 0);
        
        // Local Variables
        int btnDarkColor = isPressed ? downControls : upControls;
        boolean loopsDisabled = !loopsEnabled;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForBtnLoop.resizedFrame;
        GuitarTunesStyleKit.resizingBehaviorApply(resizing, CacheForBtnLoop.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 44f);
        
        // Stroke-67
        RectF stroke67Rect = CacheForBtnLoop.stroke67Rect;
        stroke67Rect.set(10.5f, 14.52f, 24f, 31.52f);
        Path stroke67Path = CacheForBtnLoop.stroke67Path;
        stroke67Path.reset();
        stroke67Path.moveTo(17f, 14.52f);
        stroke67Path.lineTo(16.5f, 14.52f);
        stroke67Path.cubicTo(13.19f, 14.52f, 10.5f, 17.21f, 10.5f, 20.52f);
        stroke67Path.cubicTo(10.5f, 23.84f, 13.19f, 26.52f, 16.5f, 26.52f);
        stroke67Path.lineTo(24f, 26.52f);
        stroke67Path.lineTo(17.5f, 31.52f);
        stroke67Path.lineTo(17.5f, 26.52f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(1f);
        paint.setStrokeJoin(Paint.Join.ROUND);
        paint.setStrokeCap(Paint.Cap.ROUND);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(btnDarkColor);
        canvas.drawPath(stroke67Path, paint);
        canvas.restore();
        
        // Stroke-68
        RectF stroke68Rect = CacheForBtnLoop.stroke68Rect;
        stroke68Rect.set(20f, 9.57f, 33.5f, 26.52f);
        Path stroke68Path = CacheForBtnLoop.stroke68Path;
        stroke68Path.reset();
        stroke68Path.moveTo(27f, 26.52f);
        stroke68Path.lineTo(27.5f, 26.52f);
        stroke68Path.cubicTo(30.81f, 26.52f, 33.5f, 23.84f, 33.5f, 20.52f);
        stroke68Path.cubicTo(33.5f, 17.21f, 30.81f, 14.52f, 27.5f, 14.52f);
        stroke68Path.lineTo(20f, 14.52f);
        stroke68Path.lineTo(26.5f, 9.57f);
        stroke68Path.lineTo(26.5f, 14.52f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(1f);
        paint.setStrokeJoin(Paint.Join.ROUND);
        paint.setStrokeCap(Paint.Cap.ROUND);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(btnDarkColor);
        canvas.drawPath(stroke68Path, paint);
        canvas.restore();
        
        // Bezier
        if (loopsDisabled) {
            RectF bezierRect = CacheForBtnLoop.bezierRect;
            bezierRect.set(11.5f, 5.5f, 35.5f, 34.5f);
            Path bezierPath = CacheForBtnLoop.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(11.5f, 34.5f);
            bezierPath.lineTo(35.5f, 5.5f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(Color.BLACK);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
        }
        
        canvas.restore();
    }
    
    private static class CacheForBtnPrevious {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    public static void drawBtnPrevious(Canvas canvas, boolean isPressed, float redValue, float greenValue, float blueValue) {
        GuitarTunesStyleKit.drawBtnPrevious(canvas, new RectF(0f, 0f, 44f, 44f), ResizingBehavior.AspectFit, isPressed, redValue, greenValue, blueValue);
    }
    
    public static void drawBtnPrevious(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, boolean isPressed, float redValue, float greenValue, float blueValue) {
        // General Declarations
        Paint paint = CacheForBtnPrevious.paint;
        
        // Local Colors
        int downControls = Color.argb(255, 132, 132, 132);
        
        // Local Variables
        int backgroundColor = isPressed ? downControls : Color.argb(255, (int) (redValue * 255f), (int) (greenValue * 255f), (int) (blueValue * 255f));
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForBtnPrevious.resizedFrame;
        GuitarTunesStyleKit.resizingBehaviorApply(resizing, CacheForBtnPrevious.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 44f);
        
        // Bezier
        RectF bezierRect = CacheForBtnPrevious.bezierRect;
        bezierRect.set(2f, 2f, 41.67f, 41.71f);
        Path bezierPath = CacheForBtnPrevious.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(41.22f, 2.07f);
        bezierPath.cubicTo(40.93f, 1.94f, 40.58f, 1.99f, 40.33f, 2.21f);
        bezierPath.lineTo(26.77f, 14.22f);
        bezierPath.lineTo(26.77f, 4.48f);
        bezierPath.cubicTo(26.82f, 4.17f, 26.64f, 3.88f, 26.36f, 3.74f);
        bezierPath.cubicTo(26.08f, 3.6f, 25.75f, 3.63f, 25.5f, 3.82f);
        bezierPath.lineTo(2.33f, 21.2f);
        bezierPath.cubicTo(2.12f, 21.35f, 2f, 21.6f, 2f, 21.86f);
        bezierPath.cubicTo(2f, 22.12f, 2.12f, 22.36f, 2.33f, 22.52f);
        bezierPath.lineTo(25.5f, 39.89f);
        bezierPath.cubicTo(25.75f, 40.08f, 26.08f, 40.11f, 26.36f, 39.97f);
        bezierPath.cubicTo(26.64f, 39.83f, 26.82f, 39.54f, 26.77f, 39.23f);
        bezierPath.lineTo(26.77f, 29.49f);
        bezierPath.lineTo(40.33f, 41.5f);
        bezierPath.cubicTo(40.49f, 41.64f, 40.68f, 41.71f, 40.88f, 41.71f);
        bezierPath.cubicTo(41f, 41.71f, 41.11f, 41.69f, 41.22f, 41.64f);
        bezierPath.cubicTo(41.52f, 41.51f, 41.71f, 41.21f, 41.66f, 40.88f);
        bezierPath.lineTo(41.66f, 2.83f);
        bezierPath.cubicTo(41.71f, 2.5f, 41.52f, 2.21f, 41.22f, 2.07f);
        bezierPath.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezierPath.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(backgroundColor);
        canvas.drawPath(bezierPath, paint);
        
        canvas.restore();
    }
    
    private static class CacheForBtnNext {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    public static void drawBtnNext(Canvas canvas, boolean isPressed, float redValue, float greenValue, float blueValue) {
        GuitarTunesStyleKit.drawBtnNext(canvas, new RectF(0f, 0f, 44f, 44f), ResizingBehavior.AspectFit, isPressed, redValue, greenValue, blueValue);
    }
    
    public static void drawBtnNext(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, boolean isPressed, float redValue, float greenValue, float blueValue) {
        // General Declarations
        Paint paint = CacheForBtnNext.paint;
        
        // Local Colors
        int downControls = Color.argb(255, 132, 132, 132);
        
        // Local Variables
        int backgroundColor = isPressed ? downControls : Color.argb(255, (int) (redValue * 255f), (int) (greenValue * 255f), (int) (blueValue * 255f));
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForBtnNext.resizedFrame;
        GuitarTunesStyleKit.resizingBehaviorApply(resizing, CacheForBtnNext.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 44f);
        
        // Bezier
        RectF bezierRect = CacheForBtnNext.bezierRect;
        bezierRect.set(3f, 2f, 42.69f, 41.69f);
        Path bezierPath = CacheForBtnNext.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(42.36f, 21.19f);
        bezierPath.lineTo(19.21f, 3.82f);
        bezierPath.cubicTo(18.96f, 3.63f, 18.62f, 3.6f, 18.34f, 3.74f);
        bezierPath.cubicTo(18.06f, 3.88f, 17.88f, 4.17f, 17.88f, 4.48f);
        bezierPath.lineTo(17.88f, 14.22f);
        bezierPath.lineTo(4.38f, 2.21f);
        bezierPath.cubicTo(4.13f, 1.99f, 3.78f, 1.94f, 3.49f, 2.07f);
        bezierPath.cubicTo(3.19f, 2.21f, 3f, 2.5f, 3f, 2.83f);
        bezierPath.lineTo(3f, 40.86f);
        bezierPath.cubicTo(3f, 41.19f, 3.19f, 41.49f, 3.49f, 41.62f);
        bezierPath.cubicTo(3.6f, 41.67f, 3.71f, 41.69f, 3.83f, 41.69f);
        bezierPath.cubicTo(4.03f, 41.69f, 4.22f, 41.62f, 4.38f, 41.48f);
        bezierPath.lineTo(17.88f, 29.48f);
        bezierPath.lineTo(17.88f, 39.21f);
        bezierPath.cubicTo(17.88f, 39.52f, 18.06f, 39.81f, 18.34f, 39.95f);
        bezierPath.cubicTo(18.62f, 40.09f, 18.96f, 40.06f, 19.21f, 39.87f);
        bezierPath.lineTo(42.36f, 22.51f);
        bezierPath.cubicTo(42.57f, 22.35f, 42.69f, 22.11f, 42.69f, 21.85f);
        bezierPath.cubicTo(42.69f, 21.59f, 42.57f, 21.34f, 42.36f, 21.19f);
        bezierPath.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezierPath.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(backgroundColor);
        canvas.drawPath(bezierPath, paint);
        
        canvas.restore();
    }
    
    private static class CacheForBtnFavorite {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF selectedRect = new RectF();
        private static Path selectedPath = new Path();
    }
    
    public static void drawBtnFavorite(Canvas canvas, boolean isPressed) {
        GuitarTunesStyleKit.drawBtnFavorite(canvas, new RectF(0f, 0f, 44f, 44f), ResizingBehavior.AspectFit, isPressed);
    }
    
    public static void drawBtnFavorite(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, boolean isPressed) {
        // General Declarations
        Paint paint = CacheForBtnFavorite.paint;
        
        // Local Colors
        int favorite = Color.argb(255, 234, 24, 109);
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForBtnFavorite.resizedFrame;
        GuitarTunesStyleKit.resizingBehaviorApply(resizing, CacheForBtnFavorite.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 44f);
        
        // Bezier
        RectF bezierRect = CacheForBtnFavorite.bezierRect;
        bezierRect.set(10.57f, 9.57f, 34.3f, 34.31f);
        Path bezierPath = CacheForBtnFavorite.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(22.43f, 34.31f);
        bezierPath.cubicTo(22.43f, 34.31f, 34.3f, 25.13f, 34.3f, 16.43f);
        bezierPath.cubicTo(34.3f, 7.74f, 23.77f, 7.07f, 22.43f, 15.76f);
        bezierPath.cubicTo(21.1f, 7.07f, 10.57f, 7.74f, 10.57f, 17.1f);
        bezierPath.cubicTo(10.57f, 26.46f, 22.43f, 34.31f, 22.43f, 34.31f);
        bezierPath.lineTo(22.43f, 34.31f);
        bezierPath.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(1f);
        paint.setStrokeJoin(Paint.Join.ROUND);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(favorite);
        canvas.drawPath(bezierPath, paint);
        canvas.restore();
        
        // selected
        if (isPressed) {
            RectF selectedRect = CacheForBtnFavorite.selectedRect;
            selectedRect.set(9.57f, 8.57f, 33.3f, 33.31f);
            Path selectedPath = CacheForBtnFavorite.selectedPath;
            selectedPath.reset();
            selectedPath.moveTo(21.43f, 33.31f);
            selectedPath.cubicTo(21.43f, 33.31f, 33.3f, 24.13f, 33.3f, 15.43f);
            selectedPath.cubicTo(33.3f, 6.74f, 22.77f, 6.07f, 21.43f, 14.76f);
            selectedPath.cubicTo(20.1f, 6.07f, 9.57f, 6.74f, 9.57f, 16.1f);
            selectedPath.cubicTo(9.57f, 25.46f, 21.43f, 33.31f, 21.43f, 33.31f);
            selectedPath.lineTo(21.43f, 33.31f);
            selectedPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(favorite);
            canvas.drawPath(selectedPath, paint);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(favorite);
            canvas.drawPath(selectedPath, paint);
            canvas.restore();
        }
        
        canvas.restore();
    }
    
    private static class CacheForIPhoneBtnFretlightStatus {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 60f, 30f);
        private static RectF resizedFrame = new RectF();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
        private static RectF labelRect = new RectF();
        private static TextPaint labelTextPaint = new TextPaint();
        private static PaintCodeStaticLayout labelStaticLayout = new PaintCodeStaticLayout();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF rectangle2Rect = new RectF();
        private static Path rectangle2Path = new Path();
        private static RectF rectangle3Rect = new RectF();
        private static Path rectangle3Path = new Path();
    }
    
    public static void drawIPhoneBtnFretlightStatus(Canvas canvas, Context context, boolean isPressed, float redValue, float greenValue, float blueValue, float connectedDevices) {
        GuitarTunesStyleKit.drawIPhoneBtnFretlightStatus(canvas, context, new RectF(0f, 0f, 60f, 30f), ResizingBehavior.AspectFit, isPressed, redValue, greenValue, blueValue, connectedDevices);
    }
    
    public static void drawIPhoneBtnFretlightStatus(Canvas canvas, Context context, RectF targetFrame, ResizingBehavior resizing, boolean isPressed, float redValue, float greenValue, float blueValue, float connectedDevices) {
        // General Declarations
        Stack<Matrix> currentTransformation = new Stack<Matrix>();
        currentTransformation.push(new Matrix());
        Paint paint = CacheForIPhoneBtnFretlightStatus.paint;
        
        // Local Colors
        int white = Color.argb(255, 255, 255, 255);
        int downControls = Color.argb(255, 132, 132, 132);
        int upControls = Color.argb(255, 0, 0, 0);
        
        // Local Variables
        String statusTextiPhone = "(" + String.valueOf((int) Math.round(connectedDevices)) + ")";
        int foregroundColorAlt = redValue == 1f && greenValue == 1f && blueValue == 1f ? upControls : white;
        int backgroundColor = isPressed ? downControls : Color.argb(255, (int) (redValue * 255f), (int) (greenValue * 255f), (int) (blueValue * 255f));
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForIPhoneBtnFretlightStatus.resizedFrame;
        GuitarTunesStyleKit.resizingBehaviorApply(resizing, CacheForIPhoneBtnFretlightStatus.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 60f, resizedFrame.height() / 30f);
        
        // Rectangle
        RectF rectangleRect = CacheForIPhoneBtnFretlightStatus.rectangleRect;
        rectangleRect.set(0f, 1f, 59.71f, 29f);
        Path rectanglePath = CacheForIPhoneBtnFretlightStatus.rectanglePath;
        rectanglePath.reset();
        rectanglePath.addRoundRect(rectangleRect, 3f, 3f, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(backgroundColor);
        canvas.drawPath(rectanglePath, paint);
        
        // Label
        RectF labelRect = CacheForIPhoneBtnFretlightStatus.labelRect;
        labelRect.set(24.78f, 1f, 57.2f, 29f);
        TextPaint labelTextPaint = CacheForIPhoneBtnFretlightStatus.labelTextPaint;
        labelTextPaint.reset();
        labelTextPaint.setFlags(Paint.ANTI_ALIAS_FLAG);
        labelTextPaint.setColor(foregroundColorAlt);
        labelTextPaint.setTypeface(Typeface.createFromAsset(context.getAssets(), "HelveticaNeue.dfont"));
        labelTextPaint.setTextSize(16f);
        StaticLayout labelStaticLayout = CacheForIPhoneBtnFretlightStatus.labelStaticLayout.get((int) labelRect.width(), Layout.Alignment.ALIGN_CENTER, statusTextiPhone, labelTextPaint);
        canvas.save();
        canvas.clipRect(labelRect);
        canvas.translate(labelRect.left, labelRect.top + (labelRect.height() - labelStaticLayout.getHeight()) / 2f);
        labelStaticLayout.draw(canvas);
        canvas.restore();
        
        // Group 3
        {
            // Bezier
            RectF bezierRect = CacheForIPhoneBtnFretlightStatus.bezierRect;
            bezierRect.set(7.71f, 5f, 19.49f, 25f);
            Path bezierPath = CacheForIPhoneBtnFretlightStatus.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(8.57f, 9.26f);
            bezierPath.lineTo(19.33f, 19.18f);
            bezierPath.cubicTo(19.53f, 19.37f, 19.54f, 19.7f, 19.34f, 19.9f);
            bezierPath.lineTo(14.35f, 24.85f);
            bezierPath.cubicTo(14.04f, 25.17f, 13.5f, 24.94f, 13.5f, 24.5f);
            bezierPath.lineTo(13.5f, 5.5f);
            bezierPath.cubicTo(13.5f, 5.06f, 14.04f, 4.83f, 14.35f, 5.15f);
            bezierPath.lineTo(19.34f, 10.1f);
            bezierPath.cubicTo(19.54f, 10.3f, 19.53f, 10.63f, 19.33f, 10.82f);
            bezierPath.lineTo(8.55f, 20.74f);
            bezierPath.cubicTo(8.35f, 20.92f, 8.03f, 20.91f, 7.84f, 20.71f);
            bezierPath.cubicTo(7.66f, 20.5f, 7.67f, 20.19f, 7.87f, 20f);
            bezierPath.lineTo(18.65f, 10.09f);
            bezierPath.lineTo(18.63f, 10.81f);
            bezierPath.lineTo(13.65f, 5.85f);
            bezierPath.lineTo(14.5f, 5.5f);
            bezierPath.lineTo(14.5f, 24.5f);
            bezierPath.lineTo(13.65f, 24.15f);
            bezierPath.lineTo(18.63f, 19.19f);
            bezierPath.lineTo(18.65f, 19.91f);
            bezierPath.lineTo(7.89f, 10f);
            bezierPath.cubicTo(7.69f, 9.81f, 7.68f, 9.49f, 7.87f, 9.29f);
            bezierPath.cubicTo(8.05f, 9.09f, 8.37f, 9.08f, 8.57f, 9.26f);
            bezierPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(foregroundColorAlt);
            canvas.drawPath(bezierPath, paint);
            
            // Rectangle 2
            canvas.save();
            canvas.translate(8.65f, 15f);
            currentTransformation.peek().postTranslate(8.65f, 15f);
            canvas.rotate(45f);
            currentTransformation.peek().postRotate(45f);
            RectF rectangle2Rect = CacheForIPhoneBtnFretlightStatus.rectangle2Rect;
            rectangle2Rect.set(-1.17f, -1.17f, 1.17f, 1.17f);
            Path rectangle2Path = CacheForIPhoneBtnFretlightStatus.rectangle2Path;
            rectangle2Path.reset();
            rectangle2Path.moveTo(rectangle2Rect.left, rectangle2Rect.top);
            rectangle2Path.lineTo(rectangle2Rect.right, rectangle2Rect.top);
            rectangle2Path.lineTo(rectangle2Rect.right, rectangle2Rect.bottom);
            rectangle2Path.lineTo(rectangle2Rect.left, rectangle2Rect.bottom);
            rectangle2Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(foregroundColorAlt);
            canvas.drawPath(rectangle2Path, paint);
            canvas.restore();
            canvas.restore();
            
            // Rectangle 3
            canvas.save();
            canvas.translate(19.35f, 15f);
            currentTransformation.peek().postTranslate(19.35f, 15f);
            canvas.rotate(45f);
            currentTransformation.peek().postRotate(45f);
            RectF rectangle3Rect = CacheForIPhoneBtnFretlightStatus.rectangle3Rect;
            rectangle3Rect.set(-1.17f, -1.17f, 1.17f, 1.17f);
            Path rectangle3Path = CacheForIPhoneBtnFretlightStatus.rectangle3Path;
            rectangle3Path.reset();
            rectangle3Path.moveTo(rectangle3Rect.left, rectangle3Rect.top);
            rectangle3Path.lineTo(rectangle3Rect.right, rectangle3Rect.top);
            rectangle3Path.lineTo(rectangle3Rect.right, rectangle3Rect.bottom);
            rectangle3Path.lineTo(rectangle3Rect.left, rectangle3Rect.bottom);
            rectangle3Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(foregroundColorAlt);
            canvas.drawPath(rectangle3Path, paint);
            canvas.restore();
            canvas.restore();
        }
        
        canvas.restore();
    }
    
    private static class CacheForIPhoneBtnTempo {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 96f, 35f);
        private static RectF resizedFrame = new RectF();
        private static RectF ovalRect = new RectF();
        private static Path ovalPath = new Path();
        private static RectF oval2Rect = new RectF();
        private static Path oval2Path = new Path();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
        private static RectF bezier4Rect = new RectF();
        private static Path bezier4Path = new Path();
        private static RectF bezier5Rect = new RectF();
        private static Path bezier5Path = new Path();
        private static RectF bezier6Rect = new RectF();
        private static Path bezier6Path = new Path();
        private static RectF bezier7Rect = new RectF();
        private static Path bezier7Path = new Path();
        private static RectF bezier8Rect = new RectF();
        private static Path bezier8Path = new Path();
        private static RectF bezier9Rect = new RectF();
        private static Path bezier9Path = new Path();
        private static RectF bezier10Rect = new RectF();
        private static Path bezier10Path = new Path();
        private static RectF bezier11Rect = new RectF();
        private static Path bezier11Path = new Path();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
        private static RectF label2Rect = new RectF();
        private static TextPaint label2TextPaint = new TextPaint();
        private static PaintCodeStaticLayout label2StaticLayout = new PaintCodeStaticLayout();
        private static RectF textRect = new RectF();
        private static TextPaint textTextPaint = new TextPaint();
        private static PaintCodeStaticLayout textStaticLayout = new PaintCodeStaticLayout();
        private static RectF text2Rect = new RectF();
        private static TextPaint text2TextPaint = new TextPaint();
        private static PaintCodeStaticLayout text2StaticLayout = new PaintCodeStaticLayout();
        private static RectF text3Rect = new RectF();
        private static TextPaint text3TextPaint = new TextPaint();
        private static PaintCodeStaticLayout text3StaticLayout = new PaintCodeStaticLayout();
    }
    
    public static void drawIPhoneBtnTempo(Canvas canvas, Context context, boolean isPressed, boolean isAlt, float rate) {
        GuitarTunesStyleKit.drawIPhoneBtnTempo(canvas, context, new RectF(0f, 0f, 96f, 35f), ResizingBehavior.AspectFit, isPressed, isAlt, rate);
    }
    
    public static void drawIPhoneBtnTempo(Canvas canvas, Context context, RectF targetFrame, ResizingBehavior resizing, boolean isPressed, boolean isAlt, float rate) {
        // General Declarations
        Paint paint = CacheForIPhoneBtnTempo.paint;
        
        // Local Colors
        int downControls = Color.argb(255, 132, 132, 132);
        int white = Color.argb(255, 255, 255, 255);
        int upControls = Color.argb(255, 0, 0, 0);
        
        // Local Variables
        int btnColorBlackAltWhite = isAlt ? (isPressed ? downControls : white) : (isPressed ? downControls : upControls);
        boolean isStep = rate < 30f;
        boolean isNotStep = !isStep;
        String rateString = String.valueOf((int) Math.round(rate)) + "%";
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForIPhoneBtnTempo.resizedFrame;
        GuitarTunesStyleKit.resizingBehaviorApply(resizing, CacheForIPhoneBtnTempo.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 96f, resizedFrame.height() / 35f);
        
        // Group 2
        {
            // Oval
            RectF ovalRect = CacheForIPhoneBtnTempo.ovalRect;
            ovalRect.set(4f, 7.66f, 24f, 27.66f);
            Path ovalPath = CacheForIPhoneBtnTempo.ovalPath;
            ovalPath.reset();
            ovalPath.addOval(ovalRect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnColorBlackAltWhite);
            canvas.drawPath(ovalPath, paint);
            canvas.restore();
            
            // Oval 2
            RectF oval2Rect = CacheForIPhoneBtnTempo.oval2Rect;
            oval2Rect.set(13f, 16.66f, 15f, 18.66f);
            Path oval2Path = CacheForIPhoneBtnTempo.oval2Path;
            oval2Path.reset();
            oval2Path.addOval(oval2Rect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnColorBlackAltWhite);
            canvas.drawPath(oval2Path, paint);
            canvas.restore();
            
            // Bezier
            RectF bezierRect = CacheForIPhoneBtnTempo.bezierRect;
            bezierRect.set(14.92f, 12.43f, 19.23f, 16.73f);
            Path bezierPath = CacheForIPhoneBtnTempo.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(14.92f, 16.73f);
            bezierPath.lineTo(19.23f, 12.43f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnColorBlackAltWhite);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
            
            // Bezier 2
            RectF bezier2Rect = CacheForIPhoneBtnTempo.bezier2Rect;
            bezier2Rect.set(5.69f, 17.22f, 7.43f, 17.22f);
            Path bezier2Path = CacheForIPhoneBtnTempo.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(5.69f, 17.22f);
            bezier2Path.lineTo(7.43f, 17.22f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnColorBlackAltWhite);
            canvas.drawPath(bezier2Path, paint);
            canvas.restore();
            
            // Bezier 3
            RectF bezier3Rect = CacheForIPhoneBtnTempo.bezier3Rect;
            bezier3Rect.set(6.37f, 20.15f, 7.97f, 20.82f);
            Path bezier3Path = CacheForIPhoneBtnTempo.bezier3Path;
            bezier3Path.reset();
            bezier3Path.moveTo(6.37f, 20.82f);
            bezier3Path.lineTo(7.97f, 20.15f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnColorBlackAltWhite);
            canvas.drawPath(bezier3Path, paint);
            canvas.restore();
            
            // Bezier 4
            RectF bezier4Rect = CacheForIPhoneBtnTempo.bezier4Rect;
            bezier4Rect.set(20.02f, 20.15f, 21.63f, 20.82f);
            Path bezier4Path = CacheForIPhoneBtnTempo.bezier4Path;
            bezier4Path.reset();
            bezier4Path.moveTo(21.63f, 20.82f);
            bezier4Path.lineTo(20.02f, 20.15f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnColorBlackAltWhite);
            canvas.drawPath(bezier4Path, paint);
            canvas.restore();
            
            // Bezier 5
            RectF bezier5Rect = CacheForIPhoneBtnTempo.bezier5Rect;
            bezier5Rect.set(20.52f, 17.22f, 22.26f, 17.22f);
            Path bezier5Path = CacheForIPhoneBtnTempo.bezier5Path;
            bezier5Path.reset();
            bezier5Path.moveTo(22.26f, 17.22f);
            bezier5Path.lineTo(20.52f, 17.22f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnColorBlackAltWhite);
            canvas.drawPath(bezier5Path, paint);
            canvas.restore();
            
            // Bezier 6
            RectF bezier6Rect = CacheForIPhoneBtnTempo.bezier6Rect;
            bezier6Rect.set(20.02f, 14.49f, 21.63f, 15.16f);
            Path bezier6Path = CacheForIPhoneBtnTempo.bezier6Path;
            bezier6Path.reset();
            bezier6Path.moveTo(21.63f, 14.49f);
            bezier6Path.lineTo(20.02f, 15.16f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnColorBlackAltWhite);
            canvas.drawPath(bezier6Path, paint);
            canvas.restore();
            
            // Bezier 7
            RectF bezier7Rect = CacheForIPhoneBtnTempo.bezier7Rect;
            bezier7Rect.set(17.04f, 10.02f, 17.71f, 11.63f);
            Path bezier7Path = CacheForIPhoneBtnTempo.bezier7Path;
            bezier7Path.reset();
            bezier7Path.moveTo(17.71f, 10.02f);
            bezier7Path.lineTo(17.04f, 11.63f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnColorBlackAltWhite);
            canvas.drawPath(bezier7Path, paint);
            canvas.restore();
            
            // Bezier 8
            RectF bezier8Rect = CacheForIPhoneBtnTempo.bezier8Rect;
            bezier8Rect.set(14.43f, 9.56f, 14.44f, 11.29f);
            Path bezier8Path = CacheForIPhoneBtnTempo.bezier8Path;
            bezier8Path.reset();
            bezier8Path.moveTo(14.43f, 9.56f);
            bezier8Path.lineTo(14.43f, 11.29f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnColorBlackAltWhite);
            canvas.drawPath(bezier8Path, paint);
            canvas.restore();
            
            // Bezier 9
            RectF bezier9Rect = CacheForIPhoneBtnTempo.bezier9Rect;
            bezier9Rect.set(10.84f, 10.02f, 11.5f, 11.63f);
            Path bezier9Path = CacheForIPhoneBtnTempo.bezier9Path;
            bezier9Path.reset();
            bezier9Path.moveTo(10.84f, 10.02f);
            bezier9Path.lineTo(11.5f, 11.63f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnColorBlackAltWhite);
            canvas.drawPath(bezier9Path, paint);
            canvas.restore();
            
            // Bezier 10
            RectF bezier10Rect = CacheForIPhoneBtnTempo.bezier10Rect;
            bezier10Rect.set(8.16f, 11.81f, 9.39f, 13.04f);
            Path bezier10Path = CacheForIPhoneBtnTempo.bezier10Path;
            bezier10Path.reset();
            bezier10Path.moveTo(8.16f, 11.81f);
            bezier10Path.lineTo(9.39f, 13.04f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnColorBlackAltWhite);
            canvas.drawPath(bezier10Path, paint);
            canvas.restore();
            
            // Bezier 11
            RectF bezier11Rect = CacheForIPhoneBtnTempo.bezier11Rect;
            bezier11Rect.set(6.37f, 14.49f, 7.97f, 15.16f);
            Path bezier11Path = CacheForIPhoneBtnTempo.bezier11Path;
            bezier11Path.reset();
            bezier11Path.moveTo(6.37f, 14.49f);
            bezier11Path.lineTo(7.97f, 15.16f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnColorBlackAltWhite);
            canvas.drawPath(bezier11Path, paint);
            canvas.restore();
            
            // Rectangle
            RectF rectangleRect = CacheForIPhoneBtnTempo.rectangleRect;
            rectangleRect.set(10f, 21.66f, 18f, 24.66f);
            Path rectanglePath = CacheForIPhoneBtnTempo.rectanglePath;
            rectanglePath.reset();
            rectanglePath.moveTo(rectangleRect.left, rectangleRect.top);
            rectanglePath.lineTo(rectangleRect.right, rectangleRect.top);
            rectanglePath.lineTo(rectangleRect.right, rectangleRect.bottom);
            rectanglePath.lineTo(rectangleRect.left, rectangleRect.bottom);
            rectanglePath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnColorBlackAltWhite);
            canvas.drawPath(rectanglePath, paint);
            canvas.restore();
        }
        
        // Label 2
        if (isNotStep) {
            RectF label2Rect = CacheForIPhoneBtnTempo.label2Rect;
            label2Rect.set(23.88f, 5.48f, 57f, 29.6f);
            TextPaint label2TextPaint = CacheForIPhoneBtnTempo.label2TextPaint;
            label2TextPaint.reset();
            label2TextPaint.setFlags(Paint.ANTI_ALIAS_FLAG);
            label2TextPaint.setColor(btnColorBlackAltWhite);
            label2TextPaint.setTypeface(Typeface.createFromAsset(context.getAssets(), "HelveticaNeue.dfont"));
            label2TextPaint.setTextSize(12f);
            StaticLayout label2StaticLayout = CacheForIPhoneBtnTempo.label2StaticLayout.get((int) label2Rect.width(), Layout.Alignment.ALIGN_OPPOSITE, rateString, label2TextPaint);
            canvas.save();
            canvas.clipRect(label2Rect);
            canvas.translate(label2Rect.left, label2Rect.top + (label2Rect.height() - label2StaticLayout.getHeight()) / 2f);
            label2StaticLayout.draw(canvas);
            canvas.restore();
        }
        
        // STEP
        if (isStep) {
            // Text
            RectF textRect = CacheForIPhoneBtnTempo.textRect;
            textRect.set(26.71f, 9.9f, 61.94f, 26.37f);
            TextPaint textTextPaint = CacheForIPhoneBtnTempo.textTextPaint;
            textTextPaint.reset();
            textTextPaint.setFlags(Paint.ANTI_ALIAS_FLAG);
            textTextPaint.setColor(btnColorBlackAltWhite);
            textTextPaint.setTypeface(Typeface.createFromAsset(context.getAssets(), "SF-UI-Text-Bold.otf"));
            textTextPaint.setTextSize(12f);
            StaticLayout textStaticLayout = CacheForIPhoneBtnTempo.textStaticLayout.get((int) textRect.width(), Layout.Alignment.ALIGN_NORMAL, "NOTE", textTextPaint);
            canvas.save();
            canvas.clipRect(textRect);
            canvas.translate(textRect.left, textRect.top + (textRect.height() - textStaticLayout.getHeight()) / 2f);
            textStaticLayout.draw(canvas);
            canvas.restore();
            
            // Text 2
            RectF text2Rect = CacheForIPhoneBtnTempo.text2Rect;
            text2Rect.set(60.67f, 9.62f, 95.89f, 26.08f);
            TextPaint text2TextPaint = CacheForIPhoneBtnTempo.text2TextPaint;
            text2TextPaint.reset();
            text2TextPaint.setFlags(Paint.ANTI_ALIAS_FLAG);
            text2TextPaint.setColor(btnColorBlackAltWhite);
            text2TextPaint.setTypeface(Typeface.createFromAsset(context.getAssets(), "SF-UI-Text-Regular.otf"));
            text2TextPaint.setTextSize(12f);
            StaticLayout text2StaticLayout = CacheForIPhoneBtnTempo.text2StaticLayout.get((int) text2Rect.width(), Layout.Alignment.ALIGN_NORMAL, "Step", text2TextPaint);
            canvas.save();
            canvas.clipRect(text2Rect);
            canvas.translate(text2Rect.left, text2Rect.top + (text2Rect.height() - text2StaticLayout.getHeight()) / 2f);
            text2StaticLayout.draw(canvas);
            canvas.restore();
            
            // Text 3
            RectF text3Rect = CacheForIPhoneBtnTempo.text3Rect;
            text3Rect.set(85.42f, 9.27f, 96.27f, 22.97f);
            TextPaint text3TextPaint = CacheForIPhoneBtnTempo.text3TextPaint;
            text3TextPaint.reset();
            text3TextPaint.setFlags(Paint.ANTI_ALIAS_FLAG);
            text3TextPaint.setColor(btnColorBlackAltWhite);
            text3TextPaint.setTypeface(Typeface.createFromAsset(context.getAssets(), "SF-UI-Text-Regular.otf"));
            text3TextPaint.setTextSize(9f);
            StaticLayout text3StaticLayout = CacheForIPhoneBtnTempo.text3StaticLayout.get((int) text3Rect.width(), Layout.Alignment.ALIGN_NORMAL, "â¢", text3TextPaint);
            canvas.save();
            canvas.clipRect(text3Rect);
            canvas.translate(text3Rect.left, text3Rect.top + (text3Rect.height() - text3StaticLayout.getHeight()) / 2f);
            text3StaticLayout.draw(canvas);
            canvas.restore();
        }
        
        canvas.restore();
    }
    
    private static class CacheForIPhoneVolumeIcon {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
        private static RectF bezier4Rect = new RectF();
        private static Path bezier4Path = new Path();
    }
    
    public static void drawIPhoneVolumeIcon(Canvas canvas) {
        GuitarTunesStyleKit.drawIPhoneVolumeIcon(canvas, new RectF(0f, 0f, 44f, 44f), ResizingBehavior.AspectFit);
    }
    
    public static void drawIPhoneVolumeIcon(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForIPhoneVolumeIcon.paint;
        
        // Local Colors
        int upColor = Color.argb(255, 76, 142, 162);
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForIPhoneVolumeIcon.resizedFrame;
        GuitarTunesStyleKit.resizingBehaviorApply(resizing, CacheForIPhoneVolumeIcon.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 44f);
        
        // Group 2
        {
            // Bezier
            RectF bezierRect = CacheForIPhoneVolumeIcon.bezierRect;
            bezierRect.set(5.08f, 3.76f, 21.26f, 39.76f);
            Path bezierPath = CacheForIPhoneVolumeIcon.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(11.82f, 16.36f);
            bezierPath.lineTo(7.11f, 16.36f);
            bezierPath.cubicTo(5.99f, 16.36f, 5.08f, 17.57f, 5.08f, 19.06f);
            bezierPath.lineTo(5.08f, 24.46f);
            bezierPath.cubicTo(5.08f, 25.95f, 5.99f, 27.16f, 7.11f, 27.16f);
            bezierPath.lineTo(11.82f, 27.16f);
            bezierPath.lineTo(21.26f, 39.76f);
            bezierPath.lineTo(21.26f, 3.76f);
            bezierPath.lineTo(11.82f, 16.36f);
            bezierPath.lineTo(11.82f, 16.36f);
            bezierPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(upColor);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
            
            // Bezier 2
            RectF bezier2Rect = CacheForIPhoneVolumeIcon.bezier2Rect;
            bezier2Rect.set(31.37f, 7.36f, 36.08f, 36.16f);
            Path bezier2Path = CacheForIPhoneVolumeIcon.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(31.37f, 7.36f);
            bezier2Path.cubicTo(37.66f, 14.71f, 37.65f, 28.82f, 31.37f, 36.16f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(upColor);
            canvas.drawPath(bezier2Path, paint);
            canvas.restore();
            
            // Bezier 3
            RectF bezier3Rect = CacheForIPhoneVolumeIcon.bezier3Rect;
            bezier3Rect.set(28f, 10.96f, 32.01f, 32.56f);
            Path bezier3Path = CacheForIPhoneVolumeIcon.bezier3Path;
            bezier3Path.reset();
            bezier3Path.moveTo(28f, 10.96f);
            bezier3Path.cubicTo(33.33f, 16.84f, 33.36f, 26.63f, 28f, 32.56f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(upColor);
            canvas.drawPath(bezier3Path, paint);
            canvas.restore();
            
            // Bezier 4
            RectF bezier4Rect = CacheForIPhoneVolumeIcon.bezier4Rect;
            bezier4Rect.set(25.3f, 15.46f, 28f, 28.06f);
            Path bezier4Path = CacheForIPhoneVolumeIcon.bezier4Path;
            bezier4Path.reset();
            bezier4Path.moveTo(25.3f, 15.46f);
            bezier4Path.cubicTo(28.91f, 18.97f, 28.9f, 24.57f, 25.3f, 28.06f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(upColor);
            canvas.drawPath(bezier4Path, paint);
            canvas.restore();
        }
        
        canvas.restore();
    }
    
    private static class CacheForIPhoneBtnLoopToggle {
        private static Paint paint = new Paint();
        private static RectF stroke67Rect = new RectF();
        private static Path stroke67Path = new Path();
        private static RectF stroke68Rect = new RectF();
        private static Path stroke68Path = new Path();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    
    public static void drawIPhoneBtnLoopToggle(Canvas canvas, boolean isPressed, boolean isAlt, boolean loopsEnabled) {
        // General Declarations
        Paint paint = CacheForIPhoneBtnLoopToggle.paint;
        
        // Local Colors
        int connectedColor = Color.argb(255, 255, 0, 0);
        int downControls = Color.argb(255, 132, 132, 132);
        int white = Color.argb(255, 255, 255, 255);
        int upControls = Color.argb(255, 0, 0, 0);
        
        // Local Variables
        int btnColorBlackAltWhite = isAlt ? (isPressed ? downControls : white) : (isPressed ? downControls : upControls);
        boolean loopsDisabled = !loopsEnabled;
        
        // Group
        {
            // Stroke-67
            RectF stroke67Rect = CacheForIPhoneBtnLoopToggle.stroke67Rect;
            stroke67Rect.set(8.5f, 16.08f, 24.16f, 36.01f);
            Path stroke67Path = CacheForIPhoneBtnLoopToggle.stroke67Path;
            stroke67Path.reset();
            stroke67Path.moveTo(16.04f, 16.08f);
            stroke67Path.lineTo(15.46f, 16.08f);
            stroke67Path.cubicTo(11.61f, 16.08f, 8.5f, 19.23f, 8.5f, 23.11f);
            stroke67Path.cubicTo(8.5f, 27f, 11.61f, 30.15f, 15.46f, 30.15f);
            stroke67Path.lineTo(24.16f, 30.15f);
            stroke67Path.lineTo(16.62f, 36.01f);
            stroke67Path.lineTo(16.62f, 30.15f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnColorBlackAltWhite);
            canvas.drawPath(stroke67Path, paint);
            canvas.restore();
            
            // Stroke-68
            RectF stroke68Rect = CacheForIPhoneBtnLoopToggle.stroke68Rect;
            stroke68Rect.set(19.52f, 10.27f, 35.18f, 30.15f);
            Path stroke68Path = CacheForIPhoneBtnLoopToggle.stroke68Path;
            stroke68Path.reset();
            stroke68Path.moveTo(27.64f, 30.15f);
            stroke68Path.lineTo(28.22f, 30.15f);
            stroke68Path.cubicTo(32.06f, 30.15f, 35.18f, 27f, 35.18f, 23.11f);
            stroke68Path.cubicTo(35.18f, 19.23f, 32.06f, 16.08f, 28.22f, 16.08f);
            stroke68Path.lineTo(19.52f, 16.08f);
            stroke68Path.lineTo(27.06f, 10.27f);
            stroke68Path.lineTo(27.06f, 16.08f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnColorBlackAltWhite);
            canvas.drawPath(stroke68Path, paint);
            canvas.restore();
            
            // Bezier
            if (loopsDisabled) {
                RectF bezierRect = CacheForIPhoneBtnLoopToggle.bezierRect;
                bezierRect.set(9.66f, 5.5f, 37.5f, 39.5f);
                Path bezierPath = CacheForIPhoneBtnLoopToggle.bezierPath;
                bezierPath.reset();
                bezierPath.moveTo(9.66f, 39.5f);
                bezierPath.lineTo(37.5f, 5.5f);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(1f);
                paint.setStrokeMiter(10f);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(connectedColor);
                canvas.drawPath(bezierPath, paint);
                canvas.restore();
            }
        }
    }
    
    private static class CacheForIPhoneBtnLoopSave {
        private static Paint paint = new Paint();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
    }
    
    
    public static void drawIPhoneBtnLoopSave(Canvas canvas, boolean isPressed, boolean isAlt) {
        // General Declarations
        Paint paint = CacheForIPhoneBtnLoopSave.paint;
        
        // Local Colors
        int downControls = Color.argb(255, 132, 132, 132);
        int white = Color.argb(255, 255, 255, 255);
        int upControls = Color.argb(255, 0, 0, 0);
        
        // Local Variables
        int btnColorBlackAltWhite = isAlt ? (isPressed ? downControls : white) : (isPressed ? downControls : upControls);
        
        // Group 2
        {
            // Bezier
            RectF bezierRect = CacheForIPhoneBtnLoopSave.bezierRect;
            bezierRect.set(6.66f, 13.5f, 25.44f, 37.47f);
            Path bezierPath = CacheForIPhoneBtnLoopSave.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(15.71f, 13.5f);
            bezierPath.lineTo(15.01f, 13.5f);
            bezierPath.cubicTo(10.4f, 13.5f, 6.66f, 17.29f, 6.66f, 21.96f);
            bezierPath.cubicTo(6.66f, 26.63f, 10.4f, 30.42f, 15.01f, 30.42f);
            bezierPath.lineTo(25.44f, 30.42f);
            bezierPath.lineTo(16.4f, 37.47f);
            bezierPath.lineTo(16.4f, 30.42f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnColorBlackAltWhite);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
            
            // Bezier 2
            RectF bezier2Rect = CacheForIPhoneBtnLoopSave.bezier2Rect;
            bezier2Rect.set(19.88f, 6.51f, 38.66f, 30.42f);
            Path bezier2Path = CacheForIPhoneBtnLoopSave.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(29.62f, 30.42f);
            bezier2Path.lineTo(30.31f, 30.42f);
            bezier2Path.cubicTo(34.92f, 30.42f, 38.66f, 26.63f, 38.66f, 21.96f);
            bezier2Path.cubicTo(38.66f, 17.29f, 34.92f, 13.5f, 30.31f, 13.5f);
            bezier2Path.lineTo(19.88f, 13.5f);
            bezier2Path.lineTo(28.92f, 6.51f);
            bezier2Path.lineTo(28.92f, 13.5f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnColorBlackAltWhite);
            canvas.drawPath(bezier2Path, paint);
            canvas.restore();
            
            // Bezier 3
            RectF bezier3Rect = CacheForIPhoneBtnLoopSave.bezier3Rect;
            bezier3Rect.set(18.49f, 17.02f, 29.03f, 26.89f);
            Path bezier3Path = CacheForIPhoneBtnLoopSave.bezier3Path;
            bezier3Path.reset();
            bezier3Path.moveTo(29.03f, 17.02f);
            bezier3Path.lineTo(21.19f, 26.89f);
            bezier3Path.lineTo(18.49f, 24.15f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnColorBlackAltWhite);
            canvas.drawPath(bezier3Path, paint);
            canvas.restore();
        }
    }
    
    private static class CacheForIPhoneBtnMyLoops {
        private static Paint paint = new Paint();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF textRect = new RectF();
        private static Path textPath = new Path();
    }
    
    
    public static void drawIPhoneBtnMyLoops(Canvas canvas, boolean isPressed, boolean isAlt) {
        // General Declarations
        Paint paint = CacheForIPhoneBtnMyLoops.paint;
        
        // Local Colors
        int downControls = Color.argb(255, 132, 132, 132);
        int white = Color.argb(255, 255, 255, 255);
        int upControls = Color.argb(255, 0, 0, 0);
        
        // Local Variables
        int btnColorBlackAltWhite = isAlt ? (isPressed ? downControls : white) : (isPressed ? downControls : upControls);
        
        // Group 3
        {
            // Bezier
            RectF bezierRect = CacheForIPhoneBtnMyLoops.bezierRect;
            bezierRect.set(6.66f, 12.06f, 25.44f, 38.35f);
            Path bezierPath = CacheForIPhoneBtnMyLoops.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(15.71f, 12.06f);
            bezierPath.lineTo(15.01f, 12.06f);
            bezierPath.cubicTo(10.4f, 12.06f, 6.66f, 16.22f, 6.66f, 21.34f);
            bezierPath.cubicTo(6.66f, 26.46f, 10.4f, 30.62f, 15.01f, 30.62f);
            bezierPath.lineTo(25.44f, 30.62f);
            bezierPath.lineTo(16.4f, 38.35f);
            bezierPath.lineTo(16.4f, 30.62f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnColorBlackAltWhite);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
            
            // Bezier 2
            RectF bezier2Rect = CacheForIPhoneBtnMyLoops.bezier2Rect;
            bezier2Rect.set(19.88f, 4.39f, 38.66f, 30.62f);
            Path bezier2Path = CacheForIPhoneBtnMyLoops.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(29.62f, 30.62f);
            bezier2Path.lineTo(30.31f, 30.62f);
            bezier2Path.cubicTo(34.92f, 30.62f, 38.66f, 26.46f, 38.66f, 21.34f);
            bezier2Path.cubicTo(38.66f, 16.22f, 34.92f, 12.06f, 30.31f, 12.06f);
            bezier2Path.lineTo(19.88f, 12.06f);
            bezier2Path.lineTo(28.92f, 4.39f);
            bezier2Path.lineTo(28.92f, 12.06f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnColorBlackAltWhite);
            canvas.drawPath(bezier2Path, paint);
            canvas.restore();
            
            // Text
            RectF textRect = CacheForIPhoneBtnMyLoops.textRect;
            textRect.set(16.31f, 17.7f, 28.05f, 24.24f);
            Path textPath = CacheForIPhoneBtnMyLoops.textPath;
            textPath.reset();
            textPath.moveTo(17f, 24.24f);
            textPath.lineTo(17f, 19.25f);
            textPath.lineTo(17.05f, 19.25f);
            textPath.lineTo(18.9f, 24.2f);
            textPath.lineTo(19.52f, 24.2f);
            textPath.lineTo(21.38f, 19.25f);
            textPath.lineTo(21.43f, 19.25f);
            textPath.lineTo(21.43f, 24.24f);
            textPath.lineTo(22.11f, 24.24f);
            textPath.lineTo(22.11f, 17.7f);
            textPath.lineTo(21.26f, 17.7f);
            textPath.lineTo(19.25f, 23.11f);
            textPath.lineTo(19.18f, 23.11f);
            textPath.lineTo(17.17f, 17.7f);
            textPath.lineTo(16.31f, 17.7f);
            textPath.lineTo(16.31f, 24.24f);
            textPath.lineTo(17f, 24.24f);
            textPath.close();
            textPath.moveTo(25.97f, 24.24f);
            textPath.lineTo(25.97f, 21.43f);
            textPath.lineTo(28.05f, 17.7f);
            textPath.lineTo(27.22f, 17.7f);
            textPath.lineTo(25.63f, 20.61f);
            textPath.lineTo(25.57f, 20.61f);
            textPath.lineTo(23.98f, 17.7f);
            textPath.lineTo(23.15f, 17.7f);
            textPath.lineTo(25.23f, 21.43f);
            textPath.lineTo(25.23f, 24.24f);
            textPath.lineTo(25.97f, 24.24f);
            textPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(btnColorBlackAltWhite);
            canvas.drawPath(textPath, paint);
        }
    }
    
    private static class CacheForBtnStepNext {
        private static Paint paint = new Paint();
        private static RectF ovalRect = new RectF();
        private static Path ovalPath = new Path();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    
    public static void drawBtnStepNext(Canvas canvas, boolean isPressed) {
        // General Declarations
        Paint paint = CacheForBtnStepNext.paint;
        
        // Local Colors
        int upColor = Color.argb(255, 76, 142, 162);
        int downColor = Color.argb(255, 63, 113, 129);
        
        // Local Variables
        int btnColor = isPressed ? downColor : upColor;
        
        // Group
        {
            // Oval
            RectF ovalRect = CacheForBtnStepNext.ovalRect;
            ovalRect.set(7f, 7f, 37f, 37f);
            Path ovalPath = CacheForBtnStepNext.ovalPath;
            ovalPath.reset();
            ovalPath.addOval(ovalRect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(btnColor);
            canvas.drawPath(ovalPath, paint);
            
            // Bezier
            RectF bezierRect = CacheForBtnStepNext.bezierRect;
            bezierRect.set(18.97f, 13.83f, 28.97f, 29.83f);
            Path bezierPath = CacheForBtnStepNext.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(28.83f, 21.54f);
            bezierPath.lineTo(19.5f, 13.91f);
            bezierPath.cubicTo(19.4f, 13.82f, 19.27f, 13.81f, 19.15f, 13.87f);
            bezierPath.cubicTo(19.04f, 13.93f, 18.97f, 14.06f, 18.97f, 14.2f);
            bezierPath.lineTo(18.97f, 29.47f);
            bezierPath.cubicTo(18.97f, 29.61f, 19.04f, 29.73f, 19.15f, 29.79f);
            bezierPath.cubicTo(19.27f, 29.86f, 19.4f, 29.84f, 19.5f, 29.76f);
            bezierPath.lineTo(28.83f, 22.12f);
            bezierPath.cubicTo(28.92f, 22.05f, 28.97f, 21.95f, 28.97f, 21.83f);
            bezierPath.cubicTo(28.97f, 21.72f, 28.92f, 21.61f, 28.83f, 21.54f);
            bezierPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            bezierPath.setFillType(Path.FillType.EVEN_ODD);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(GuitarTunesStyleKit.playbackBackground);
            canvas.drawPath(bezierPath, paint);
        }
    }
    
    private static class CacheForBtnStepPrev {
        private static Paint paint = new Paint();
        private static RectF oval2Rect = new RectF();
        private static Path oval2Path = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
    }
    
    
    public static void drawBtnStepPrev(Canvas canvas, boolean isPressed) {
        // General Declarations
        Paint paint = CacheForBtnStepPrev.paint;
        
        // Local Colors
        int upColor = Color.argb(255, 76, 142, 162);
        int downColor = Color.argb(255, 63, 113, 129);
        
        // Local Variables
        int btnColor = isPressed ? downColor : upColor;
        
        // Group 2
        {
            // Oval 2
            RectF oval2Rect = CacheForBtnStepPrev.oval2Rect;
            oval2Rect.set(7f, 6.96f, 37f, 36.96f);
            Path oval2Path = CacheForBtnStepPrev.oval2Path;
            oval2Path.reset();
            oval2Path.addOval(oval2Rect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(btnColor);
            canvas.drawPath(oval2Path, paint);
            
            // Bezier 2
            RectF bezier2Rect = CacheForBtnStepPrev.bezier2Rect;
            bezier2Rect.set(15.24f, 14.18f, 25.24f, 30.18f);
            Path bezier2Path = CacheForBtnStepPrev.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(15.37f, 21.89f);
            bezier2Path.lineTo(24.71f, 14.25f);
            bezier2Path.cubicTo(24.81f, 14.17f, 24.94f, 14.16f, 25.06f, 14.22f);
            bezier2Path.cubicTo(25.17f, 14.28f, 25.24f, 14.41f, 25.24f, 14.54f);
            bezier2Path.lineTo(25.24f, 29.82f);
            bezier2Path.cubicTo(25.24f, 29.95f, 25.17f, 30.08f, 25.06f, 30.14f);
            bezier2Path.cubicTo(24.94f, 30.2f, 24.81f, 30.19f, 24.71f, 30.11f);
            bezier2Path.lineTo(15.37f, 22.47f);
            bezier2Path.cubicTo(15.29f, 22.4f, 15.24f, 22.29f, 15.24f, 22.18f);
            bezier2Path.cubicTo(15.24f, 22.07f, 15.29f, 21.96f, 15.37f, 21.89f);
            bezier2Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            bezier2Path.setFillType(Path.FillType.EVEN_ODD);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(GuitarTunesStyleKit.playbackBackground);
            canvas.drawPath(bezier2Path, paint);
        }
    }
    
    private static class CacheForBtnFullscreen {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
        private static RectF bezier4Rect = new RectF();
        private static Path bezier4Path = new Path();
        private static RectF bezier5Rect = new RectF();
        private static Path bezier5Path = new Path();
        private static RectF bezier6Rect = new RectF();
        private static Path bezier6Path = new Path();
    }
    
    public static void drawBtnFullscreen(Canvas canvas) {
        GuitarTunesStyleKit.drawBtnFullscreen(canvas, new RectF(0f, 0f, 44f, 44f), ResizingBehavior.AspectFit);
    }
    
    public static void drawBtnFullscreen(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForBtnFullscreen.paint;
        
        // Local Colors
        int white = Color.argb(255, 255, 255, 255);
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForBtnFullscreen.resizedFrame;
        GuitarTunesStyleKit.resizingBehaviorApply(resizing, CacheForBtnFullscreen.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 44f);
        
        // Group 3
        {
            // Bezier
            RectF bezierRect = CacheForBtnFullscreen.bezierRect;
            bezierRect.set(11.56f, 10.15f, 21.77f, 20.33f);
            Path bezierPath = CacheForBtnFullscreen.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(21.77f, 20.33f);
            bezierPath.cubicTo(21.77f, 20.33f, 11.56f, 10.15f, 11.56f, 10.15f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2f);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(white);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
            
            // Bezier 2
            RectF bezier2Rect = CacheForBtnFullscreen.bezier2Rect;
            bezier2Rect.set(11.63f, 10.52f, 11.63f, 19.25f);
            Path bezier2Path = CacheForBtnFullscreen.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(11.63f, 19.25f);
            bezier2Path.cubicTo(11.63f, 19.25f, 11.63f, 10.52f, 11.63f, 10.52f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2f);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(white);
            canvas.drawPath(bezier2Path, paint);
            canvas.restore();
            
            // Bezier 3
            RectF bezier3Rect = CacheForBtnFullscreen.bezier3Rect;
            bezier3Rect.set(11.81f, 10.1f, 20.87f, 10.1f);
            Path bezier3Path = CacheForBtnFullscreen.bezier3Path;
            bezier3Path.reset();
            bezier3Path.moveTo(20.87f, 10.1f);
            bezier3Path.cubicTo(20.87f, 10.1f, 11.81f, 10.1f, 11.81f, 10.1f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2f);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(white);
            canvas.drawPath(bezier3Path, paint);
            canvas.restore();
            
            // Bezier 4
            RectF bezier4Rect = CacheForBtnFullscreen.bezier4Rect;
            bezier4Rect.set(25.66f, 24.69f, 34.63f, 34.66f);
            Path bezier4Path = CacheForBtnFullscreen.bezier4Path;
            bezier4Path.reset();
            bezier4Path.moveTo(25.66f, 24.69f);
            bezier4Path.cubicTo(25.66f, 24.69f, 34.63f, 34.66f, 34.63f, 34.66f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2f);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(white);
            canvas.drawPath(bezier4Path, paint);
            canvas.restore();
            
            // Bezier 5
            RectF bezier5Rect = CacheForBtnFullscreen.bezier5Rect;
            bezier5Rect.set(34.56f, 25.47f, 34.56f, 34.29f);
            Path bezier5Path = CacheForBtnFullscreen.bezier5Path;
            bezier5Path.reset();
            bezier5Path.moveTo(34.56f, 25.47f);
            bezier5Path.cubicTo(34.56f, 25.47f, 34.56f, 34.29f, 34.56f, 34.29f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2f);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(white);
            canvas.drawPath(bezier5Path, paint);
            canvas.restore();
            
            // Bezier 6
            RectF bezier6Rect = CacheForBtnFullscreen.bezier6Rect;
            bezier6Rect.set(26.17f, 34.7f, 34.4f, 34.7f);
            Path bezier6Path = CacheForBtnFullscreen.bezier6Path;
            bezier6Path.reset();
            bezier6Path.moveTo(26.17f, 34.7f);
            bezier6Path.cubicTo(26.17f, 34.7f, 34.4f, 34.7f, 34.4f, 34.7f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2f);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(white);
            canvas.drawPath(bezier6Path, paint);
            canvas.restore();
        }
        
        canvas.restore();
    }
    
    private static class CacheForBtnFretboard {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF oval4Rect = new RectF();
        private static Path oval4Path = new Path();
        private static RectF ovalRect = new RectF();
        private static Path ovalPath = new Path();
        private static RectF oval2Rect = new RectF();
        private static Path oval2Path = new Path();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
        private static RectF rectangle2Rect = new RectF();
        private static Path rectangle2Path = new Path();
        private static RectF oval3Rect = new RectF();
        private static Path oval3Path = new Path();
        private static RectF rectangle3Rect = new RectF();
        private static Path rectangle3Path = new Path();
        private static RectF rectangle4Rect = new RectF();
        private static Path rectangle4Path = new Path();
    }
    
    public static void drawBtnFretboard(Canvas canvas, boolean isPressed) {
        GuitarTunesStyleKit.drawBtnFretboard(canvas, new RectF(0f, 0f, 44f, 44f), ResizingBehavior.AspectFit, isPressed);
    }
    
    public static void drawBtnFretboard(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, boolean isPressed) {
        // General Declarations
        Paint paint = CacheForBtnFretboard.paint;
        
        // Local Colors
        int fillColor11 = Color.argb(255, 23, 163, 227);
        int fillColor10 = Color.argb(255, 255, 255, 255);
        int fretIconUp = Color.argb(255, 40, 40, 40);
        int fretIconDown = Color.argb(255, 75, 75, 75);
        
        // Local Variables
        int fretIconColor = isPressed ? fretIconDown : fretIconUp;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForBtnFretboard.resizedFrame;
        GuitarTunesStyleKit.resizingBehaviorApply(resizing, CacheForBtnFretboard.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 44f);
        
        // Group
        {
            // Oval 4
            if (isPressed) {
                RectF oval4Rect = CacheForBtnFretboard.oval4Rect;
                oval4Rect.set(2.46f, 2.84f, 40.46f, 40.84f);
                Path oval4Path = CacheForBtnFretboard.oval4Path;
                oval4Path.reset();
                oval4Path.addOval(oval4Rect, Path.Direction.CW);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(fretIconColor);
                canvas.drawPath(oval4Path, paint);
            }
            
            // Oval
            RectF ovalRect = CacheForBtnFretboard.ovalRect;
            ovalRect.set(5.46f, 5.84f, 37.46f, 37.84f);
            Path ovalPath = CacheForBtnFretboard.ovalPath;
            ovalPath.reset();
            ovalPath.addOval(ovalRect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(fretIconColor);
            canvas.drawPath(ovalPath, paint);
            
            // Group 2
            {
                // Oval 2
                RectF oval2Rect = CacheForBtnFretboard.oval2Rect;
                oval2Rect.set(13.46f, 11.84f, 21.46f, 18.84f);
                Path oval2Path = CacheForBtnFretboard.oval2Path;
                oval2Path.reset();
                oval2Path.addOval(oval2Rect, Path.Direction.CW);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(fillColor11);
                canvas.drawPath(oval2Path, paint);
                
                // Rectangle
                RectF rectangleRect = CacheForBtnFretboard.rectangleRect;
                rectangleRect.set(8.46f, 15.84f, 12.46f, 16.84f);
                Path rectanglePath = CacheForBtnFretboard.rectanglePath;
                rectanglePath.reset();
                rectanglePath.moveTo(rectangleRect.left, rectangleRect.top);
                rectanglePath.lineTo(rectangleRect.right, rectangleRect.top);
                rectanglePath.lineTo(rectangleRect.right, rectangleRect.bottom);
                rectanglePath.lineTo(rectangleRect.left, rectangleRect.bottom);
                rectanglePath.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(fillColor10);
                canvas.drawPath(rectanglePath, paint);
                
                // Rectangle 2
                RectF rectangle2Rect = CacheForBtnFretboard.rectangle2Rect;
                rectangle2Rect.set(30.46f, 26.84f, 34.46f, 27.84f);
                Path rectangle2Path = CacheForBtnFretboard.rectangle2Path;
                rectangle2Path.reset();
                rectangle2Path.moveTo(rectangle2Rect.left, rectangle2Rect.top);
                rectangle2Path.lineTo(rectangle2Rect.right, rectangle2Rect.top);
                rectangle2Path.lineTo(rectangle2Rect.right, rectangle2Rect.bottom);
                rectangle2Path.lineTo(rectangle2Rect.left, rectangle2Rect.bottom);
                rectangle2Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(fillColor10);
                canvas.drawPath(rectangle2Path, paint);
                
                // Oval 3
                RectF oval3Rect = CacheForBtnFretboard.oval3Rect;
                oval3Rect.set(21.46f, 23.84f, 29.46f, 31.84f);
                Path oval3Path = CacheForBtnFretboard.oval3Path;
                oval3Path.reset();
                oval3Path.addOval(oval3Rect, Path.Direction.CW);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(fillColor11);
                canvas.drawPath(oval3Path, paint);
                
                // Rectangle 3
                RectF rectangle3Rect = CacheForBtnFretboard.rectangle3Rect;
                rectangle3Rect.set(8.46f, 26.84f, 20.46f, 27.84f);
                Path rectangle3Path = CacheForBtnFretboard.rectangle3Path;
                rectangle3Path.reset();
                rectangle3Path.moveTo(rectangle3Rect.left, rectangle3Rect.top);
                rectangle3Path.lineTo(rectangle3Rect.right, rectangle3Rect.top);
                rectangle3Path.lineTo(rectangle3Rect.right, rectangle3Rect.bottom);
                rectangle3Path.lineTo(rectangle3Rect.left, rectangle3Rect.bottom);
                rectangle3Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(fillColor10);
                canvas.drawPath(rectangle3Path, paint);
                
                // Rectangle 4
                RectF rectangle4Rect = CacheForBtnFretboard.rectangle4Rect;
                rectangle4Rect.set(22.46f, 15.84f, 34.46f, 16.84f);
                Path rectangle4Path = CacheForBtnFretboard.rectangle4Path;
                rectangle4Path.reset();
                rectangle4Path.moveTo(rectangle4Rect.left, rectangle4Rect.top);
                rectangle4Path.lineTo(rectangle4Rect.right, rectangle4Rect.top);
                rectangle4Path.lineTo(rectangle4Rect.right, rectangle4Rect.bottom);
                rectangle4Path.lineTo(rectangle4Rect.left, rectangle4Rect.bottom);
                rectangle4Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(fillColor10);
                canvas.drawPath(rectangle4Path, paint);
            }
        }
        
        canvas.restore();
    }
    
    private static class CacheForJambarLens {
        private static Paint paint = new Paint();
        private static PaintCodeGradient jambarLensGradient = null;
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
        private static RectF rectanglePathBounds = new RectF();
        private static PaintCodeLinearGradient rectanglePathGradient = new PaintCodeLinearGradient();
        private static RectF bottomRect = new RectF();
        private static Path bottomPath = new Path();
        private static RectF topRect = new RectF();
        private static Path topPath = new Path();
    }
    
    
    public static void drawJambarLens(Canvas canvas) {
        // General Declarations
        Paint paint = CacheForJambarLens.paint;
        
        // Local Colors
        int jambarLensMiddle = Color.argb(64, 195, 195, 195);
        int white = Color.argb(255, 255, 255, 255);
        int jambarLensOuter = Color.argb(0, 255, 255, 255);
        int color7 = Color.argb(51, 146, 146, 146);
        int jambarLensEdge = Color.argb(26, 255, 255, 255);
        int jambarLensInner = Color.argb(26, 195, 195, 195);
        
        // Local Gradients
        if (CacheForJambarLens.jambarLensGradient == null)
            CacheForJambarLens.jambarLensGradient = new PaintCodeGradient(new int[]{jambarLensEdge, jambarLensOuter, jambarLensOuter, jambarLensInner, jambarLensMiddle, jambarLensInner, jambarLensOuter, jambarLensOuter, jambarLensEdge}, new float[]{0f, 0.1f, 0.2f, 0.32f, 0.48f, 0.63f, 0.76f, 0.86f, 1f});
        PaintCodeGradient jambarLensGradient = CacheForJambarLens.jambarLensGradient;
        
        // Group
        {
            // Rectangle
            RectF rectangleRect = CacheForJambarLens.rectangleRect;
            rectangleRect.set(0f, 0.11f, 44f, 25.11f);
            Path rectanglePath = CacheForJambarLens.rectanglePath;
            rectanglePath.reset();
            rectanglePath.moveTo(rectangleRect.left, rectangleRect.top);
            rectanglePath.lineTo(rectangleRect.right, rectangleRect.top);
            rectanglePath.lineTo(rectangleRect.right, rectangleRect.bottom);
            rectanglePath.lineTo(rectangleRect.left, rectangleRect.bottom);
            rectanglePath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            RectF rectanglePathBounds = CacheForJambarLens.rectanglePathBounds;
            rectanglePath.computeBounds(rectanglePathBounds, true);
            paint.setStyle(Paint.Style.FILL);
            paint.setShader(CacheForJambarLens.rectanglePathGradient.get(jambarLensGradient, rectanglePathBounds.right, rectanglePathBounds.top, rectanglePathBounds.left, rectanglePathBounds.top));
            canvas.drawPath(rectanglePath, paint);
            
            // bottom
            RectF bottomRect = CacheForJambarLens.bottomRect;
            bottomRect.set(0f, 24.5f, 44f, 24.5f);
            Path bottomPath = CacheForJambarLens.bottomPath;
            bottomPath.reset();
            bottomPath.moveTo(0f, 24.5f);
            bottomPath.cubicTo(32.34f, 24.5f, 44f, 24.5f, 44f, 24.5f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(color7);
            canvas.drawPath(bottomPath, paint);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(white);
            canvas.drawPath(bottomPath, paint);
            canvas.restore();
            
            // top
            RectF topRect = CacheForJambarLens.topRect;
            topRect.set(0f, 0.5f, 44f, 0.5f);
            Path topPath = CacheForJambarLens.topPath;
            topPath.reset();
            topPath.moveTo(0f, 0.5f);
            topPath.cubicTo(32.34f, 0.5f, 44f, 0.5f, 44f, 0.5f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(color7);
            canvas.drawPath(topPath, paint);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(white);
            canvas.drawPath(topPath, paint);
            canvas.restore();
        }
    }
    
    private static class CacheForJambarLensWide {
        private static Paint paint = new Paint();
        private static PaintCodeGradient jambarLensGradientWide = null;
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
        private static RectF rectanglePathBounds = new RectF();
        private static PaintCodeLinearGradient rectanglePathGradient = new PaintCodeLinearGradient();
        private static RectF bottomRect = new RectF();
        private static Path bottomPath = new Path();
        private static RectF topRect = new RectF();
        private static Path topPath = new Path();
    }
    
    
    public static void drawJambarLensWide(Canvas canvas) {
        // General Declarations
        Paint paint = CacheForJambarLensWide.paint;
        
        // Local Colors
        int jambarLensMiddle = Color.argb(64, 195, 195, 195);
        int white = Color.argb(255, 255, 255, 255);
        int jambarLensOuter = Color.argb(0, 255, 255, 255);
        int color7 = Color.argb(51, 146, 146, 146);
        int jambarLensEdge = Color.argb(26, 255, 255, 255);
        int jambarLensInner = Color.argb(26, 195, 195, 195);
        
        // Local Gradients
        if (CacheForJambarLensWide.jambarLensGradientWide == null)
            CacheForJambarLensWide.jambarLensGradientWide = new PaintCodeGradient(new int[]{jambarLensEdge, jambarLensOuter, jambarLensOuter, jambarLensInner, jambarLensMiddle, jambarLensInner, jambarLensOuter, jambarLensOuter, jambarLensEdge}, new float[]{0f, 0.05f, 0.14f, 0.25f, 0.48f, 0.75f, 0.86f, 0.95f, 1f});
        PaintCodeGradient jambarLensGradientWide = CacheForJambarLensWide.jambarLensGradientWide;
        
        // Group
        {
            // Rectangle
            RectF rectangleRect = CacheForJambarLensWide.rectangleRect;
            rectangleRect.set(-0.23f, 0.53f, 43.77f, 25.53f);
            Path rectanglePath = CacheForJambarLensWide.rectanglePath;
            rectanglePath.reset();
            rectanglePath.moveTo(rectangleRect.left, rectangleRect.top);
            rectanglePath.lineTo(rectangleRect.right, rectangleRect.top);
            rectanglePath.lineTo(rectangleRect.right, rectangleRect.bottom);
            rectanglePath.lineTo(rectangleRect.left, rectangleRect.bottom);
            rectanglePath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            RectF rectanglePathBounds = CacheForJambarLensWide.rectanglePathBounds;
            rectanglePath.computeBounds(rectanglePathBounds, true);
            paint.setStyle(Paint.Style.FILL);
            paint.setShader(CacheForJambarLensWide.rectanglePathGradient.get(jambarLensGradientWide, rectanglePathBounds.right, rectanglePathBounds.top, rectanglePathBounds.left, rectanglePathBounds.top));
            canvas.drawPath(rectanglePath, paint);
            
            // bottom
            RectF bottomRect = CacheForJambarLensWide.bottomRect;
            bottomRect.set(-0.23f, 24.92f, 43.77f, 24.92f);
            Path bottomPath = CacheForJambarLensWide.bottomPath;
            bottomPath.reset();
            bottomPath.moveTo(-0.23f, 24.92f);
            bottomPath.cubicTo(32.11f, 24.92f, 43.77f, 24.92f, 43.77f, 24.92f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(color7);
            canvas.drawPath(bottomPath, paint);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(white);
            canvas.drawPath(bottomPath, paint);
            canvas.restore();
            
            // top
            RectF topRect = CacheForJambarLensWide.topRect;
            topRect.set(-0.23f, 0.92f, 43.77f, 0.92f);
            Path topPath = CacheForJambarLensWide.topPath;
            topPath.reset();
            topPath.moveTo(-0.23f, 0.92f);
            topPath.cubicTo(32.11f, 0.92f, 43.77f, 0.92f, 43.77f, 0.92f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(color7);
            canvas.drawPath(topPath, paint);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(white);
            canvas.drawPath(topPath, paint);
            canvas.restore();
        }
    }
    
    private static class CacheForBtnExitFullscreen {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
        private static RectF bezier4Rect = new RectF();
        private static Path bezier4Path = new Path();
        private static RectF bezier5Rect = new RectF();
        private static Path bezier5Path = new Path();
        private static RectF bezier6Rect = new RectF();
        private static Path bezier6Path = new Path();
    }
    
    public static void drawBtnExitFullscreen(Canvas canvas) {
        GuitarTunesStyleKit.drawBtnExitFullscreen(canvas, new RectF(0f, 0f, 44f, 44f), ResizingBehavior.AspectFit);
    }
    
    public static void drawBtnExitFullscreen(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForBtnExitFullscreen.paint;
        
        // Local Colors
        int white = Color.argb(255, 255, 255, 255);
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForBtnExitFullscreen.resizedFrame;
        GuitarTunesStyleKit.resizingBehaviorApply(resizing, CacheForBtnExitFullscreen.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 44f);
        
        // Group 3
        {
            // Group
            {
                // Bezier
                RectF bezierRect = CacheForBtnExitFullscreen.bezierRect;
                bezierRect.set(23.74f, 25.03f, 33.94f, 34.48f);
                Path bezierPath = CacheForBtnExitFullscreen.bezierPath;
                bezierPath.reset();
                bezierPath.moveTo(33.94f, 34.48f);
                bezierPath.cubicTo(33.94f, 34.48f, 23.74f, 25.03f, 23.74f, 25.03f);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(2f);
                paint.setStrokeCap(Paint.Cap.ROUND);
                paint.setStrokeMiter(10f);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(white);
                canvas.drawPath(bezierPath, paint);
                canvas.restore();
                
                // Bezier 2
                RectF bezier2Rect = CacheForBtnExitFullscreen.bezier2Rect;
                bezier2Rect.set(23.82f, 25.4f, 23.82f, 34.14f);
                Path bezier2Path = CacheForBtnExitFullscreen.bezier2Path;
                bezier2Path.reset();
                bezier2Path.moveTo(23.82f, 34.14f);
                bezier2Path.cubicTo(23.82f, 34.14f, 23.82f, 25.4f, 23.82f, 25.4f);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(2f);
                paint.setStrokeCap(Paint.Cap.ROUND);
                paint.setStrokeMiter(10f);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(white);
                canvas.drawPath(bezier2Path, paint);
                canvas.restore();
                
                // Bezier 3
                RectF bezier3Rect = CacheForBtnExitFullscreen.bezier3Rect;
                bezier3Rect.set(23.99f, 24.99f, 33.05f, 24.99f);
                Path bezier3Path = CacheForBtnExitFullscreen.bezier3Path;
                bezier3Path.reset();
                bezier3Path.moveTo(33.05f, 24.99f);
                bezier3Path.cubicTo(33.05f, 24.99f, 23.99f, 24.99f, 23.99f, 24.99f);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(2f);
                paint.setStrokeCap(Paint.Cap.ROUND);
                paint.setStrokeMiter(10f);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(white);
                canvas.drawPath(bezier3Path, paint);
                canvas.restore();
            }
            
            // Group 2
            {
                // Bezier 4
                RectF bezier4Rect = CacheForBtnExitFullscreen.bezier4Rect;
                bezier4Rect.set(10.24f, 10.34f, 19.47f, 19.61f);
                Path bezier4Path = CacheForBtnExitFullscreen.bezier4Path;
                bezier4Path.reset();
                bezier4Path.moveTo(10.24f, 10.34f);
                bezier4Path.cubicTo(10.24f, 10.34f, 19.47f, 19.61f, 19.47f, 19.61f);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(2f);
                paint.setStrokeCap(Paint.Cap.ROUND);
                paint.setStrokeMiter(10f);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(white);
                canvas.drawPath(bezier4Path, paint);
                canvas.restore();
                
                // Bezier 5
                RectF bezier5Rect = CacheForBtnExitFullscreen.bezier5Rect;
                bezier5Rect.set(19.4f, 10.42f, 19.4f, 19.24f);
                Path bezier5Path = CacheForBtnExitFullscreen.bezier5Path;
                bezier5Path.reset();
                bezier5Path.moveTo(19.4f, 10.42f);
                bezier5Path.cubicTo(19.4f, 10.42f, 19.4f, 19.24f, 19.4f, 19.24f);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(2f);
                paint.setStrokeCap(Paint.Cap.ROUND);
                paint.setStrokeMiter(10f);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(white);
                canvas.drawPath(bezier5Path, paint);
                canvas.restore();
                
                // Bezier 6
                RectF bezier6Rect = CacheForBtnExitFullscreen.bezier6Rect;
                bezier6Rect.set(11.01f, 19.65f, 19.24f, 19.65f);
                Path bezier6Path = CacheForBtnExitFullscreen.bezier6Path;
                bezier6Path.reset();
                bezier6Path.moveTo(11.01f, 19.65f);
                bezier6Path.cubicTo(11.01f, 19.65f, 19.24f, 19.65f, 19.24f, 19.65f);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(2f);
                paint.setStrokeCap(Paint.Cap.ROUND);
                paint.setStrokeMiter(10f);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(white);
                canvas.drawPath(bezier6Path, paint);
                canvas.restore();
            }
        }
        
        canvas.restore();
    }
    
    private static class CacheForBtnLoopRightCompact {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 30f);
        private static RectF resizedFrame = new RectF();
        private static RectF triangle1Rect = new RectF();
        private static Path triangle1Path = new Path();
    }
    
    public static void drawBtnLoopRightCompact(Canvas canvas, boolean isEnabled) {
        GuitarTunesStyleKit.drawBtnLoopRightCompact(canvas, new RectF(0f, 0f, 44f, 30f), ResizingBehavior.AspectFit, isEnabled);
    }
    
    public static void drawBtnLoopRightCompact(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, boolean isEnabled) {
        // General Declarations
        Paint paint = CacheForBtnLoopRightCompact.paint;
        
        // Local Colors
        int loopColor = Color.argb(255, 197, 7, 7);
        
        // Local Variables
        float opacity = isEnabled ? 1f : 0.5f;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForBtnLoopRightCompact.resizedFrame;
        GuitarTunesStyleKit.resizingBehaviorApply(resizing, CacheForBtnLoopRightCompact.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 30f);
        
        // Triangle-1
        canvas.saveLayerAlpha(null, (int) (opacity * 255f), Canvas.ALL_SAVE_FLAG);
        {
            RectF triangle1Rect = CacheForBtnLoopRightCompact.triangle1Rect;
            triangle1Rect.set(10f, 10f, 44f, 30f);
            Path triangle1Path = CacheForBtnLoopRightCompact.triangle1Path;
            triangle1Path.reset();
            triangle1Path.moveTo(10f, 30f);
            triangle1Path.lineTo(44f, 30f);
            triangle1Path.lineTo(44f, 10f);
            triangle1Path.lineTo(10f, 30f);
            triangle1Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            triangle1Path.setFillType(Path.FillType.EVEN_ODD);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(loopColor);
            canvas.drawPath(triangle1Path, paint);
        }
        canvas.restore();
        
        canvas.restore();
    }
    
    private static class CacheForBtnLoopLeftCompact {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 30f);
        private static RectF resizedFrame = new RectF();
        private static RectF triangle1Rect = new RectF();
        private static Path triangle1Path = new Path();
    }
    
    public static void drawBtnLoopLeftCompact(Canvas canvas, boolean isEnabled) {
        GuitarTunesStyleKit.drawBtnLoopLeftCompact(canvas, new RectF(0f, 0f, 44f, 30f), ResizingBehavior.AspectFit, isEnabled);
    }
    
    public static void drawBtnLoopLeftCompact(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, boolean isEnabled) {
        // General Declarations
        Paint paint = CacheForBtnLoopLeftCompact.paint;
        
        // Local Colors
        int loopColorGreen = Color.argb(255, 63, 160, 55);
        
        // Local Variables
        float opacity = isEnabled ? 1f : 0.5f;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForBtnLoopLeftCompact.resizedFrame;
        GuitarTunesStyleKit.resizingBehaviorApply(resizing, CacheForBtnLoopLeftCompact.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 30f);
        
        // Triangle-1
        canvas.saveLayerAlpha(null, (int) (opacity * 255f), Canvas.ALL_SAVE_FLAG);
        {
            RectF triangle1Rect = CacheForBtnLoopLeftCompact.triangle1Rect;
            triangle1Rect.set(0f, 10f, 34f, 30f);
            Path triangle1Path = CacheForBtnLoopLeftCompact.triangle1Path;
            triangle1Path.reset();
            triangle1Path.moveTo(34f, 30f);
            triangle1Path.lineTo(0f, 30f);
            triangle1Path.lineTo(0f, 10f);
            triangle1Path.lineTo(34f, 30f);
            triangle1Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            triangle1Path.setFillType(Path.FillType.EVEN_ODD);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(loopColorGreen);
            canvas.drawPath(triangle1Path, paint);
        }
        canvas.restore();
        
        canvas.restore();
    }
    
    // Library
    
    private static class CacheForBtnCloudDownload {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
        private static RectF bezier4Rect = new RectF();
        private static Path bezier4Path = new Path();
        private static RectF bezier5Rect = new RectF();
        private static Path bezier5Path = new Path();
        private static RectF bezier6Rect = new RectF();
        private static Path bezier6Path = new Path();
        private static RectF bezier7Rect = new RectF();
        private static Path bezier7Path = new Path();
        private static RectF bezier8Rect = new RectF();
        private static Path bezier8Path = new Path();
        private static RectF bezier9Rect = new RectF();
        private static Path bezier9Path = new Path();
        private static RectF bezier10Rect = new RectF();
        private static Path bezier10Path = new Path();
        private static RectF bezier11Rect = new RectF();
        private static Path bezier11Path = new Path();
    }
    
    public static void drawBtnCloudDownload(Canvas canvas) {
        GuitarTunesStyleKit.drawBtnCloudDownload(canvas, new RectF(0f, 0f, 44f, 44f), ResizingBehavior.AspectFit);
    }
    
    public static void drawBtnCloudDownload(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForBtnCloudDownload.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForBtnCloudDownload.resizedFrame;
        GuitarTunesStyleKit.resizingBehaviorApply(resizing, CacheForBtnCloudDownload.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 44f);
        
        // cloud
        {
            // Bezier 2
            RectF bezier2Rect = CacheForBtnCloudDownload.bezier2Rect;
            bezier2Rect.set(10.56f, 21.37f, 19.6f, 27.39f);
            Path bezier2Path = CacheForBtnCloudDownload.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(19.6f, 27.02f);
            bezier2Path.cubicTo(19.6f, 26.81f, 19.43f, 26.64f, 19.23f, 26.64f);
            bezier2Path.lineTo(13.58f, 26.64f);
            bezier2Path.cubicTo(12.33f, 26.64f, 11.31f, 25.63f, 11.31f, 24.38f);
            bezier2Path.cubicTo(11.31f, 23.14f, 12.33f, 22.12f, 13.58f, 22.12f);
            bezier2Path.cubicTo(13.78f, 22.12f, 13.95f, 21.95f, 13.95f, 21.75f);
            bezier2Path.cubicTo(13.95f, 21.54f, 13.78f, 21.37f, 13.58f, 21.37f);
            bezier2Path.cubicTo(11.91f, 21.37f, 10.56f, 22.72f, 10.56f, 24.38f);
            bezier2Path.cubicTo(10.56f, 26.04f, 11.91f, 27.39f, 13.58f, 27.39f);
            bezier2Path.lineTo(19.23f, 27.39f);
            bezier2Path.cubicTo(19.43f, 27.39f, 19.6f, 27.23f, 19.6f, 27.02f);
            bezier2Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(GuitarTunesStyleKit.goldDark);
            canvas.drawPath(bezier2Path, paint);
            
            // Bezier 3
            RectF bezier3Rect = CacheForBtnCloudDownload.bezier3Rect;
            bezier3Rect.set(10.56f, 21.37f, 19.6f, 27.39f);
            Path bezier3Path = CacheForBtnCloudDownload.bezier3Path;
            bezier3Path.reset();
            bezier3Path.moveTo(19.6f, 27.02f);
            bezier3Path.cubicTo(19.6f, 26.81f, 19.43f, 26.64f, 19.23f, 26.64f);
            bezier3Path.lineTo(13.58f, 26.64f);
            bezier3Path.cubicTo(12.33f, 26.64f, 11.31f, 25.63f, 11.31f, 24.38f);
            bezier3Path.cubicTo(11.31f, 23.14f, 12.33f, 22.12f, 13.58f, 22.12f);
            bezier3Path.cubicTo(13.78f, 22.12f, 13.95f, 21.95f, 13.95f, 21.75f);
            bezier3Path.cubicTo(13.95f, 21.54f, 13.78f, 21.37f, 13.58f, 21.37f);
            bezier3Path.cubicTo(11.91f, 21.37f, 10.56f, 22.72f, 10.56f, 24.38f);
            bezier3Path.cubicTo(10.56f, 26.04f, 11.91f, 27.39f, 13.58f, 27.39f);
            bezier3Path.lineTo(19.23f, 27.39f);
            bezier3Path.cubicTo(19.43f, 27.39f, 19.6f, 27.23f, 19.6f, 27.02f);
            bezier3Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(0.5f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(GuitarTunesStyleKit.goldDark);
            canvas.drawPath(bezier3Path, paint);
            canvas.restore();
            
            // Bezier 4
            RectF bezier4Rect = CacheForBtnCloudDownload.bezier4Rect;
            bezier4Rect.set(19.05f, 12.33f, 30.15f, 20.24f);
            Path bezier4Path = CacheForBtnCloudDownload.bezier4Path;
            bezier4Path.reset();
            bezier4Path.moveTo(19.22f, 15.52f);
            bezier4Path.cubicTo(19.39f, 15.64f, 19.62f, 15.59f, 19.74f, 15.42f);
            bezier4Path.cubicTo(20.72f, 13.96f, 22.36f, 13.08f, 24.12f, 13.08f);
            bezier4Path.cubicTo(27.03f, 13.08f, 29.4f, 15.45f, 29.4f, 18.36f);
            bezier4Path.cubicTo(29.4f, 18.83f, 29.33f, 19.31f, 29.21f, 19.76f);
            bezier4Path.cubicTo(29.15f, 19.96f, 29.27f, 20.17f, 29.47f, 20.23f);
            bezier4Path.cubicTo(29.5f, 20.23f, 29.54f, 20.24f, 29.57f, 20.24f);
            bezier4Path.cubicTo(29.74f, 20.24f, 29.89f, 20.13f, 29.93f, 19.96f);
            bezier4Path.cubicTo(30.08f, 19.44f, 30.15f, 18.9f, 30.15f, 18.36f);
            bezier4Path.cubicTo(30.15f, 15.03f, 27.45f, 12.33f, 24.12f, 12.33f);
            bezier4Path.cubicTo(22.11f, 12.33f, 20.24f, 13.33f, 19.12f, 15f);
            bezier4Path.cubicTo(19f, 15.17f, 19.05f, 15.41f, 19.22f, 15.52f);
            bezier4Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(GuitarTunesStyleKit.goldDark);
            canvas.drawPath(bezier4Path, paint);
            
            // Bezier 5
            RectF bezier5Rect = CacheForBtnCloudDownload.bezier5Rect;
            bezier5Rect.set(19.05f, 12.33f, 30.15f, 20.24f);
            Path bezier5Path = CacheForBtnCloudDownload.bezier5Path;
            bezier5Path.reset();
            bezier5Path.moveTo(19.22f, 15.52f);
            bezier5Path.cubicTo(19.39f, 15.64f, 19.62f, 15.59f, 19.74f, 15.42f);
            bezier5Path.cubicTo(20.72f, 13.96f, 22.36f, 13.08f, 24.12f, 13.08f);
            bezier5Path.cubicTo(27.03f, 13.08f, 29.4f, 15.45f, 29.4f, 18.36f);
            bezier5Path.cubicTo(29.4f, 18.83f, 29.33f, 19.31f, 29.21f, 19.76f);
            bezier5Path.cubicTo(29.15f, 19.96f, 29.27f, 20.17f, 29.47f, 20.23f);
            bezier5Path.cubicTo(29.5f, 20.23f, 29.54f, 20.24f, 29.57f, 20.24f);
            bezier5Path.cubicTo(29.74f, 20.24f, 29.89f, 20.13f, 29.93f, 19.96f);
            bezier5Path.cubicTo(30.08f, 19.44f, 30.15f, 18.9f, 30.15f, 18.36f);
            bezier5Path.cubicTo(30.15f, 15.03f, 27.45f, 12.33f, 24.12f, 12.33f);
            bezier5Path.cubicTo(22.11f, 12.33f, 20.24f, 13.33f, 19.12f, 15f);
            bezier5Path.cubicTo(19f, 15.17f, 19.05f, 15.41f, 19.22f, 15.52f);
            bezier5Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(0.5f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(GuitarTunesStyleKit.goldDark);
            canvas.drawPath(bezier5Path, paint);
            canvas.restore();
            
            // Bezier 6
            RectF bezier6Rect = CacheForBtnCloudDownload.bezier6Rect;
            bezier6Rect.set(12.07f, 15.34f, 19.96f, 21f);
            Path bezier6Path = CacheForBtnCloudDownload.bezier6Path;
            bezier6Path.reset();
            bezier6Path.moveTo(12.51f, 21f);
            bezier6Path.cubicTo(12.54f, 21f, 12.56f, 20.99f, 12.58f, 20.99f);
            bezier6Path.cubicTo(12.79f, 20.95f, 12.92f, 20.75f, 12.88f, 20.55f);
            bezier6Path.cubicTo(12.84f, 20.33f, 12.82f, 20.09f, 12.82f, 19.86f);
            bezier6Path.cubicTo(12.82f, 17.79f, 14.51f, 16.1f, 16.59f, 16.1f);
            bezier6Path.cubicTo(17.63f, 16.1f, 18.6f, 16.51f, 19.32f, 17.26f);
            bezier6Path.cubicTo(19.46f, 17.41f, 19.7f, 17.42f, 19.85f, 17.28f);
            bezier6Path.cubicTo(20f, 17.13f, 20f, 16.9f, 19.86f, 16.74f);
            bezier6Path.cubicTo(19f, 15.84f, 17.84f, 15.34f, 16.59f, 15.34f);
            bezier6Path.cubicTo(14.1f, 15.34f, 12.07f, 17.37f, 12.07f, 19.86f);
            bezier6Path.cubicTo(12.07f, 20.14f, 12.09f, 20.42f, 12.14f, 20.69f);
            bezier6Path.cubicTo(12.18f, 20.87f, 12.34f, 21f, 12.51f, 21f);
            bezier6Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(GuitarTunesStyleKit.goldDark);
            canvas.drawPath(bezier6Path, paint);
            
            // Bezier 7
            RectF bezier7Rect = CacheForBtnCloudDownload.bezier7Rect;
            bezier7Rect.set(12.07f, 15.34f, 19.96f, 21f);
            Path bezier7Path = CacheForBtnCloudDownload.bezier7Path;
            bezier7Path.reset();
            bezier7Path.moveTo(12.51f, 21f);
            bezier7Path.cubicTo(12.54f, 21f, 12.56f, 20.99f, 12.58f, 20.99f);
            bezier7Path.cubicTo(12.79f, 20.95f, 12.92f, 20.75f, 12.88f, 20.55f);
            bezier7Path.cubicTo(12.84f, 20.33f, 12.82f, 20.09f, 12.82f, 19.86f);
            bezier7Path.cubicTo(12.82f, 17.79f, 14.51f, 16.1f, 16.59f, 16.1f);
            bezier7Path.cubicTo(17.63f, 16.1f, 18.6f, 16.51f, 19.32f, 17.26f);
            bezier7Path.cubicTo(19.46f, 17.41f, 19.7f, 17.42f, 19.85f, 17.28f);
            bezier7Path.cubicTo(20f, 17.13f, 20f, 16.9f, 19.86f, 16.74f);
            bezier7Path.cubicTo(19f, 15.84f, 17.84f, 15.34f, 16.59f, 15.34f);
            bezier7Path.cubicTo(14.1f, 15.34f, 12.07f, 17.37f, 12.07f, 19.86f);
            bezier7Path.cubicTo(12.07f, 20.14f, 12.09f, 20.42f, 12.14f, 20.69f);
            bezier7Path.cubicTo(12.18f, 20.87f, 12.34f, 21f, 12.51f, 21f);
            bezier7Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(0.5f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(GuitarTunesStyleKit.goldDark);
            canvas.drawPath(bezier7Path, paint);
            canvas.restore();
            
            // Bezier 8
            RectF bezier8Rect = CacheForBtnCloudDownload.bezier8Rect;
            bezier8Rect.set(23.37f, 19.11f, 33.16f, 27.39f);
            Path bezier8Path = CacheForBtnCloudDownload.bezier8Path;
            bezier8Path.reset();
            bezier8Path.moveTo(31.25f, 19.18f);
            bezier8Path.cubicTo(31.08f, 19.06f, 30.84f, 19.1f, 30.72f, 19.27f);
            bezier8Path.cubicTo(30.6f, 19.44f, 30.64f, 19.68f, 30.81f, 19.8f);
            bezier8Path.cubicTo(31.81f, 20.5f, 32.41f, 21.65f, 32.41f, 22.88f);
            bezier8Path.cubicTo(32.41f, 24.95f, 30.72f, 26.64f, 28.64f, 26.64f);
            bezier8Path.lineTo(23.75f, 26.64f);
            bezier8Path.cubicTo(23.54f, 26.64f, 23.37f, 26.81f, 23.37f, 27.02f);
            bezier8Path.cubicTo(23.37f, 27.23f, 23.54f, 27.39f, 23.75f, 27.39f);
            bezier8Path.lineTo(28.64f, 27.39f);
            bezier8Path.cubicTo(31.14f, 27.39f, 33.16f, 25.37f, 33.16f, 22.88f);
            bezier8Path.cubicTo(33.16f, 21.41f, 32.45f, 20.03f, 31.25f, 19.18f);
            bezier8Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(GuitarTunesStyleKit.goldDark);
            canvas.drawPath(bezier8Path, paint);
            
            // Bezier 9
            RectF bezier9Rect = CacheForBtnCloudDownload.bezier9Rect;
            bezier9Rect.set(23.37f, 19.11f, 33.16f, 27.39f);
            Path bezier9Path = CacheForBtnCloudDownload.bezier9Path;
            bezier9Path.reset();
            bezier9Path.moveTo(31.25f, 19.18f);
            bezier9Path.cubicTo(31.08f, 19.06f, 30.84f, 19.1f, 30.72f, 19.27f);
            bezier9Path.cubicTo(30.6f, 19.44f, 30.64f, 19.68f, 30.81f, 19.8f);
            bezier9Path.cubicTo(31.81f, 20.5f, 32.41f, 21.65f, 32.41f, 22.88f);
            bezier9Path.cubicTo(32.41f, 24.95f, 30.72f, 26.64f, 28.64f, 26.64f);
            bezier9Path.lineTo(23.75f, 26.64f);
            bezier9Path.cubicTo(23.54f, 26.64f, 23.37f, 26.81f, 23.37f, 27.02f);
            bezier9Path.cubicTo(23.37f, 27.23f, 23.54f, 27.39f, 23.75f, 27.39f);
            bezier9Path.lineTo(28.64f, 27.39f);
            bezier9Path.cubicTo(31.14f, 27.39f, 33.16f, 25.37f, 33.16f, 22.88f);
            bezier9Path.cubicTo(33.16f, 21.41f, 32.45f, 20.03f, 31.25f, 19.18f);
            bezier9Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(0.5f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(GuitarTunesStyleKit.goldDark);
            canvas.drawPath(bezier9Path, paint);
            canvas.restore();
            
            // Bezier 10
            RectF bezier10Rect = CacheForBtnCloudDownload.bezier10Rect;
            bezier10Rect.set(17.34f, 20.62f, 25.63f, 34.93f);
            Path bezier10Path = CacheForBtnCloudDownload.bezier10Path;
            bezier10Path.reset();
            bezier10Path.moveTo(24.99f, 30.52f);
            bezier10Path.lineTo(21.86f, 33.64f);
            bezier10Path.lineTo(21.86f, 20.99f);
            bezier10Path.cubicTo(21.86f, 20.78f, 21.69f, 20.62f, 21.49f, 20.62f);
            bezier10Path.cubicTo(21.28f, 20.62f, 21.11f, 20.78f, 21.11f, 20.99f);
            bezier10Path.lineTo(21.11f, 33.64f);
            bezier10Path.lineTo(17.98f, 30.52f);
            bezier10Path.cubicTo(17.84f, 30.37f, 17.6f, 30.37f, 17.45f, 30.52f);
            bezier10Path.cubicTo(17.31f, 30.67f, 17.31f, 30.9f, 17.45f, 31.05f);
            bezier10Path.lineTo(21.22f, 34.82f);
            bezier10Path.cubicTo(21.25f, 34.85f, 21.3f, 34.88f, 21.34f, 34.9f);
            bezier10Path.cubicTo(21.39f, 34.92f, 21.44f, 34.93f, 21.49f, 34.93f);
            bezier10Path.cubicTo(21.53f, 34.93f, 21.58f, 34.92f, 21.63f, 34.9f);
            bezier10Path.cubicTo(21.68f, 34.88f, 21.72f, 34.85f, 21.75f, 34.82f);
            bezier10Path.lineTo(25.52f, 31.05f);
            bezier10Path.cubicTo(25.67f, 30.9f, 25.67f, 30.67f, 25.52f, 30.52f);
            bezier10Path.cubicTo(25.37f, 30.37f, 25.13f, 30.37f, 24.99f, 30.52f);
            bezier10Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(GuitarTunesStyleKit.goldDark);
            canvas.drawPath(bezier10Path, paint);
            
            // Bezier 11
            RectF bezier11Rect = CacheForBtnCloudDownload.bezier11Rect;
            bezier11Rect.set(17.34f, 20.62f, 25.63f, 34.93f);
            Path bezier11Path = CacheForBtnCloudDownload.bezier11Path;
            bezier11Path.reset();
            bezier11Path.moveTo(24.99f, 30.52f);
            bezier11Path.lineTo(21.86f, 33.64f);
            bezier11Path.lineTo(21.86f, 20.99f);
            bezier11Path.cubicTo(21.86f, 20.78f, 21.69f, 20.62f, 21.49f, 20.62f);
            bezier11Path.cubicTo(21.28f, 20.62f, 21.11f, 20.78f, 21.11f, 20.99f);
            bezier11Path.lineTo(21.11f, 33.64f);
            bezier11Path.lineTo(17.98f, 30.52f);
            bezier11Path.cubicTo(17.84f, 30.37f, 17.6f, 30.37f, 17.45f, 30.52f);
            bezier11Path.cubicTo(17.31f, 30.67f, 17.31f, 30.9f, 17.45f, 31.05f);
            bezier11Path.lineTo(21.22f, 34.82f);
            bezier11Path.cubicTo(21.25f, 34.85f, 21.3f, 34.88f, 21.34f, 34.9f);
            bezier11Path.cubicTo(21.39f, 34.92f, 21.44f, 34.93f, 21.49f, 34.93f);
            bezier11Path.cubicTo(21.53f, 34.93f, 21.58f, 34.92f, 21.63f, 34.9f);
            bezier11Path.cubicTo(21.68f, 34.88f, 21.72f, 34.85f, 21.75f, 34.82f);
            bezier11Path.lineTo(25.52f, 31.05f);
            bezier11Path.cubicTo(25.67f, 30.9f, 25.67f, 30.67f, 25.52f, 30.52f);
            bezier11Path.cubicTo(25.37f, 30.37f, 25.13f, 30.37f, 24.99f, 30.52f);
            bezier11Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(0.5f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(GuitarTunesStyleKit.goldDark);
            canvas.drawPath(bezier11Path, paint);
            canvas.restore();
        }
        
        canvas.restore();
    }
    
    private static class CacheForIndeterminateCircle {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF oval2Rect = new RectF();
        private static Path oval2Path = new Path();
    }
    
    public static void drawIndeterminateCircle(Canvas canvas, float angle) {
        GuitarTunesStyleKit.drawIndeterminateCircle(canvas, new RectF(0f, 0f, 44f, 44f), ResizingBehavior.AspectFit, angle);
    }
    
    public static void drawIndeterminateCircle(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, float angle) {
        // General Declarations
        Stack<Matrix> currentTransformation = new Stack<Matrix>();
        currentTransformation.push(new Matrix());
        Paint paint = CacheForIndeterminateCircle.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForIndeterminateCircle.resizedFrame;
        GuitarTunesStyleKit.resizingBehaviorApply(resizing, CacheForIndeterminateCircle.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 44f);
        
        // Group
        {
            canvas.save();
            canvas.translate(21.26f, 20f);
            currentTransformation.peek().postTranslate(21.26f, 20f);
            canvas.rotate(-angle);
            currentTransformation.peek().postRotate(-angle);
            
            // Oval 2
            RectF oval2Rect = CacheForIndeterminateCircle.oval2Rect;
            oval2Rect.set(-10.5f, -10.5f, 10.5f, 10.5f);
            Path oval2Path = CacheForIndeterminateCircle.oval2Path;
            oval2Path.reset();
            oval2Path.addArc(oval2Rect, 0f, (360f * (float) Math.ceil(45f / 360f)) - 45f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(GuitarTunesStyleKit.mediaTitle);
            canvas.drawPath(oval2Path, paint);
            canvas.restore();
            
            canvas.restore();
        }
        
        canvas.restore();
    }
    
    private static class CacheForCircularProgress {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF ovalRect = new RectF();
        private static Path ovalPath = new Path();
        private static RectF oval2Rect = new RectF();
        private static Path oval2Path = new Path();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
    }
    
    public static void drawCircularProgress(Canvas canvas, float angle) {
        GuitarTunesStyleKit.drawCircularProgress(canvas, new RectF(0f, 0f, 44f, 44f), ResizingBehavior.AspectFit, angle);
    }
    
    public static void drawCircularProgress(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, float angle) {
        // General Declarations
        Stack<Matrix> currentTransformation = new Stack<Matrix>();
        currentTransformation.push(new Matrix());
        Paint paint = CacheForCircularProgress.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForCircularProgress.resizedFrame;
        GuitarTunesStyleKit.resizingBehaviorApply(resizing, CacheForCircularProgress.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 44f);
        
        // Group
        {
            // Oval
            canvas.save();
            canvas.translate(11f, 9.5f);
            currentTransformation.peek().postTranslate(11f, 9.5f);
            RectF ovalRect = CacheForCircularProgress.ovalRect;
            ovalRect.set(1f, 1f, 20f, 20f);
            Path ovalPath = CacheForCircularProgress.ovalPath;
            ovalPath.reset();
            ovalPath.addArc(ovalRect, -90f, 90f - angle + (-angle < -90f ? 360f * (float) Math.ceil((angle - 90f) / 360f) : 0f));
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(GuitarTunesStyleKit.goldDark);
            canvas.drawPath(ovalPath, paint);
            canvas.restore();
            canvas.restore();
            
            // Oval 2
            RectF oval2Rect = CacheForCircularProgress.oval2Rect;
            oval2Rect.set(10.88f, 9.5f, 31.88f, 30.5f);
            Path oval2Path = CacheForCircularProgress.oval2Path;
            oval2Path.reset();
            oval2Path.addOval(oval2Rect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(GuitarTunesStyleKit.goldDark);
            canvas.drawPath(oval2Path, paint);
            canvas.restore();
            
            // Rectangle
            RectF rectangleRect = CacheForCircularProgress.rectangleRect;
            rectangleRect.set(17.71f, 15.91f, 25.71f, 23.91f);
            Path rectanglePath = CacheForCircularProgress.rectanglePath;
            rectanglePath.reset();
            rectanglePath.moveTo(rectangleRect.left, rectangleRect.top);
            rectanglePath.lineTo(rectangleRect.right, rectangleRect.top);
            rectanglePath.lineTo(rectangleRect.right, rectangleRect.bottom);
            rectanglePath.lineTo(rectangleRect.left, rectangleRect.bottom);
            rectanglePath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(GuitarTunesStyleKit.goldDark);
            canvas.drawPath(rectanglePath, paint);
        }
        
        canvas.restore();
    }
    
    private static class CacheForBuyButton {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 78f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
        private static TextPaint rectangleTextPaint = new TextPaint();
        private static PaintCodeStaticLayout rectangleStaticLayout = new PaintCodeStaticLayout();
        private static RectF topRect = new RectF();
        private static TextPaint topTextPaint = new TextPaint();
        private static PaintCodeStaticLayout topStaticLayout = new PaintCodeStaticLayout();
        private static RectF bottomRect = new RectF();
        private static TextPaint bottomTextPaint = new TextPaint();
        private static PaintCodeStaticLayout bottomStaticLayout = new PaintCodeStaticLayout();
    }
    
    public static void drawBuyButton(Canvas canvas, Context context, String priceText, float fontSize, String topText, String bottomText) {
        GuitarTunesStyleKit.drawBuyButton(canvas, context, new RectF(0f, 0f, 78f, 44f), ResizingBehavior.AspectFit, priceText, fontSize, topText, bottomText);
    }
    
    public static void drawBuyButton(Canvas canvas, Context context, RectF targetFrame, ResizingBehavior resizing, String priceText, float fontSize, String topText, String bottomText) {
        // General Declarations
        Paint paint = CacheForBuyButton.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForBuyButton.resizedFrame;
        GuitarTunesStyleKit.resizingBehaviorApply(resizing, CacheForBuyButton.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 78f, resizedFrame.height() / 44f);
        
        // Rectangle
        RectF rectangleRect = CacheForBuyButton.rectangleRect;
        rectangleRect.set(1f, 9.88f, 77f, 35.88f);
        Path rectanglePath = CacheForBuyButton.rectanglePath;
        rectanglePath.reset();
        rectanglePath.addRoundRect(rectangleRect, 4f, 4f, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(1f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(GuitarTunesStyleKit.mediaTitle);
        canvas.drawPath(rectanglePath, paint);
        canvas.restore();
        TextPaint rectangleTextPaint = CacheForBuyButton.rectangleTextPaint;
        rectangleTextPaint.reset();
        rectangleTextPaint.setFlags(Paint.ANTI_ALIAS_FLAG);
        rectangleTextPaint.setColor(GuitarTunesStyleKit.mediaTitle);
        rectangleTextPaint.setTypeface(Typeface.create((String) null, Typeface.NORMAL));
        rectangleTextPaint.setTextSize(fontSize);
        StaticLayout rectangleStaticLayout = CacheForBuyButton.rectangleStaticLayout.get((int) rectangleRect.width(), Layout.Alignment.ALIGN_CENTER, priceText, rectangleTextPaint);
        canvas.save();
        canvas.clipRect(rectangleRect);
        canvas.translate(rectangleRect.left, rectangleRect.top + (rectangleRect.height() - rectangleStaticLayout.getHeight()) / 2f);
        rectangleStaticLayout.draw(canvas);
        canvas.restore();
        
        // Top
        RectF topRect = CacheForBuyButton.topRect;
        topRect.set(1f, 11.77f, 77f, 23.77f);
        TextPaint topTextPaint = CacheForBuyButton.topTextPaint;
        topTextPaint.reset();
        topTextPaint.setFlags(Paint.ANTI_ALIAS_FLAG);
        topTextPaint.setColor(GuitarTunesStyleKit.mediaTitle);
        topTextPaint.setTypeface(Typeface.create((String) null, Typeface.NORMAL));
        topTextPaint.setTextSize(10f);
        StaticLayout topStaticLayout = CacheForBuyButton.topStaticLayout.get((int) topRect.width(), Layout.Alignment.ALIGN_CENTER, topText, topTextPaint);
        canvas.save();
        canvas.clipRect(topRect);
        canvas.translate(topRect.left, topRect.top + (topRect.height() - topStaticLayout.getHeight()) / 2f);
        topStaticLayout.draw(canvas);
        canvas.restore();
        
        // Bottom
        RectF bottomRect = CacheForBuyButton.bottomRect;
        bottomRect.set(1f, 22f, 77f, 34f);
        TextPaint bottomTextPaint = CacheForBuyButton.bottomTextPaint;
        bottomTextPaint.reset();
        bottomTextPaint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bottomTextPaint.setColor(GuitarTunesStyleKit.mediaTitle);
        bottomTextPaint.setTypeface(Typeface.create((String) null, Typeface.NORMAL));
        bottomTextPaint.setTextSize(10f);
        StaticLayout bottomStaticLayout = CacheForBuyButton.bottomStaticLayout.get((int) bottomRect.width(), Layout.Alignment.ALIGN_CENTER, bottomText, bottomTextPaint);
        canvas.save();
        canvas.clipRect(bottomRect);
        canvas.translate(bottomRect.left, bottomRect.top + (bottomRect.height() - bottomStaticLayout.getHeight()) / 2f);
        bottomStaticLayout.draw(canvas);
        canvas.restore();
        
        canvas.restore();
    }
    
    private static class CacheForBtnTrashCan {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
        private static RectF bezier4Rect = new RectF();
        private static Path bezier4Path = new Path();
    }
    
    public static void drawBtnTrashCan(Canvas canvas) {
        GuitarTunesStyleKit.drawBtnTrashCan(canvas, new RectF(0f, 0f, 44f, 44f), ResizingBehavior.AspectFit);
    }
    
    public static void drawBtnTrashCan(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForBtnTrashCan.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForBtnTrashCan.resizedFrame;
        GuitarTunesStyleKit.resizingBehaviorApply(resizing, CacheForBtnTrashCan.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 44f);
        
        // Group 2
        {
            // Bezier
            RectF bezierRect = CacheForBtnTrashCan.bezierRect;
            bezierRect.set(10.5f, 9.5f, 32.5f, 22.72f);
            Path bezierPath = CacheForBtnTrashCan.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(28.2f, 22.72f);
            bezierPath.cubicTo(28.2f, 22.72f, 32.5f, 22.26f, 32.5f, 18.04f);
            bezierPath.cubicTo(32.5f, 15.36f, 30.29f, 13.21f, 27.55f, 13.31f);
            bezierPath.cubicTo(26.47f, 11.05f, 24.17f, 9.5f, 21.5f, 9.5f);
            bezierPath.cubicTo(17.94f, 9.5f, 15.03f, 12.3f, 14.82f, 15.81f);
            bezierPath.cubicTo(12.59f, 15.34f, 10.5f, 16.95f, 10.5f, 19.22f);
            bezierPath.cubicTo(10.5f, 21.64f, 12.18f, 22.39f, 13.31f, 22.62f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(GuitarTunesStyleKit.mediaTitle);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
            
            // Rectangle
            RectF rectangleRect = CacheForBtnTrashCan.rectangleRect;
            rectangleRect.set(18.5f, 21.22f, 24.5f, 31.22f);
            Path rectanglePath = CacheForBtnTrashCan.rectanglePath;
            rectanglePath.reset();
            rectanglePath.addRoundRect(rectangleRect, 1f, 1f, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(GuitarTunesStyleKit.mediaTitle);
            canvas.drawPath(rectanglePath, paint);
            canvas.restore();
            
            // Bezier 2
            RectF bezier2Rect = CacheForBtnTrashCan.bezier2Rect;
            bezier2Rect.set(18.5f, 29.22f, 24.5f, 29.22f);
            Path bezier2Path = CacheForBtnTrashCan.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(18.5f, 29.22f);
            bezier2Path.lineTo(24.5f, 29.22f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(GuitarTunesStyleKit.mediaTitle);
            canvas.drawPath(bezier2Path, paint);
            canvas.restore();
            
            // Bezier 3
            RectF bezier3Rect = CacheForBtnTrashCan.bezier3Rect;
            bezier3Rect.set(21.5f, 13.72f, 21.5f, 18.72f);
            Path bezier3Path = CacheForBtnTrashCan.bezier3Path;
            bezier3Path.reset();
            bezier3Path.moveTo(21.5f, 13.72f);
            bezier3Path.lineTo(21.5f, 18.72f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(GuitarTunesStyleKit.mediaTitle);
            canvas.drawPath(bezier3Path, paint);
            canvas.restore();
            
            // Bezier 4
            RectF bezier4Rect = CacheForBtnTrashCan.bezier4Rect;
            bezier4Rect.set(19.5f, 13.72f, 23.5f, 15.72f);
            Path bezier4Path = CacheForBtnTrashCan.bezier4Path;
            bezier4Path.reset();
            bezier4Path.moveTo(23.5f, 15.72f);
            bezier4Path.lineTo(21.5f, 13.72f);
            bezier4Path.lineTo(19.5f, 15.72f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(GuitarTunesStyleKit.mediaTitle);
            canvas.drawPath(bezier4Path, paint);
            canvas.restore();
        }
        
        canvas.restore();
    }
    
    private static class CacheForPreviewProgress {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF ovalRect = new RectF();
        private static Path ovalPath = new Path();
        private static RectF oval2Rect = new RectF();
        private static Path oval2Path = new Path();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
    }
    
    public static void drawPreviewProgress(Canvas canvas, float angle) {
        GuitarTunesStyleKit.drawPreviewProgress(canvas, new RectF(0f, 0f, 44f, 44f), ResizingBehavior.AspectFit, angle);
    }
    
    public static void drawPreviewProgress(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, float angle) {
        // General Declarations
        Stack<Matrix> currentTransformation = new Stack<Matrix>();
        currentTransformation.push(new Matrix());
        Paint paint = CacheForPreviewProgress.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForPreviewProgress.resizedFrame;
        GuitarTunesStyleKit.resizingBehaviorApply(resizing, CacheForPreviewProgress.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 44f);
        
        // Group
        {
            // Oval
            canvas.save();
            canvas.translate(11f, 9.5f);
            currentTransformation.peek().postTranslate(11f, 9.5f);
            RectF ovalRect = CacheForPreviewProgress.ovalRect;
            ovalRect.set(1f, 1f, 20f, 20f);
            Path ovalPath = CacheForPreviewProgress.ovalPath;
            ovalPath.reset();
            ovalPath.addArc(ovalRect, -90f, 90f - angle + (-angle < -90f ? 360f * (float) Math.ceil((angle - 90f) / 360f) : 0f));
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(GuitarTunesStyleKit.mediaTitle);
            canvas.drawPath(ovalPath, paint);
            canvas.restore();
            canvas.restore();
            
            // Oval 2
            RectF oval2Rect = CacheForPreviewProgress.oval2Rect;
            oval2Rect.set(10.88f, 9.5f, 31.88f, 30.5f);
            Path oval2Path = CacheForPreviewProgress.oval2Path;
            oval2Path.reset();
            oval2Path.addOval(oval2Rect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(GuitarTunesStyleKit.mediaTitle);
            canvas.drawPath(oval2Path, paint);
            canvas.restore();
            
            // Rectangle
            RectF rectangleRect = CacheForPreviewProgress.rectangleRect;
            rectangleRect.set(17.71f, 15.91f, 25.71f, 23.91f);
            Path rectanglePath = CacheForPreviewProgress.rectanglePath;
            rectanglePath.reset();
            rectanglePath.moveTo(rectangleRect.left, rectangleRect.top);
            rectanglePath.lineTo(rectangleRect.right, rectangleRect.top);
            rectanglePath.lineTo(rectangleRect.right, rectangleRect.bottom);
            rectanglePath.lineTo(rectangleRect.left, rectangleRect.bottom);
            rectanglePath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(GuitarTunesStyleKit.mediaTitle);
            canvas.drawPath(rectanglePath, paint);
        }
        
        canvas.restore();
    }
    
    private static class CacheForPreviewPlay {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF ovalRect = new RectF();
        private static Path ovalPath = new Path();
        private static RectF playRect = new RectF();
        private static Path playPath = new Path();
    }
    
    public static void drawPreviewPlay(Canvas canvas, boolean isShowingPause) {
        GuitarTunesStyleKit.drawPreviewPlay(canvas, new RectF(0f, 0f, 44f, 44f), ResizingBehavior.AspectFit, isShowingPause);
    }
    
    public static void drawPreviewPlay(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, boolean isShowingPause) {
        // General Declarations
        Paint paint = CacheForPreviewPlay.paint;
        
        // Local Colors
        int white = Color.argb(255, 255, 255, 255);
        
        // Local Variables
        boolean isPlaying = !isShowingPause;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForPreviewPlay.resizedFrame;
        GuitarTunesStyleKit.resizingBehaviorApply(resizing, CacheForPreviewPlay.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 44f);
        
        // Oval
        RectF ovalRect = CacheForPreviewPlay.ovalRect;
        ovalRect.set(9.9f, 8.64f, 34.9f, 33.64f);
        Path ovalPath = CacheForPreviewPlay.ovalPath;
        ovalPath.reset();
        ovalPath.addOval(ovalRect, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(GuitarTunesStyleKit.mediaTitleSemi);
        canvas.drawPath(ovalPath, paint);
        
        // Play
        if (isPlaying) {
            RectF playRect = CacheForPreviewPlay.playRect;
            playRect.set(18.84f, 15.28f, 28.9f, 26.37f);
            Path playPath = CacheForPreviewPlay.playPath;
            playPath.reset();
            playPath.moveTo(18.84f, 26.37f);
            playPath.lineTo(18.84f, 15.28f);
            playPath.lineTo(28.9f, 20.82f);
            playPath.lineTo(18.84f, 26.37f);
            playPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            playPath.setFillType(Path.FillType.EVEN_ODD);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(white);
            canvas.drawPath(playPath, paint);
        }
        
        canvas.restore();
    }
    
    private static class CacheForBtnDetails {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF ovalRect = new RectF();
        private static Path ovalPath = new Path();
        private static RectF textRect = new RectF();
        private static TextPaint textTextPaint = new TextPaint();
        private static PaintCodeStaticLayout textStaticLayout = new PaintCodeStaticLayout();
    }
    
    public static void drawBtnDetails(Canvas canvas, Context context, boolean isPressed) {
        GuitarTunesStyleKit.drawBtnDetails(canvas, context, new RectF(0f, 0f, 44f, 44f), ResizingBehavior.AspectFit, isPressed);
    }
    
    public static void drawBtnDetails(Canvas canvas, Context context, RectF targetFrame, ResizingBehavior resizing, boolean isPressed) {
        // General Declarations
        Paint paint = CacheForBtnDetails.paint;
        
        // Local Colors
        int downColor = Color.argb(255, 63, 113, 129);
        int upColor = Color.argb(255, 76, 142, 162);
        
        // Local Variables
        int btnColor = isPressed ? downColor : upColor;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForBtnDetails.resizedFrame;
        GuitarTunesStyleKit.resizingBehaviorApply(resizing, CacheForBtnDetails.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 44f);
        
        // Group
        {
            // Oval
            RectF ovalRect = CacheForBtnDetails.ovalRect;
            ovalRect.set(12.9f, 11.64f, 31.9f, 30.64f);
            Path ovalPath = CacheForBtnDetails.ovalPath;
            ovalPath.reset();
            ovalPath.addOval(ovalRect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnColor);
            canvas.drawPath(ovalPath, paint);
            canvas.restore();
            
            // Text
            RectF textRect = CacheForBtnDetails.textRect;
            textRect.set(13f, 11.94f, 31.59f, 29.68f);
            TextPaint textTextPaint = CacheForBtnDetails.textTextPaint;
            textTextPaint.reset();
            textTextPaint.setFlags(Paint.ANTI_ALIAS_FLAG);
            textTextPaint.setColor(btnColor);
            textTextPaint.setTypeface(Typeface.createFromAsset(context.getAssets(), "HelveticaNeue.dfont"));
            textTextPaint.setTextSize(12f);
            StaticLayout textStaticLayout = CacheForBtnDetails.textStaticLayout.get((int) textRect.width(), Layout.Alignment.ALIGN_CENTER, "i", textTextPaint);
            canvas.save();
            canvas.clipRect(textRect);
            canvas.translate(textRect.left, textRect.top + (textRect.height() - textStaticLayout.getHeight()) / 2f);
            textStaticLayout.draw(canvas);
            canvas.restore();
        }
        
        canvas.restore();
    }
    
    // Tuner
    
    private static class CacheForTunerBG {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 850f, 650f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF iNTUNERect = new RectF();
        private static Path iNTUNEPath = new Path();
        private static RectF fLATRect = new RectF();
        private static Path fLATPath = new Path();
        private static RectF sHARPRect = new RectF();
        private static Path sHARPPath = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
        private static RectF bezier4Rect = new RectF();
        private static Path bezier4Path = new Path();
        private static RectF bezier6Rect = new RectF();
        private static Path bezier6Path = new Path();
        private static RectF bezier7Rect = new RectF();
        private static Path bezier7Path = new Path();
        private static RectF bezier10Rect = new RectF();
        private static Path bezier10Path = new Path();
        private static RectF bezier13Rect = new RectF();
        private static Path bezier13Path = new Path();
        private static RectF bezier16Rect = new RectF();
        private static Path bezier16Path = new Path();
        private static RectF bezier19Rect = new RectF();
        private static Path bezier19Path = new Path();
        private static RectF bezier21Rect = new RectF();
        private static Path bezier21Path = new Path();
        private static RectF bezier22Rect = new RectF();
        private static Path bezier22Path = new Path();
        private static RectF bezier23Rect = new RectF();
        private static Path bezier23Path = new Path();
        private static RectF bezier8Rect = new RectF();
        private static Path bezier8Path = new Path();
        private static RectF bezier14Rect = new RectF();
        private static Path bezier14Path = new Path();
        private static RectF bezier5Rect = new RectF();
        private static Path bezier5Path = new Path();
        private static RectF bezier20Rect = new RectF();
        private static Path bezier20Path = new Path();
    }
    
    public static void drawTunerBG(Canvas canvas, float tuningDistance) {
        GuitarTunesStyleKit.drawTunerBG(canvas, new RectF(0f, 0f, 850f, 650f), ResizingBehavior.AspectFit, tuningDistance);
    }
    
    public static void drawTunerBG(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, float tuningDistance) {
        // General Declarations
        Paint paint = CacheForTunerBG.paint;
        
        // Local Colors
        int connectedColor = Color.argb(255, 255, 0, 0);
        int tunerOff = Color.argb(255, 76, 1, 1);
        int tunerOn = Color.argb(255, 255, 0, 0);
        int color8 = Color.argb(0, 255, 255, 255);
        
        // Local Variables
        boolean tuningIsSharp = tuningDistance > -0.2f;
        boolean tuningIsFlat = tuningDistance < 0.2f;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForTunerBG.resizedFrame;
        GuitarTunesStyleKit.resizingBehaviorApply(resizing, CacheForTunerBG.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 850f, resizedFrame.height() / 650f);
        
        // Bezier
        RectF bezierRect = CacheForTunerBG.bezierRect;
        bezierRect.set(6.73f, 8f, 841.98f, 641.54f);
        Path bezierPath = CacheForTunerBG.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(6.73f, 29.78f);
        bezierPath.cubicTo(6.73f, 17.75f, 16.55f, 8f, 28.65f, 8f);
        bezierPath.lineTo(820.07f, 8f);
        bezierPath.cubicTo(832.17f, 8f, 841.98f, 17.74f, 841.98f, 29.78f);
        bezierPath.lineTo(841.98f, 619.75f);
        bezierPath.cubicTo(841.98f, 631.79f, 832.16f, 641.54f, 820.07f, 641.54f);
        bezierPath.lineTo(28.65f, 641.54f);
        bezierPath.cubicTo(16.54f, 641.54f, 6.73f, 631.79f, 6.73f, 619.75f);
        bezierPath.lineTo(6.73f, 29.78f);
        bezierPath.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezierPath.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color8);
        canvas.drawPath(bezierPath, paint);
        
        // Group 2
        {
            // background
            {
                // IN TUNE
                RectF iNTUNERect = CacheForTunerBG.iNTUNERect;
                iNTUNERect.set(376.57f, 94.11f, 502.12f, 126.85f);
                Path iNTUNEPath = CacheForTunerBG.iNTUNEPath;
                iNTUNEPath.reset();
                iNTUNEPath.moveTo(376.57f, 94.11f);
                iNTUNEPath.lineTo(376.57f, 126.46f);
                iNTUNEPath.lineTo(382.83f, 126.46f);
                iNTUNEPath.lineTo(382.83f, 94.11f);
                iNTUNEPath.lineTo(376.57f, 94.11f);
                iNTUNEPath.close();
                iNTUNEPath.moveTo(393.92f, 126.46f);
                iNTUNEPath.lineTo(393.92f, 119.17f);
                iNTUNEPath.cubicTo(393.92f, 112.69f, 393.68f, 107.7f, 393.54f, 104.43f);
                iNTUNEPath.lineTo(393.64f, 104.43f);
                iNTUNEPath.cubicTo(394.35f, 107.36f, 395.83f, 111.44f, 396.89f, 114.18f);
                iNTUNEPath.lineTo(401.81f, 126.46f);
                iNTUNEPath.lineTo(407.55f, 126.46f);
                iNTUNEPath.lineTo(407.55f, 94.11f);
                iNTUNEPath.lineTo(402.05f, 94.11f);
                iNTUNEPath.lineTo(402.05f, 101.26f);
                iNTUNEPath.cubicTo(402.05f, 107.22f, 402.48f, 112.83f, 402.67f, 116.24f);
                iNTUNEPath.lineTo(402.58f, 116.24f);
                iNTUNEPath.cubicTo(401.67f, 113.46f, 400.09f, 109.28f, 399.13f, 106.78f);
                iNTUNEPath.lineTo(394.16f, 94.11f);
                iNTUNEPath.lineTo(388.42f, 94.11f);
                iNTUNEPath.lineTo(388.42f, 126.46f);
                iNTUNEPath.lineTo(393.92f, 126.46f);
                iNTUNEPath.close();
                iNTUNEPath.moveTo(423.66f, 126.46f);
                iNTUNEPath.lineTo(429.93f, 126.46f);
                iNTUNEPath.lineTo(429.93f, 99.92f);
                iNTUNEPath.lineTo(435.66f, 99.92f);
                iNTUNEPath.lineTo(435.66f, 94.11f);
                iNTUNEPath.lineTo(417.97f, 94.11f);
                iNTUNEPath.lineTo(417.97f, 99.92f);
                iNTUNEPath.lineTo(423.66f, 99.92f);
                iNTUNEPath.lineTo(423.66f, 126.46f);
                iNTUNEPath.close();
                iNTUNEPath.moveTo(438.77f, 94.11f);
                iNTUNEPath.lineTo(438.77f, 114.08f);
                iNTUNEPath.cubicTo(438.77f, 122.19f, 441.4f, 126.85f, 448.14f, 126.85f);
                iNTUNEPath.cubicTo(454.36f, 126.85f, 457.47f, 122.34f, 457.47f, 114.03f);
                iNTUNEPath.lineTo(457.47f, 94.11f);
                iNTUNEPath.lineTo(451.2f, 94.11f);
                iNTUNEPath.lineTo(451.2f, 115.14f);
                iNTUNEPath.cubicTo(451.2f, 120.03f, 449.91f, 121.33f, 448.09f, 121.33f);
                iNTUNEPath.cubicTo(446.47f, 121.33f, 445.03f, 119.89f, 445.03f, 115.14f);
                iNTUNEPath.lineTo(445.03f, 94.11f);
                iNTUNEPath.lineTo(438.77f, 94.11f);
                iNTUNEPath.close();
                iNTUNEPath.moveTo(468.37f, 126.46f);
                iNTUNEPath.lineTo(468.37f, 119.17f);
                iNTUNEPath.cubicTo(468.37f, 112.69f, 468.13f, 107.7f, 467.98f, 104.43f);
                iNTUNEPath.lineTo(468.08f, 104.43f);
                iNTUNEPath.cubicTo(468.8f, 107.36f, 470.28f, 111.44f, 471.33f, 114.18f);
                iNTUNEPath.lineTo(476.26f, 126.46f);
                iNTUNEPath.lineTo(481.99f, 126.46f);
                iNTUNEPath.lineTo(481.99f, 94.11f);
                iNTUNEPath.lineTo(476.5f, 94.11f);
                iNTUNEPath.lineTo(476.5f, 101.26f);
                iNTUNEPath.cubicTo(476.5f, 107.22f, 476.93f, 112.83f, 477.12f, 116.24f);
                iNTUNEPath.lineTo(477.02f, 116.24f);
                iNTUNEPath.cubicTo(476.11f, 113.46f, 474.53f, 109.28f, 473.58f, 106.78f);
                iNTUNEPath.lineTo(468.61f, 94.11f);
                iNTUNEPath.lineTo(462.87f, 94.11f);
                iNTUNEPath.lineTo(462.87f, 126.46f);
                iNTUNEPath.lineTo(468.37f, 126.46f);
                iNTUNEPath.close();
                iNTUNEPath.moveTo(501.17f, 107.02f);
                iNTUNEPath.lineTo(493.8f, 107.02f);
                iNTUNEPath.lineTo(493.8f, 99.58f);
                iNTUNEPath.lineTo(501.55f, 99.58f);
                iNTUNEPath.lineTo(501.55f, 94.11f);
                iNTUNEPath.lineTo(487.54f, 94.11f);
                iNTUNEPath.lineTo(487.54f, 126.46f);
                iNTUNEPath.lineTo(502.12f, 126.46f);
                iNTUNEPath.lineTo(502.12f, 120.99f);
                iNTUNEPath.lineTo(493.8f, 120.99f);
                iNTUNEPath.lineTo(493.8f, 112.26f);
                iNTUNEPath.lineTo(501.17f, 112.26f);
                iNTUNEPath.lineTo(501.17f, 107.02f);
                iNTUNEPath.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(Color.WHITE);
                canvas.drawPath(iNTUNEPath, paint);
                
                // FLAT
                RectF fLATRect = CacheForTunerBG.fLATRect;
                fLATRect.set(61.88f, 233.31f, 134.17f, 265.66f);
                Path fLATPath = CacheForTunerBG.fLATPath;
                fLATPath.reset();
                fLATPath.moveTo(61.88f, 265.66f);
                fLATPath.lineTo(68.14f, 265.66f);
                fLATPath.lineTo(68.14f, 252.32f);
                fLATPath.lineTo(75.41f, 252.32f);
                fLATPath.lineTo(75.41f, 247.09f);
                fLATPath.lineTo(68.14f, 247.09f);
                fLATPath.lineTo(68.14f, 238.78f);
                fLATPath.lineTo(75.89f, 238.78f);
                fLATPath.lineTo(75.89f, 233.31f);
                fLATPath.lineTo(61.88f, 233.31f);
                fLATPath.lineTo(61.88f, 265.66f);
                fLATPath.close();
                fLATPath.moveTo(80.62f, 265.66f);
                fLATPath.lineTo(95.16f, 265.66f);
                fLATPath.lineTo(95.16f, 260.34f);
                fLATPath.lineTo(86.88f, 260.34f);
                fLATPath.lineTo(86.88f, 233.31f);
                fLATPath.lineTo(80.62f, 233.31f);
                fLATPath.lineTo(80.62f, 265.66f);
                fLATPath.close();
                fLATPath.moveTo(110.07f, 258.27f);
                fLATPath.lineTo(111.46f, 265.66f);
                fLATPath.lineTo(117.53f, 265.66f);
                fLATPath.lineTo(111.27f, 233.31f);
                fLATPath.lineTo(103.76f, 233.31f);
                fLATPath.lineTo(96.78f, 265.66f);
                fLATPath.lineTo(102.85f, 265.66f);
                fLATPath.lineTo(104.29f, 258.27f);
                fLATPath.lineTo(110.07f, 258.27f);
                fLATPath.close();
                fLATPath.moveTo(104.91f, 253.38f);
                fLATPath.lineTo(106.1f, 246.66f);
                fLATPath.cubicTo(106.44f, 244.78f, 106.92f, 241.42f, 107.25f, 239.26f);
                fLATPath.lineTo(107.4f, 239.26f);
                fLATPath.cubicTo(107.68f, 241.42f, 108.11f, 244.64f, 108.45f, 246.61f);
                fLATPath.lineTo(109.5f, 253.38f);
                fLATPath.lineTo(104.91f, 253.38f);
                fLATPath.close();
                fLATPath.moveTo(122.17f, 265.66f);
                fLATPath.lineTo(128.43f, 265.66f);
                fLATPath.lineTo(128.43f, 239.12f);
                fLATPath.lineTo(134.17f, 239.12f);
                fLATPath.lineTo(134.17f, 233.31f);
                fLATPath.lineTo(116.48f, 233.31f);
                fLATPath.lineTo(116.48f, 239.12f);
                fLATPath.lineTo(122.17f, 239.12f);
                fLATPath.lineTo(122.17f, 265.66f);
                fLATPath.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(Color.WHITE);
                canvas.drawPath(fLATPath, paint);
                
                // SHARP
                RectF sHARPRect = CacheForTunerBG.sHARPRect;
                sHARPRect.set(721.83f, 233.02f, 829.36f, 265.95f);
                Path sHARPPath = CacheForTunerBG.sHARPPath;
                sHARPPath.reset();
                sHARPPath.moveTo(721.83f, 264.66f);
                sHARPPath.cubicTo(722.88f, 265.28f, 725.41f, 265.95f, 727.99f, 265.95f);
                sHARPPath.cubicTo(734.31f, 265.95f, 738.66f, 262.06f, 738.66f, 256.16f);
                sHARPPath.cubicTo(738.66f, 252.75f, 737.08f, 249.49f, 732.82f, 246.9f);
                sHARPPath.cubicTo(729.33f, 244.78f, 728.38f, 243.78f, 728.38f, 241.86f);
                sHARPPath.cubicTo(728.38f, 240.13f, 729.67f, 238.5f, 732.34f, 238.5f);
                sHARPPath.cubicTo(734.16f, 238.5f, 735.55f, 239.02f, 736.46f, 239.6f);
                sHARPPath.lineTo(737.46f, 234.18f);
                sHARPPath.cubicTo(736.5f, 233.6f, 734.5f, 233.02f, 732.39f, 233.02f);
                sHARPPath.cubicTo(725.65f, 233.02f, 722.21f, 237.34f, 722.21f, 242.53f);
                sHARPPath.cubicTo(722.21f, 245.46f, 723.88f, 248.86f, 728.28f, 251.55f);
                sHARPPath.cubicTo(731.01f, 253.33f, 732.44f, 254.48f, 732.44f, 256.83f);
                sHARPPath.cubicTo(732.44f, 258.94f, 731.01f, 260.48f, 728.04f, 260.48f);
                sHARPPath.cubicTo(726.22f, 260.48f, 724.03f, 259.95f, 722.73f, 259.23f);
                sHARPPath.lineTo(721.83f, 264.66f);
                sHARPPath.close();
                sHARPPath.moveTo(742.29f, 233.31f);
                sHARPPath.lineTo(742.29f, 265.66f);
                sHARPPath.lineTo(748.55f, 265.66f);
                sHARPPath.lineTo(748.55f, 252.13f);
                sHARPPath.lineTo(755.1f, 252.13f);
                sHARPPath.lineTo(755.1f, 265.66f);
                sHARPPath.lineTo(761.37f, 265.66f);
                sHARPPath.lineTo(761.37f, 233.31f);
                sHARPPath.lineTo(755.1f, 233.31f);
                sHARPPath.lineTo(755.1f, 246.27f);
                sHARPPath.lineTo(748.55f, 246.27f);
                sHARPPath.lineTo(748.55f, 233.31f);
                sHARPPath.lineTo(742.29f, 233.31f);
                sHARPPath.close();
                sHARPPath.moveTo(777.82f, 258.27f);
                sHARPPath.lineTo(779.2f, 265.66f);
                sHARPPath.lineTo(785.27f, 265.66f);
                sHARPPath.lineTo(779.01f, 233.31f);
                sHARPPath.lineTo(771.5f, 233.31f);
                sHARPPath.lineTo(764.52f, 265.66f);
                sHARPPath.lineTo(770.6f, 265.66f);
                sHARPPath.lineTo(772.03f, 258.27f);
                sHARPPath.lineTo(777.82f, 258.27f);
                sHARPPath.close();
                sHARPPath.moveTo(772.65f, 253.38f);
                sHARPPath.lineTo(773.85f, 246.66f);
                sHARPPath.cubicTo(774.18f, 244.78f, 774.66f, 241.42f, 774.99f, 239.26f);
                sHARPPath.lineTo(775.14f, 239.26f);
                sHARPPath.cubicTo(775.42f, 241.42f, 775.85f, 244.64f, 776.19f, 246.61f);
                sHARPPath.lineTo(777.24f, 253.38f);
                sHARPPath.lineTo(772.65f, 253.38f);
                sHARPPath.close();
                sHARPPath.moveTo(788.81f, 265.66f);
                sHARPPath.lineTo(795.08f, 265.66f);
                sHARPPath.lineTo(795.08f, 252.75f);
                sHARPPath.lineTo(795.98f, 252.75f);
                sHARPPath.cubicTo(798.09f, 252.75f, 799.09f, 253.9f, 799.67f, 257.94f);
                sHARPPath.cubicTo(800.14f, 261.49f, 800.86f, 264.75f, 801.24f, 265.66f);
                sHARPPath.lineTo(807.79f, 265.66f);
                sHARPPath.cubicTo(807.22f, 264.46f, 806.36f, 260.48f, 805.74f, 256.88f);
                sHARPPath.cubicTo(805.12f, 253.42f, 804.02f, 251.36f, 801.82f, 250.5f);
                sHARPPath.lineTo(801.82f, 250.4f);
                sHARPPath.cubicTo(805.12f, 248.86f, 806.79f, 245.74f, 806.79f, 242.29f);
                sHARPPath.cubicTo(806.79f, 239.5f, 806.22f, 237.34f, 804.26f, 235.57f);
                sHARPPath.cubicTo(802.15f, 233.65f, 799.09f, 233.17f, 795.65f, 233.17f);
                sHARPPath.cubicTo(793.26f, 233.17f, 790.77f, 233.41f, 788.81f, 233.79f);
                sHARPPath.lineTo(788.81f, 265.66f);
                sHARPPath.close();
                sHARPPath.moveTo(795.08f, 238.26f);
                sHARPPath.cubicTo(795.41f, 238.11f, 796.03f, 238.06f, 796.56f, 238.06f);
                sHARPPath.cubicTo(799.38f, 238.16f, 800.48f, 240.13f, 800.48f, 242.86f);
                sHARPPath.cubicTo(800.48f, 245.7f, 798.9f, 247.9f, 796.18f, 247.9f);
                sHARPPath.lineTo(795.08f, 247.9f);
                sHARPPath.lineTo(795.08f, 238.26f);
                sHARPPath.close();
                sHARPPath.moveTo(811.28f, 265.66f);
                sHARPPath.lineTo(817.55f, 265.66f);
                sHARPPath.lineTo(817.55f, 253.62f);
                sHARPPath.cubicTo(817.93f, 253.62f, 818.36f, 253.62f, 818.79f, 253.62f);
                sHARPPath.cubicTo(821.37f, 253.62f, 824.62f, 252.66f, 826.63f, 250.54f);
                sHARPPath.cubicTo(828.31f, 248.72f, 829.36f, 246.27f, 829.36f, 242.77f);
                sHARPPath.cubicTo(829.36f, 240.03f, 828.5f, 237.34f, 826.58f, 235.66f);
                sHARPPath.cubicTo(824.48f, 233.7f, 821.56f, 233.17f, 817.83f, 233.17f);
                sHARPPath.cubicTo(815.44f, 233.17f, 813.05f, 233.41f, 811.28f, 233.79f);
                sHARPPath.lineTo(811.28f, 265.66f);
                sHARPPath.close();
                sHARPPath.moveTo(817.55f, 238.5f);
                sHARPPath.cubicTo(817.93f, 238.35f, 818.5f, 238.26f, 819.08f, 238.26f);
                sHARPPath.cubicTo(821.99f, 238.26f, 823.14f, 240.46f, 823.14f, 243.3f);
                sHARPPath.cubicTo(823.14f, 246.32f, 821.71f, 248.58f, 818.55f, 248.58f);
                sHARPPath.cubicTo(818.17f, 248.58f, 817.83f, 248.58f, 817.55f, 248.48f);
                sHARPPath.lineTo(817.55f, 238.5f);
                sHARPPath.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(Color.WHITE);
                canvas.drawPath(sHARPPath, paint);
                
                // Group
                {
                    // Bezier 3
                    RectF bezier3Rect = CacheForTunerBG.bezier3Rect;
                    bezier3Rect.set(115.31f, 328.66f, 135.46f, 346.28f);
                    Path bezier3Path = CacheForTunerBG.bezier3Path;
                    bezier3Path.reset();
                    bezier3Path.moveTo(135.46f, 346.28f);
                    bezier3Path.lineTo(115.31f, 328.66f);
                    
                    paint.reset();
                    paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                    paint.setStrokeWidth(6f);
                    paint.setStrokeCap(Paint.Cap.ROUND);
                    paint.setStrokeMiter(10f);
                    canvas.save();
                    paint.setStyle(Paint.Style.STROKE);
                    paint.setColor(Color.WHITE);
                    canvas.drawPath(bezier3Path, paint);
                    canvas.restore();
                    
                    // Bezier 4
                    RectF bezier4Rect = CacheForTunerBG.bezier4Rect;
                    bezier4Rect.set(166.49f, 278.29f, 180.4f, 295.59f);
                    Path bezier4Path = CacheForTunerBG.bezier4Path;
                    bezier4Path.reset();
                    bezier4Path.moveTo(180.4f, 295.59f);
                    bezier4Path.lineTo(166.49f, 278.29f);
                    
                    paint.reset();
                    paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                    paint.setStrokeWidth(6f);
                    paint.setStrokeCap(Paint.Cap.ROUND);
                    paint.setStrokeMiter(10f);
                    canvas.save();
                    paint.setStyle(Paint.Style.STROKE);
                    paint.setColor(Color.WHITE);
                    canvas.drawPath(bezier4Path, paint);
                    canvas.restore();
                    
                    // Bezier 6
                    RectF bezier6Rect = CacheForTunerBG.bezier6Rect;
                    bezier6Rect.set(225.12f, 236.18f, 237.36f, 258.12f);
                    Path bezier6Path = CacheForTunerBG.bezier6Path;
                    bezier6Path.reset();
                    bezier6Path.moveTo(237.36f, 258.13f);
                    bezier6Path.lineTo(225.12f, 236.18f);
                    
                    paint.reset();
                    paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                    paint.setStrokeWidth(6f);
                    paint.setStrokeCap(Paint.Cap.ROUND);
                    paint.setStrokeMiter(10f);
                    canvas.save();
                    paint.setStyle(Paint.Style.STROKE);
                    paint.setColor(Color.WHITE);
                    canvas.drawPath(bezier6Path, paint);
                    canvas.restore();
                    
                    // Bezier 7
                    RectF bezier7Rect = CacheForTunerBG.bezier7Rect;
                    bezier7Rect.set(290.27f, 205.98f, 298.24f, 227.21f);
                    Path bezier7Path = CacheForTunerBG.bezier7Path;
                    bezier7Path.reset();
                    bezier7Path.moveTo(298.24f, 227.21f);
                    bezier7Path.lineTo(290.27f, 205.98f);
                    
                    paint.reset();
                    paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                    paint.setStrokeWidth(6f);
                    paint.setStrokeCap(Paint.Cap.ROUND);
                    paint.setStrokeMiter(10f);
                    canvas.save();
                    paint.setStyle(Paint.Style.STROKE);
                    paint.setColor(Color.WHITE);
                    canvas.drawPath(bezier7Path, paint);
                    canvas.restore();
                    
                    // Bezier 10
                    RectF bezier10Rect = CacheForTunerBG.bezier10Rect;
                    bezier10Rect.set(359.57f, 186.97f, 364.11f, 211.28f);
                    Path bezier10Path = CacheForTunerBG.bezier10Path;
                    bezier10Path.reset();
                    bezier10Path.moveTo(364.11f, 211.28f);
                    bezier10Path.lineTo(359.57f, 186.97f);
                    
                    paint.reset();
                    paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                    paint.setStrokeWidth(6f);
                    paint.setStrokeCap(Paint.Cap.ROUND);
                    paint.setStrokeMiter(10f);
                    canvas.save();
                    paint.setStyle(Paint.Style.STROKE);
                    paint.setColor(Color.WHITE);
                    canvas.drawPath(bezier10Path, paint);
                    canvas.restore();
                    
                    // Bezier 13
                    RectF bezier13Rect = CacheForTunerBG.bezier13Rect;
                    bezier13Rect.set(429.37f, 181.72f, 429.37f, 203.67f);
                    Path bezier13Path = CacheForTunerBG.bezier13Path;
                    bezier13Path.reset();
                    bezier13Path.moveTo(429.37f, 203.67f);
                    bezier13Path.lineTo(429.37f, 181.72f);
                    
                    paint.reset();
                    paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                    paint.setStrokeWidth(8f);
                    paint.setStrokeCap(Paint.Cap.ROUND);
                    paint.setStrokeMiter(10f);
                    canvas.save();
                    paint.setStyle(Paint.Style.STROKE);
                    paint.setColor(Color.WHITE);
                    canvas.drawPath(bezier13Path, paint);
                    canvas.restore();
                    
                    // Bezier 16
                    RectF bezier16Rect = CacheForTunerBG.bezier16Rect;
                    bezier16Rect.set(727.54f, 328.66f, 747.69f, 346.28f);
                    Path bezier16Path = CacheForTunerBG.bezier16Path;
                    bezier16Path.reset();
                    bezier16Path.moveTo(727.54f, 346.28f);
                    bezier16Path.lineTo(747.69f, 328.66f);
                    
                    paint.reset();
                    paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                    paint.setStrokeWidth(6f);
                    paint.setStrokeCap(Paint.Cap.ROUND);
                    paint.setStrokeMiter(10f);
                    canvas.save();
                    paint.setStyle(Paint.Style.STROKE);
                    paint.setColor(Color.WHITE);
                    canvas.drawPath(bezier16Path, paint);
                    canvas.restore();
                    
                    // Bezier 19
                    RectF bezier19Rect = CacheForTunerBG.bezier19Rect;
                    bezier19Rect.set(682.6f, 278.29f, 696.51f, 295.59f);
                    Path bezier19Path = CacheForTunerBG.bezier19Path;
                    bezier19Path.reset();
                    bezier19Path.moveTo(682.6f, 295.59f);
                    bezier19Path.lineTo(696.51f, 278.29f);
                    
                    paint.reset();
                    paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                    paint.setStrokeWidth(6f);
                    paint.setStrokeCap(Paint.Cap.ROUND);
                    paint.setStrokeMiter(10f);
                    canvas.save();
                    paint.setStyle(Paint.Style.STROKE);
                    paint.setColor(Color.WHITE);
                    canvas.drawPath(bezier19Path, paint);
                    canvas.restore();
                    
                    // Bezier 21
                    RectF bezier21Rect = CacheForTunerBG.bezier21Rect;
                    bezier21Rect.set(625.64f, 236.18f, 637.88f, 258.12f);
                    Path bezier21Path = CacheForTunerBG.bezier21Path;
                    bezier21Path.reset();
                    bezier21Path.moveTo(625.64f, 258.13f);
                    bezier21Path.lineTo(637.88f, 236.18f);
                    
                    paint.reset();
                    paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                    paint.setStrokeWidth(6f);
                    paint.setStrokeCap(Paint.Cap.ROUND);
                    paint.setStrokeMiter(10f);
                    canvas.save();
                    paint.setStyle(Paint.Style.STROKE);
                    paint.setColor(Color.WHITE);
                    canvas.drawPath(bezier21Path, paint);
                    canvas.restore();
                    
                    // Bezier 22
                    RectF bezier22Rect = CacheForTunerBG.bezier22Rect;
                    bezier22Rect.set(564.76f, 205.98f, 572.73f, 227.21f);
                    Path bezier22Path = CacheForTunerBG.bezier22Path;
                    bezier22Path.reset();
                    bezier22Path.moveTo(564.76f, 227.21f);
                    bezier22Path.lineTo(572.73f, 205.98f);
                    
                    paint.reset();
                    paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                    paint.setStrokeWidth(6f);
                    paint.setStrokeCap(Paint.Cap.ROUND);
                    paint.setStrokeMiter(10f);
                    canvas.save();
                    paint.setStyle(Paint.Style.STROKE);
                    paint.setColor(Color.WHITE);
                    canvas.drawPath(bezier22Path, paint);
                    canvas.restore();
                    
                    // Bezier 23
                    RectF bezier23Rect = CacheForTunerBG.bezier23Rect;
                    bezier23Rect.set(498.89f, 186.97f, 503.43f, 211.28f);
                    Path bezier23Path = CacheForTunerBG.bezier23Path;
                    bezier23Path.reset();
                    bezier23Path.moveTo(498.89f, 211.28f);
                    bezier23Path.lineTo(503.43f, 186.97f);
                    
                    paint.reset();
                    paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                    paint.setStrokeWidth(6f);
                    paint.setStrokeCap(Paint.Cap.ROUND);
                    paint.setStrokeMiter(10f);
                    canvas.save();
                    paint.setStyle(Paint.Style.STROKE);
                    paint.setColor(Color.WHITE);
                    canvas.drawPath(bezier23Path, paint);
                    canvas.restore();
                }
            }
            
            // arrowFlat
            {
                // Bezier 8
                RectF bezier8Rect = CacheForTunerBG.bezier8Rect;
                bezier8Rect.set(163.09f, 442.22f, 260.39f, 555.44f);
                Path bezier8Path = CacheForTunerBG.bezier8Path;
                bezier8Path.reset();
                bezier8Path.moveTo(163.09f, 442.22f);
                bezier8Path.lineTo(260.39f, 498.83f);
                bezier8Path.lineTo(163.09f, 555.44f);
                bezier8Path.lineTo(163.09f, 442.22f);
                bezier8Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                bezier8Path.setFillType(Path.FillType.EVEN_ODD);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(tunerOff);
                canvas.drawPath(bezier8Path, paint);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(2.5f);
                paint.setStrokeMiter(10f);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(Color.WHITE);
                canvas.drawPath(bezier8Path, paint);
                canvas.restore();
                
                // Bezier 14
                if (tuningIsFlat) {
                    RectF bezier14Rect = CacheForTunerBG.bezier14Rect;
                    bezier14Rect.set(161.74f, 440.43f, 264.14f, 557.33f);
                    Path bezier14Path = CacheForTunerBG.bezier14Path;
                    bezier14Path.reset();
                    bezier14Path.moveTo(161.74f, 440.43f);
                    bezier14Path.lineTo(264.14f, 498.88f);
                    bezier14Path.lineTo(161.74f, 557.33f);
                    bezier14Path.lineTo(161.74f, 440.43f);
                    bezier14Path.close();
                    
                    paint.reset();
                    paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                    bezier14Path.setFillType(Path.FillType.EVEN_ODD);
                    paint.setStyle(Paint.Style.FILL);
                    paint.setColor(tunerOn);
                    canvas.drawPath(bezier14Path, paint);
                    
                    paint.reset();
                    paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                    paint.setStrokeWidth(2.5f);
                    paint.setStrokeMiter(10f);
                    canvas.save();
                    paint.setStyle(Paint.Style.STROKE);
                    paint.setColor(Color.WHITE);
                    canvas.drawPath(bezier14Path, paint);
                    canvas.restore();
                }
            }
            
            // arrowSharp
            {
                // Bezier 5
                RectF bezier5Rect = CacheForTunerBG.bezier5Rect;
                bezier5Rect.set(605.53f, 440.66f, 710.41f, 555.47f);
                Path bezier5Path = CacheForTunerBG.bezier5Path;
                bezier5Path.reset();
                bezier5Path.moveTo(710.41f, 440.66f);
                bezier5Path.lineTo(605.53f, 498.07f);
                bezier5Path.lineTo(710.41f, 555.47f);
                bezier5Path.lineTo(710.41f, 440.66f);
                bezier5Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                bezier5Path.setFillType(Path.FillType.EVEN_ODD);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(tunerOff);
                canvas.drawPath(bezier5Path, paint);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(2f);
                paint.setStrokeMiter(10f);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(Color.WHITE);
                canvas.drawPath(bezier5Path, paint);
                canvas.restore();
                
                // Bezier 20
                if (tuningIsSharp) {
                    RectF bezier20Rect = CacheForTunerBG.bezier20Rect;
                    bezier20Rect.set(603.85f, 440.3f, 710.79f, 557.05f);
                    Path bezier20Path = CacheForTunerBG.bezier20Path;
                    bezier20Path.reset();
                    bezier20Path.moveTo(710.79f, 440.3f);
                    bezier20Path.lineTo(603.85f, 498.68f);
                    bezier20Path.lineTo(710.79f, 557.05f);
                    bezier20Path.lineTo(710.79f, 440.3f);
                    bezier20Path.close();
                    
                    paint.reset();
                    paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                    bezier20Path.setFillType(Path.FillType.EVEN_ODD);
                    paint.setStyle(Paint.Style.FILL);
                    paint.setColor(connectedColor);
                    canvas.drawPath(bezier20Path, paint);
                    
                    paint.reset();
                    paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                    paint.setStrokeWidth(2f);
                    paint.setStrokeMiter(10f);
                    canvas.save();
                    paint.setStyle(Paint.Style.STROKE);
                    paint.setColor(Color.WHITE);
                    canvas.drawPath(bezier20Path, paint);
                    canvas.restore();
                }
            }
        }
        
        canvas.restore();
    }
    
    private static class CacheForTunerNeedle {
        private static Paint paint = new Paint();
        private static RectF needleRect = new RectF();
        private static Path needlePath = new Path();
    }
    
    
    public static void drawTunerNeedle(Canvas canvas, RectF frame) {
        // General Declarations
        Paint paint = CacheForTunerNeedle.paint;
        
        // Local Colors
        int tunerOn = Color.argb(255, 255, 0, 0);
        
        // needle
        RectF needleRect = CacheForTunerNeedle.needleRect;
        needleRect.set(frame.left + (float) Math.floor(frame.width() * 0.17529f + 0.1f) + 0.4f,
            frame.top + (float) Math.floor(frame.height() * 0.00472f - 0.47f) + 0.97f,
            frame.left + (float) Math.floor(frame.width() * 0.67529f + 0.1f) + 0.4f,
            frame.top + (float) Math.floor(frame.height() * 0.51663f - 0.47f) + 0.97f);
        Path needlePath = CacheForTunerNeedle.needlePath;
        needlePath.reset();
        needlePath.moveTo(needleRect.left, needleRect.top);
        needlePath.lineTo(needleRect.right, needleRect.top);
        needlePath.lineTo(needleRect.right, needleRect.bottom);
        needlePath.lineTo(needleRect.left, needleRect.bottom);
        needlePath.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(tunerOn);
        canvas.drawPath(needlePath, paint);
    }
    
    private static class CacheForBtnTuner {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF ovalRect = new RectF();
        private static Path ovalPath = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
        private static RectF bezier4Rect = new RectF();
        private static Path bezier4Path = new Path();
        private static RectF bezier5Rect = new RectF();
        private static Path bezier5Path = new Path();
        private static RectF bezier6Rect = new RectF();
        private static Path bezier6Path = new Path();
        private static RectF bezier7Rect = new RectF();
        private static Path bezier7Path = new Path();
        private static RectF bezier8Rect = new RectF();
        private static Path bezier8Path = new Path();
    }
    
    public static void drawBtnTuner(Canvas canvas, boolean hasAlternateTuning) {
        GuitarTunesStyleKit.drawBtnTuner(canvas, new RectF(0f, 0f, 44f, 44f), ResizingBehavior.AspectFit, hasAlternateTuning);
    }
    
    public static void drawBtnTuner(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, boolean hasAlternateTuning) {
        // General Declarations
        Paint paint = CacheForBtnTuner.paint;
        
        // Local Colors
        int tunerStandard = Color.argb(255, 0, 0, 0);
        int tunerAlternate = Color.argb(255, 227, 54, 54);
        
        // Local Variables
        int tunerColor = hasAlternateTuning ? tunerAlternate : tunerStandard;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForBtnTuner.resizedFrame;
        GuitarTunesStyleKit.resizingBehaviorApply(resizing, CacheForBtnTuner.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 44f);
        
        // Group 2
        {
            // Bezier
            RectF bezierRect = CacheForBtnTuner.bezierRect;
            bezierRect.set(6.65f, 12.86f, 20.28f, 24.66f);
            Path bezierPath = CacheForBtnTuner.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(20.27f, 12.86f);
            bezierPath.cubicTo(15.3f, 13.22f, 10.66f, 14.81f, 6.65f, 17.33f);
            bezierPath.lineTo(13.88f, 24.66f);
            bezierPath.cubicTo(15.86f, 23.72f, 18.01f, 23.1f, 20.28f, 22.85f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(tunerColor);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
            
            // Bezier 2
            RectF bezier2Rect = CacheForBtnTuner.bezier2Rect;
            bezier2Rect.set(24.62f, 12.86f, 38.28f, 24.66f);
            Path bezier2Path = CacheForBtnTuner.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(24.64f, 22.85f);
            bezier2Path.cubicTo(26.91f, 23.1f, 29.06f, 23.72f, 31.05f, 24.66f);
            bezier2Path.lineTo(38.28f, 17.33f);
            bezier2Path.cubicTo(34.25f, 14.8f, 29.6f, 13.21f, 24.62f, 12.86f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(tunerColor);
            canvas.drawPath(bezier2Path, paint);
            canvas.restore();
            
            // Oval
            RectF ovalRect = CacheForBtnTuner.ovalRect;
            ovalRect.set(19.35f, 28.15f, 25.55f, 34.35f);
            Path ovalPath = CacheForBtnTuner.ovalPath;
            ovalPath.reset();
            ovalPath.addOval(ovalRect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(tunerColor);
            canvas.drawPath(ovalPath, paint);
            canvas.restore();
            
            // Bezier 3
            RectF bezier3Rect = CacheForBtnTuner.bezier3Rect;
            bezier3Rect.set(13.29f, 17.67f, 21.23f, 28.81f);
            Path bezier3Path = CacheForBtnTuner.bezier3Path;
            bezier3Path.reset();
            bezier3Path.moveTo(21.23f, 28.81f);
            bezier3Path.lineTo(13.29f, 17.67f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(tunerColor);
            canvas.drawPath(bezier3Path, paint);
            canvas.restore();
            
            // Bezier 4
            RectF bezier4Rect = CacheForBtnTuner.bezier4Rect;
            bezier4Rect.set(22.45f, 6.65f, 22.45f, 8.11f);
            Path bezier4Path = CacheForBtnTuner.bezier4Path;
            bezier4Path.reset();
            bezier4Path.moveTo(22.45f, 6.65f);
            bezier4Path.lineTo(22.45f, 8.11f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(tunerColor);
            canvas.drawPath(bezier4Path, paint);
            canvas.restore();
            
            // Bezier 5
            RectF bezier5Rect = CacheForBtnTuner.bezier5Rect;
            bezier5Rect.set(22.45f, 11.02f, 22.45f, 12.48f);
            Path bezier5Path = CacheForBtnTuner.bezier5Path;
            bezier5Path.reset();
            bezier5Path.moveTo(22.45f, 11.02f);
            bezier5Path.lineTo(22.45f, 12.48f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(tunerColor);
            canvas.drawPath(bezier5Path, paint);
            canvas.restore();
            
            // Bezier 6
            RectF bezier6Rect = CacheForBtnTuner.bezier6Rect;
            bezier6Rect.set(22.45f, 15.4f, 22.45f, 16.86f);
            Path bezier6Path = CacheForBtnTuner.bezier6Path;
            bezier6Path.reset();
            bezier6Path.moveTo(22.45f, 15.4f);
            bezier6Path.lineTo(22.45f, 16.86f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(tunerColor);
            canvas.drawPath(bezier6Path, paint);
            canvas.restore();
            
            // Bezier 7
            RectF bezier7Rect = CacheForBtnTuner.bezier7Rect;
            bezier7Rect.set(22.45f, 19.77f, 22.45f, 21.23f);
            Path bezier7Path = CacheForBtnTuner.bezier7Path;
            bezier7Path.reset();
            bezier7Path.moveTo(22.45f, 19.77f);
            bezier7Path.lineTo(22.45f, 21.23f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(tunerColor);
            canvas.drawPath(bezier7Path, paint);
            canvas.restore();
            
            // Bezier 8
            RectF bezier8Rect = CacheForBtnTuner.bezier8Rect;
            bezier8Rect.set(22.45f, 24.14f, 22.45f, 25.6f);
            Path bezier8Path = CacheForBtnTuner.bezier8Path;
            bezier8Path.reset();
            bezier8Path.moveTo(22.45f, 24.14f);
            bezier8Path.lineTo(22.45f, 25.6f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(tunerColor);
            canvas.drawPath(bezier8Path, paint);
            canvas.restore();
        }
        
        canvas.restore();
    }
    
    // Gradients
    
    private static class CacheForJambarBG {
        private static Paint paint = new Paint();
        private static PaintCodeGradient jambarGradient = null;
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
        private static PaintCodeLinearGradient rectanglePathGradient = new PaintCodeLinearGradient();
    }
    
    
    public static void drawJambarBG(Canvas canvas) {
        // General Declarations
        Paint paint = CacheForJambarBG.paint;
        
        // Local Colors
        int jambarGradientColor5 = Color.argb(255, 230, 239, 243);
        int jambarGradientColor4 = Color.argb(255, 233, 242, 246);
        int jambarGradientColor = Color.argb(255, 126, 178, 191);
        int jambarGradientColor3 = Color.argb(255, 224, 233, 239);
        int jambarGradientColor2 = Color.argb(255, 198, 219, 226);
        
        // Local Gradients
        if (CacheForJambarBG.jambarGradient == null)
            CacheForJambarBG.jambarGradient = new PaintCodeGradient(new int[]{jambarGradientColor, jambarGradientColor2, jambarGradientColor3, jambarGradientColor5, jambarGradientColor4}, new float[]{0f, 0.36f, 0.5f, 0.77f, 1f});
        PaintCodeGradient jambarGradient = CacheForJambarBG.jambarGradient;
        
        // Rectangle
        RectF rectangleRect = CacheForJambarBG.rectangleRect;
        rectangleRect.set(0f, 0f, 183f, 122f);
        Path rectanglePath = CacheForJambarBG.rectanglePath;
        rectanglePath.reset();
        rectanglePath.addRect(rectangleRect, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setShader(CacheForJambarBG.rectanglePathGradient.get(jambarGradient, 91.5f, 122f, 91.5f, 0f));
        canvas.drawPath(rectanglePath, paint);
    }
    
    private static class CacheForFretNutBG {
        private static Paint paint = new Paint();
        private static PaintCodeGradient fretNutGradient = null;
        private static RectF originalFrame = new RectF(0f, 0f, 100f, 122f);
        private static RectF resizedFrame = new RectF();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
        private static PaintCodeLinearGradient rectanglePathGradient = new PaintCodeLinearGradient();
    }
    
    public static void drawFretNutBG(Canvas canvas) {
        GuitarTunesStyleKit.drawFretNutBG(canvas, new RectF(0f, 0f, 100f, 122f), ResizingBehavior.AspectFit);
    }
    
    public static void drawFretNutBG(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForFretNutBG.paint;
        
        // Local Colors
        int fretNut2 = Color.argb(255, 206, 161, 116);
        int fretNut3 = Color.argb(255, 75, 72, 69);
        int fretNut1 = Color.argb(255, 243, 178, 115);
        
        // Local Gradients
        if (CacheForFretNutBG.fretNutGradient == null)
            CacheForFretNutBG.fretNutGradient = new PaintCodeGradient(new int[]{fretNut1, PaintCodeColor.colorByBlendingColors(fretNut1, 0.5f, fretNut2), fretNut2, PaintCodeColor.colorByBlendingColors(fretNut2, 0.5f, fretNut3), fretNut3, Color.BLACK}, new float[]{0f, 0.49f, 0.67f, 0.78f, 0.96f, 1f});
        PaintCodeGradient fretNutGradient = CacheForFretNutBG.fretNutGradient;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForFretNutBG.resizedFrame;
        GuitarTunesStyleKit.resizingBehaviorApply(resizing, CacheForFretNutBG.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 100f, resizedFrame.height() / 122f);
        
        // Rectangle
        RectF rectangleRect = CacheForFretNutBG.rectangleRect;
        rectangleRect.set(0f, 0f, 100f, 122f);
        Path rectanglePath = CacheForFretNutBG.rectanglePath;
        rectanglePath.reset();
        rectanglePath.addRect(rectangleRect, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setShader(CacheForFretNutBG.rectanglePathGradient.get(fretNutGradient, 0f, 61f, 100f, 61f));
        canvas.drawPath(rectanglePath, paint);
        
        canvas.restore();
    }
    
    
    // Resizing Behavior
    public static void resizingBehaviorApply(ResizingBehavior behavior, RectF rect, RectF target, RectF result) {
        if (rect.equals(target) || target == null) {
            result.set(rect);
            return;
        }
        
        if (behavior == ResizingBehavior.Stretch) {
            result.set(target);
            return;
        }
        
        float xRatio = Math.abs(target.width() / rect.width());
        float yRatio = Math.abs(target.height() / rect.height());
        float scale = 0f;
        
        switch (behavior) {
            case AspectFit: {
                scale = Math.min(xRatio, yRatio);
                break;
            }
            case AspectFill: {
                scale = Math.max(xRatio, yRatio);
                break;
            }
            case Center: {
                scale = 1f;
                break;
            }
        }
        
        float newWidth = Math.abs(rect.width() * scale);
        float newHeight = Math.abs(rect.height() * scale);
        result.set(target.centerX() - newWidth / 2,
            target.centerY() - newHeight / 2,
            target.centerX() + newWidth / 2,
            target.centerY() + newHeight / 2);
    }
    
    
}

class PaintCodeColor extends Color {
    private static float[] ColorToHSV(int originalColor) {
        float hsv[] = new float[3];
        RGBToHSV(red(originalColor), green(originalColor), blue(originalColor), hsv);
        return hsv;
    }
    
    public static int colorByChangingHue(int originalColor, float newHue) {
        float hsv[] = ColorToHSV(originalColor);
        hsv[0] = newHue;
        return HSVToColor(alpha(originalColor), hsv);
    }
    
    public static int colorByChangingSaturation(int originalColor, float newSaturation) {
        float hsv[] = ColorToHSV(originalColor);
        hsv[1] = newSaturation;
        return HSVToColor(alpha(originalColor), hsv);
    }
    
    public static int colorByChangingValue(int originalColor, float newValue) {
        float hsv[] = ColorToHSV(originalColor);
        hsv[2] = newValue;
        return HSVToColor(alpha(originalColor), hsv);
    }
    
    public static float hue(int color) {
        return ColorToHSV(color)[0];
    }
    
    public static float saturation(int color) {
        return ColorToHSV(color)[1];
    }
    
    public static float brightness(int color) {
        return ColorToHSV(color)[2];
    }
    
    public static int colorByChangingAlpha(int color, int newAlpha) {
        return argb(newAlpha, red(color), green(color), blue(color));
    }
    
    public static int colorByBlendingColors(int c1, float ratio, int c2) {
        return argb((int) ((1f - ratio) * alpha(c1) + ratio * alpha(c2)),
            (int) ((1f - ratio) * red(c1) + ratio * red(c2)),
            (int) ((1f - ratio) * green(c1) + ratio * green(c2)),
            (int) ((1f - ratio) * blue(c1) + ratio * blue(c2)));
    }
    
    public static int colorByApplyingHighlight(int color, float ratio) {
        return colorByBlendingColors(color, ratio, colorByChangingAlpha(WHITE, alpha(color)));
    }
    
    public static int colorByApplyingShadow(int color, float ratio) {
        return colorByBlendingColors(color, ratio, colorByChangingAlpha(BLACK, alpha(color)));
    }
}

class PaintCodeGradient {
    private int[] colors;
    private float[] positions;
    
    public PaintCodeGradient(int[] colors, float[] positions) {
        if (positions == null) {
            int steps = colors.length;
            positions = new float[steps];
            for (int i = 0; i < steps; i++)
                positions[i] = (float) i / (steps - 1);
        }
        
        this.colors = colors;
        this.positions = positions;
    }
    
    public LinearGradient linearGradient(float x0, float y0, float x1, float y1) {
        return new LinearGradient(x0, y0, x1, y1, this.colors, this.positions, Shader.TileMode.CLAMP);
    }
    
    public RadialGradient radialGradient(float startX, float startY, float startRadius, float endX, float endY, float endRadius) {
        int steps = this.colors.length;
        float[] positions = new float[steps];
        
        if (startRadius > endRadius) {
            float ratio = endRadius / startRadius;
            int[] colors = new int[steps];
            
            for (int i = 0; i < steps; i++) {
                colors[i] = this.colors[steps - i - 1];
                positions[i] = (1 - this.positions[steps - i - 1]) * (1 - ratio) + ratio;
            }
            
            return new RadialGradient(endX, endY, startRadius, colors, positions, Shader.TileMode.CLAMP);
        } else {
            float ratio = startRadius / endRadius;
            
            for (int i = 0; i < steps; i++) {
                positions[i] = this.positions[i] * (1 - ratio) + ratio;
            }
            
            return new RadialGradient(startX, startY, endRadius, this.colors, positions, Shader.TileMode.CLAMP);
        }
    }
    
    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof PaintCodeGradient))
            return false;
        PaintCodeGradient other = (PaintCodeGradient) obj;
        return Arrays.equals(this.colors, other.colors) && Arrays.equals(this.positions, other.positions);
    }
}


class PaintCodeLinearGradient {
    private LinearGradient shader;
    private PaintCodeGradient paintCodeGradient;
    private float x0, y0, x1, y1;
    LinearGradient get(PaintCodeGradient paintCodeGradient, float x0, float y0, float x1, float y1) {
        if (this.shader == null || this.x0 != x0 || this.y0 != y0 || this.x1 != x1 || this.y1 != y1 || !this.paintCodeGradient.equals(paintCodeGradient)) {
            this.x0 = x0;
            this.y0 = y0;
            this.x1 = x1;
            this.y1 = y1;
            this.paintCodeGradient = paintCodeGradient;
            this.shader = paintCodeGradient.linearGradient(x0, y0, x1, y1);
        }
        return this.shader;
    }
}


class PaintCodeStaticLayout {
    private StaticLayout layout;
    private int width;
    private Layout.Alignment alignment;
    private CharSequence source;
    private TextPaint paint;
    
    StaticLayout get(int width, Layout.Alignment alignment, CharSequence source, TextPaint paint) {
        if (this.layout == null || this.width != width || this.alignment != alignment || !this.source.equals(source) || !this.paint.equals(paint)) {
            this.width = width;
            this.alignment = alignment;
            this.source = source;
            this.paint = paint;
            this.layout = new StaticLayout(source, paint, width, alignment, 1, 0, false);
        }
        return this.layout;
    }
}
