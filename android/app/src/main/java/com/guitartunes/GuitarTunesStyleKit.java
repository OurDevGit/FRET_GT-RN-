package com.guitartunes;

import android.content.Context;
import android.graphics.Paint;
import android.graphics.PorterDuff;
import android.graphics.PorterDuffXfermode;
import android.graphics.Matrix;
import android.graphics.PointF;
import android.graphics.RectF;
import android.graphics.Shader;
import android.graphics.LinearGradient;
import android.graphics.RadialGradient;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.BitmapShader;
import android.graphics.BlurMaskFilter;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Path;
import android.graphics.Typeface;
import android.text.Layout;
import android.text.StaticLayout;
import android.text.TextPaint;
import java.util.Stack;
import java.util.Arrays;
import java.lang.ref.WeakReference;



/**
 * Created by Stephen Haase & Rick Terrill on 7/28/17.
 * Copyright Â© 2017 Big Swing. All rights reserved.
 *
 * Generated by PaintCode
 * http://www.paintcodeapp.com
 *
 * @author Stephen Haase & Rick Terrill
 */
public class GuitarTunesStyleKit {
    // Colors
    public static int playbackBackground = Color.argb(255, 233, 242, 247);
    public static int rowTitle = Color.argb(255, 64, 64, 64);
    public static int rowSubTitle = Color.argb(255, 143, 142, 148);
    public static int mediaTitle = Color.argb(255, 76, 142, 162);
    public static int fretboardBG = Color.argb(255, 230, 217, 187);
    public static int fretboardAssignees = Color.argb(255, 84, 58, 21);
    public static int goldDark = Color.argb(255, 158, 136, 68);
    public static int goldLight = Color.argb(255, 249, 247, 242);
    public static int storeDark = Color.argb(255, 92, 121, 150);
    public static int storeLight = Color.argb(255, 216, 227, 238);
    public static int mediaTitleSemi = Color.argb(179, 76, 142, 162);
    
    
    private static class GlobalCache {
        static PaintCodeBitmap frettile = new PaintCodeBitmap();
        static PorterDuffXfermode blendModeSourceIn = new PorterDuffXfermode(PorterDuff.Mode.SRC_IN);
        static PorterDuffXfermode blendModeDestinationOut = new PorterDuffXfermode(PorterDuff.Mode.DST_OUT);
    }
    
    // Resizing Behavior
    public enum ResizingBehavior {
        AspectFit, //!< The content is proportionally resized to fit into the target rectangle.
        AspectFill, //!< The content is proportionally resized to completely fill the target rectangle.
        Stretch, //!< The content is stretched to match the entire target rectangle.
        Center, //!< The content is centered in the target rectangle, but it is NOT resized.
    }
    
    // Canvas Drawings
    // Playback
    
    private static class CacheForBtnPlay {
        private static Paint paint = new Paint();
        private static RectF playRect = new RectF();
        private static Path playPath = new Path();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
        private static RectF rectangle2Rect = new RectF();
        private static Path rectangle2Path = new Path();
    }
    
    
    public static void drawBtnPlay(Canvas canvas, boolean isPressed, boolean isShowingPause, float redValue, float greenValue, float blueValue) {
        // General Declarations
        Paint paint = CacheForBtnPlay.paint;
        
        // Local Colors
        int downControls = Color.argb(255, 132, 132, 132);
        
        // Local Variables
        int backgroundColor = isPressed ? downControls : Color.argb(255, (int) (redValue * 255f), (int) (greenValue * 255f), (int) (blueValue * 255f));
        boolean isPlaying = !isShowingPause;
        
        // Play
        if (isPlaying) {
            RectF playRect = CacheForBtnPlay.playRect;
            playRect.set(6.3f, 3.75f, 43.5f, 44.74f);
            Path playPath = CacheForBtnPlay.playPath;
            playPath.reset();
            playPath.moveTo(6.3f, 44.74f);
            playPath.lineTo(6.3f, 3.75f);
            playPath.lineTo(43.5f, 24.25f);
            playPath.lineTo(6.3f, 44.74f);
            playPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            playPath.setFillType(Path.FillType.EVEN_ODD);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(backgroundColor);
            canvas.drawPath(playPath, paint);
        }
        
        // Pause
        if (isShowingPause) {
            // Rectangle
            RectF rectangleRect = CacheForBtnPlay.rectangleRect;
            rectangleRect.set(5f, 4f, 21f, 44f);
            Path rectanglePath = CacheForBtnPlay.rectanglePath;
            rectanglePath.reset();
            rectanglePath.addRect(rectangleRect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(backgroundColor);
            canvas.drawPath(rectanglePath, paint);
            
            // Rectangle 2
            RectF rectangle2Rect = CacheForBtnPlay.rectangle2Rect;
            rectangle2Rect.set(26f, 4f, 42f, 44f);
            Path rectangle2Path = CacheForBtnPlay.rectangle2Path;
            rectangle2Path.reset();
            rectangle2Path.addRect(rectangle2Rect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(backgroundColor);
            canvas.drawPath(rectangle2Path, paint);
        }
    }
    
    private static class CacheForBtnRewind {
        private static Paint paint = new Paint();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF stroke260Rect = new RectF();
        private static Path stroke260Path = new Path();
        private static RectF stroke261Rect = new RectF();
        private static Path stroke261Path = new Path();
    }
    
    
    public static void drawBtnRewind(Canvas canvas, Context context, boolean isPressed, float redValue, float greenValue, float blueValue) {
        // General Declarations
        Paint paint = CacheForBtnRewind.paint;
        
        // Local Colors
        int downControls = Color.argb(255, 132, 132, 132);
        
        // Local Variables
        int backgroundColor = isPressed ? downControls : Color.argb(255, (int) (redValue * 255f), (int) (greenValue * 255f), (int) (blueValue * 255f));
        
        // bezier
        RectF bezierRect = CacheForBtnRewind.bezierRect;
        bezierRect.set(20.15f, 21.43f, 29.19f, 33.71f);
        Path bezierPath = CacheForBtnRewind.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(24.61f, 33.71f);
        bezierPath.cubicTo(27.36f, 33.71f, 29.19f, 31.98f, 29.19f, 29.44f);
        bezierPath.cubicTo(29.19f, 27.09f, 27.58f, 25.42f, 25.31f, 25.42f);
        bezierPath.cubicTo(24.12f, 25.42f, 23.27f, 25.86f, 22.77f, 26.59f);
        bezierPath.lineTo(22.62f, 26.59f);
        bezierPath.lineTo(22.88f, 23.51f);
        bezierPath.lineTo(28.47f, 23.51f);
        bezierPath.lineTo(28.47f, 21.43f);
        bezierPath.lineTo(20.94f, 21.43f);
        bezierPath.lineTo(20.34f, 28.38f);
        bezierPath.lineTo(22.58f, 28.38f);
        bezierPath.cubicTo(23f, 27.7f, 23.7f, 27.3f, 24.63f, 27.3f);
        bezierPath.cubicTo(25.9f, 27.3f, 26.8f, 28.18f, 26.8f, 29.5f);
        bezierPath.cubicTo(26.8f, 30.8f, 25.91f, 31.66f, 24.62f, 31.66f);
        bezierPath.cubicTo(23.49f, 31.66f, 22.61f, 31f, 22.47f, 30f);
        bezierPath.lineTo(20.15f, 30f);
        bezierPath.cubicTo(20.23f, 32.15f, 22f, 33.71f, 24.61f, 33.71f);
        bezierPath.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(backgroundColor);
        canvas.drawPath(bezierPath, paint);
        
        // Play
        {
            // Stroke-260
            RectF stroke260Rect = CacheForBtnRewind.stroke260Rect;
            stroke260Rect.set(21.28f, 1.5f, 30.32f, 14.5f);
            Path stroke260Path = CacheForBtnRewind.stroke260Path;
            stroke260Path.reset();
            stroke260Path.moveTo(30.32f, 1.5f);
            stroke260Path.lineTo(21.28f, 7.5f);
            stroke260Path.lineTo(29.32f, 14.5f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(backgroundColor);
            canvas.drawPath(stroke260Path, paint);
            canvas.restore();
            
            // Stroke-261
            RectF stroke261Rect = CacheForBtnRewind.stroke261Rect;
            stroke261Rect.set(5.22f, 7.35f, 43.39f, 45.5f);
            Path stroke261Path = CacheForBtnRewind.stroke261Path;
            stroke261Path.reset();
            stroke261Path.moveTo(21.28f, 7.51f);
            stroke261Path.cubicTo(33.51f, 6f, 42.99f, 15.32f, 43.37f, 25.8f);
            stroke261Path.cubicTo(43.76f, 36.29f, 35.54f, 45.1f, 25f, 45.49f);
            stroke261Path.cubicTo(14.46f, 45.88f, 5.61f, 37.69f, 5.22f, 27.2f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(backgroundColor);
            canvas.drawPath(stroke261Path, paint);
            canvas.restore();
        }
    }
    
    private static class CacheForBtnForward {
        private static Paint paint = new Paint();
        private static RectF stroke260Rect = new RectF();
        private static Path stroke260Path = new Path();
        private static RectF stroke261Rect = new RectF();
        private static Path stroke261Path = new Path();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    
    public static void drawBtnForward(Canvas canvas, Context context, boolean isPressed, float redValue, float greenValue, float blueValue) {
        // General Declarations
        Paint paint = CacheForBtnForward.paint;
        
        // Local Colors
        int downControls = Color.argb(255, 132, 132, 132);
        
        // Local Variables
        int backgroundColor = isPressed ? downControls : Color.argb(255, (int) (redValue * 255f), (int) (greenValue * 255f), (int) (blueValue * 255f));
        
        // Stroke-260-+-Stroke-261-+-Stroke-262-Copy
        {
            // Stroke-260
            RectF stroke260Rect = CacheForBtnForward.stroke260Rect;
            stroke260Rect.set(18.71f, 1.5f, 27.76f, 14.5f);
            Path stroke260Path = CacheForBtnForward.stroke260Path;
            stroke260Path.reset();
            stroke260Path.moveTo(18.71f, 1.5f);
            stroke260Path.lineTo(27.76f, 7.5f);
            stroke260Path.lineTo(19.72f, 14.5f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(backgroundColor);
            canvas.drawPath(stroke260Path, paint);
            canvas.restore();
            
            // Stroke-261
            RectF stroke261Rect = CacheForBtnForward.stroke261Rect;
            stroke261Rect.set(5.65f, 7.35f, 43.82f, 45.5f);
            Path stroke261Path = CacheForBtnForward.stroke261Path;
            stroke261Path.reset();
            stroke261Path.moveTo(27.76f, 7.51f);
            stroke261Path.cubicTo(15.53f, 6f, 6.05f, 15.31f, 5.66f, 25.8f);
            stroke261Path.cubicTo(5.28f, 36.29f, 13.5f, 45.1f, 24.04f, 45.49f);
            stroke261Path.cubicTo(34.58f, 45.88f, 43.43f, 37.69f, 43.82f, 27.2f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(backgroundColor);
            canvas.drawPath(stroke261Path, paint);
            canvas.restore();
        }
        
        // bezier
        RectF bezierRect = CacheForBtnForward.bezierRect;
        bezierRect.set(15.13f, 20.46f, 35.95f, 33.05f);
        Path bezierPath = CacheForBtnForward.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(18.22f, 27.55f);
        bezierPath.lineTo(19.7f, 27.55f);
        bezierPath.cubicTo(21.05f, 27.55f, 21.87f, 28.19f, 21.87f, 29.24f);
        bezierPath.cubicTo(21.87f, 30.26f, 21f, 30.97f, 19.74f, 30.97f);
        bezierPath.cubicTo(18.46f, 30.97f, 17.6f, 30.33f, 17.53f, 29.31f);
        bezierPath.lineTo(15.13f, 29.31f);
        bezierPath.cubicTo(15.24f, 31.57f, 17.05f, 33.05f, 19.72f, 33.05f);
        bezierPath.cubicTo(22.45f, 33.05f, 24.43f, 31.53f, 24.43f, 29.43f);
        bezierPath.cubicTo(24.43f, 27.85f, 23.4f, 26.76f, 21.75f, 26.58f);
        bezierPath.lineTo(21.75f, 26.43f);
        bezierPath.cubicTo(23.09f, 26.15f, 23.96f, 25.07f, 23.96f, 23.69f);
        bezierPath.cubicTo(23.96f, 21.8f, 22.19f, 20.46f, 19.74f, 20.46f);
        bezierPath.cubicTo(17.12f, 20.46f, 15.44f, 21.89f, 15.35f, 24.15f);
        bezierPath.lineTo(17.67f, 24.15f);
        bezierPath.cubicTo(17.74f, 23.11f, 18.51f, 22.46f, 19.67f, 22.46f);
        bezierPath.cubicTo(20.84f, 22.46f, 21.59f, 23.07f, 21.59f, 24.04f);
        bezierPath.cubicTo(21.59f, 25.02f, 20.82f, 25.68f, 19.68f, 25.68f);
        bezierPath.lineTo(18.22f, 25.68f);
        bezierPath.lineTo(18.22f, 27.55f);
        bezierPath.close();
        bezierPath.moveTo(31.19f, 33.05f);
        bezierPath.cubicTo(34.15f, 33.05f, 35.95f, 30.7f, 35.95f, 26.74f);
        bezierPath.cubicTo(35.95f, 22.77f, 34.13f, 20.46f, 31.19f, 20.46f);
        bezierPath.cubicTo(28.24f, 20.46f, 26.44f, 22.77f, 26.44f, 26.73f);
        bezierPath.cubicTo(26.44f, 30.71f, 28.23f, 33.05f, 31.19f, 33.05f);
        bezierPath.close();
        bezierPath.moveTo(31.19f, 31.01f);
        bezierPath.cubicTo(29.82f, 31.01f, 28.98f, 29.53f, 28.98f, 26.73f);
        bezierPath.cubicTo(28.98f, 23.95f, 29.83f, 22.51f, 31.19f, 22.51f);
        bezierPath.cubicTo(32.56f, 22.51f, 33.41f, 23.94f, 33.41f, 26.73f);
        bezierPath.cubicTo(33.41f, 29.54f, 32.57f, 31.01f, 31.19f, 31.01f);
        bezierPath.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(backgroundColor);
        canvas.drawPath(bezierPath, paint);
    }
    
    private static class CacheForBtnLoopRight {
        private static Paint paint = new Paint();
        private static RectF stroke3Rect = new RectF();
        private static Path stroke3Path = new Path();
        private static RectF triangleRect = new RectF();
        private static Path trianglePath = new Path();
    }
    
    
    public static void drawBtnLoopRight(Canvas canvas) {
        // General Declarations
        Stack<Matrix> currentTransformation = new Stack<Matrix>();
        currentTransformation.push(new Matrix());
        Paint paint = CacheForBtnLoopRight.paint;
        
        // Local Colors
        int loopColor = Color.argb(255, 197, 7, 7);
        
        // loopFlagRight
        {
            canvas.save();
            canvas.translate(27.74f, 8.49f);
            currentTransformation.peek().postTranslate(27.74f, 8.49f);
            
            // Stroke- 3
            RectF stroke3Rect = CacheForBtnLoopRight.stroke3Rect;
            stroke3Rect.set(-0.4f, 0.26f, -0.36f, 24.26f);
            Path stroke3Path = CacheForBtnLoopRight.stroke3Path;
            stroke3Path.reset();
            stroke3Path.moveTo(-0.4f, 0.26f);
            stroke3Path.lineTo(-0.36f, 24.26f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(loopColor);
            canvas.drawPath(stroke3Path, paint);
            canvas.restore();
            
            // Triangle-
            RectF triangleRect = CacheForBtnLoopRight.triangleRect;
            triangleRect.set(-16.2f, 0.81f, -1.26f, 14.99f);
            Path trianglePath = CacheForBtnLoopRight.trianglePath;
            trianglePath.reset();
            trianglePath.moveTo(-16.2f, 7.9f);
            trianglePath.lineTo(-1.26f, 14.99f);
            trianglePath.lineTo(-1.26f, 0.81f);
            trianglePath.lineTo(-16.2f, 7.9f);
            trianglePath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            trianglePath.setFillType(Path.FillType.EVEN_ODD);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(loopColor);
            canvas.drawPath(trianglePath, paint);
            
            canvas.restore();
        }
    }
    
    private static class CacheForBtnLoopLeft {
        private static Paint paint = new Paint();
        private static RectF strokeRect = new RectF();
        private static Path strokePath = new Path();
        private static RectF triangle1Rect = new RectF();
        private static Path triangle1Path = new Path();
    }
    
    
    public static void drawBtnLoopLeft(Canvas canvas) {
        // General Declarations
        Stack<Matrix> currentTransformation = new Stack<Matrix>();
        currentTransformation.push(new Matrix());
        Paint paint = CacheForBtnLoopLeft.paint;
        
        // Local Colors
        int loopColorGreen = Color.argb(255, 63, 160, 55);
        
        // loopFlagLeft
        {
            canvas.save();
            canvas.translate(15.83f, 8.41f);
            currentTransformation.peek().postTranslate(15.83f, 8.41f);
            
            // Stroke-
            RectF strokeRect = CacheForBtnLoopLeft.strokeRect;
            strokeRect.set(0.2f, 0.5f, 0.2f, 24.5f);
            Path strokePath = CacheForBtnLoopLeft.strokePath;
            strokePath.reset();
            strokePath.moveTo(0.2f, 0.5f);
            strokePath.lineTo(0.2f, 24.5f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(loopColorGreen);
            canvas.drawPath(strokePath, paint);
            canvas.restore();
            
            // Triangle-1
            RectF triangle1Rect = CacheForBtnLoopLeft.triangle1Rect;
            triangle1Rect.set(0.73f, 0.5f, 15.7f, 15.77f);
            Path triangle1Path = CacheForBtnLoopLeft.triangle1Path;
            triangle1Path.reset();
            triangle1Path.moveTo(15.7f, 8.14f);
            triangle1Path.lineTo(0.73f, 15.77f);
            triangle1Path.lineTo(0.73f, 0.5f);
            triangle1Path.lineTo(15.7f, 8.14f);
            triangle1Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            triangle1Path.setFillType(Path.FillType.EVEN_ODD);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(loopColorGreen);
            canvas.drawPath(triangle1Path, paint);
            
            canvas.restore();
        }
    }
    
    private static class CacheForBtnLoop {
        private static Paint paint = new Paint();
        private static RectF stroke67Rect = new RectF();
        private static Path stroke67Path = new Path();
        private static RectF stroke68Rect = new RectF();
        private static Path stroke68Path = new Path();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    
    public static void drawBtnLoop(Canvas canvas, boolean isPressed, boolean loopsEnabled) {
        // General Declarations
        Paint paint = CacheForBtnLoop.paint;
        
        // Local Colors
        int downControls = Color.argb(255, 132, 132, 132);
        int upControls = Color.argb(255, 0, 0, 0);
        
        // Local Variables
        int btnDarkColor = isPressed ? downControls : upControls;
        boolean loopsDisabled = !loopsEnabled;
        
        // Stroke-67
        RectF stroke67Rect = CacheForBtnLoop.stroke67Rect;
        stroke67Rect.set(10.5f, 14.52f, 24f, 31.52f);
        Path stroke67Path = CacheForBtnLoop.stroke67Path;
        stroke67Path.reset();
        stroke67Path.moveTo(17f, 14.52f);
        stroke67Path.lineTo(16.5f, 14.52f);
        stroke67Path.cubicTo(13.19f, 14.52f, 10.5f, 17.21f, 10.5f, 20.52f);
        stroke67Path.cubicTo(10.5f, 23.84f, 13.19f, 26.52f, 16.5f, 26.52f);
        stroke67Path.lineTo(24f, 26.52f);
        stroke67Path.lineTo(17.5f, 31.52f);
        stroke67Path.lineTo(17.5f, 26.52f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(1f);
        paint.setStrokeJoin(Paint.Join.ROUND);
        paint.setStrokeCap(Paint.Cap.ROUND);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(btnDarkColor);
        canvas.drawPath(stroke67Path, paint);
        canvas.restore();
        
        // Stroke-68
        RectF stroke68Rect = CacheForBtnLoop.stroke68Rect;
        stroke68Rect.set(20f, 9.57f, 33.5f, 26.52f);
        Path stroke68Path = CacheForBtnLoop.stroke68Path;
        stroke68Path.reset();
        stroke68Path.moveTo(27f, 26.52f);
        stroke68Path.lineTo(27.5f, 26.52f);
        stroke68Path.cubicTo(30.81f, 26.52f, 33.5f, 23.84f, 33.5f, 20.52f);
        stroke68Path.cubicTo(33.5f, 17.21f, 30.81f, 14.52f, 27.5f, 14.52f);
        stroke68Path.lineTo(20f, 14.52f);
        stroke68Path.lineTo(26.5f, 9.57f);
        stroke68Path.lineTo(26.5f, 14.52f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(1f);
        paint.setStrokeJoin(Paint.Join.ROUND);
        paint.setStrokeCap(Paint.Cap.ROUND);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(btnDarkColor);
        canvas.drawPath(stroke68Path, paint);
        canvas.restore();
        
        // Bezier
        if (loopsDisabled) {
            RectF bezierRect = CacheForBtnLoop.bezierRect;
            bezierRect.set(11.5f, 5.5f, 35.5f, 34.5f);
            Path bezierPath = CacheForBtnLoop.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(11.5f, 34.5f);
            bezierPath.lineTo(35.5f, 5.5f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(Color.BLACK);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
        }
    }
    
    private static class CacheForSeekSlider {
        private static Paint paint = new Paint();
        private static PaintCodeGradient gradient = null;
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
        private static RectF strokeRect = new RectF();
        private static Path strokePath = new Path();
        private static RectF triangleRect = new RectF();
        private static Path trianglePath = new Path();
        private static RectF stroke1090Rect = new RectF();
        private static Path stroke1090Path = new Path();
        private static RectF triangle1Rect = new RectF();
        private static Path triangle1Path = new Path();
        private static RectF stroke2Rect = new RectF();
        private static Path stroke2Path = new Path();
        private static RectF triangle2Rect = new RectF();
        private static Path triangle2Path = new Path();
        private static RectF stroke3Rect = new RectF();
        private static Path stroke3Path = new Path();
        private static RectF triangle3Rect = new RectF();
        private static Path triangle3Path = new Path();
        private static RectF ovalRect = new RectF();
        private static Path ovalPath = new Path();
        private static RectF oval3Rect = new RectF();
        private static Path oval3Path = new Path();
        private static PaintCodeRadialGradient oval3PathGradient = new PaintCodeRadialGradient();
        private static RectF oval2Rect = new RectF();
        private static Path oval2Path = new Path();
    }
    
    
    public static void drawSeekSlider(Canvas canvas, boolean isPressed, float redValue, float greenValue, float blueValue, boolean isConnected, float percent, PointF scrollSize, float loopLeft, float loopRight, boolean loopsEnabled, boolean isCompact) {
        // General Declarations
        Stack<Matrix> currentTransformation = new Stack<Matrix>();
        currentTransformation.push(new Matrix());
        Paint paint = CacheForSeekSlider.paint;
        
        // Local Colors
        int loopColorGreen = Color.argb(255, 63, 160, 55);
        int upControls = Color.argb(255, 0, 0, 0);
        int connectedGradient = Color.argb(255, 181, 0, 0);
        int loopColor = Color.argb(255, 197, 7, 7);
        int white = Color.argb(255, 255, 255, 255);
        int connectedColor = Color.argb(255, 255, 0, 0);
        int downControls = Color.argb(255, 132, 132, 132);
        
        // Local Gradients
        if (CacheForSeekSlider.gradient == null)
            CacheForSeekSlider.gradient = new PaintCodeGradient(new int[]{connectedGradient, PaintCodeColor.colorByBlendingColors(connectedGradient, 0.5f, upControls), upControls}, new float[]{0f, 0.6f, 1f});
        PaintCodeGradient gradient = CacheForSeekSlider.gradient;
        
        // Local Variables
        float loopRightX = 15f + loopRight * scrollSize.x;
        float loopFlagsAlpha = loopsEnabled ? 1f : 0.4f;
        float scrollX = 15f + percent * scrollSize.x;
        int foregroundColor = redValue == 1f && greenValue == 1f && blueValue == 1f ? white : upControls;
        boolean isFull = !isCompact;
        int backgroundColor = isPressed ? downControls : Color.argb(255, (int) (redValue * 255f), (int) (greenValue * 255f), (int) (blueValue * 255f));
        float loopLeftX = 15f + loopLeft * scrollSize.x;
        
        // Rectangle
        RectF rectangleRect = CacheForSeekSlider.rectangleRect;
        rectangleRect.set(15f, 27.45f, 15f + scrollSize.x, 27.45f + scrollSize.y);
        Path rectanglePath = CacheForSeekSlider.rectanglePath;
        rectanglePath.reset();
        rectanglePath.addRoundRect(rectangleRect, 2f, 2f, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(backgroundColor);
        canvas.drawPath(rectanglePath, paint);
        
        // loopFlagRight
        if (isFull) {
            canvas.saveLayerAlpha(null, (int) (loopFlagsAlpha * 255f), Canvas.ALL_SAVE_FLAG);
            {
                canvas.save();
                canvas.translate(loopRightX, 1.74f);
                currentTransformation.peek().postTranslate(loopRightX, 1.74f);
                // Stroke-
                RectF strokeRect = CacheForSeekSlider.strokeRect;
                strokeRect.set(-0.4f, 0.26f, -0.36f, 26.26f);
                Path strokePath = CacheForSeekSlider.strokePath;
                strokePath.reset();
                strokePath.moveTo(-0.4f, 0.26f);
                strokePath.lineTo(-0.36f, 26.26f);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(2f);
                paint.setStrokeJoin(Paint.Join.ROUND);
                paint.setStrokeCap(Paint.Cap.ROUND);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(loopColor);
                canvas.drawPath(strokePath, paint);
                canvas.restore();
                
                // Triangle-
                RectF triangleRect = CacheForSeekSlider.triangleRect;
                triangleRect.set(-15.2f, 0.76f, -1.2f, 13.76f);
                Path trianglePath = CacheForSeekSlider.trianglePath;
                trianglePath.reset();
                trianglePath.moveTo(-15.2f, 7.26f);
                trianglePath.lineTo(-1.2f, 13.76f);
                trianglePath.lineTo(-1.2f, 0.76f);
                trianglePath.lineTo(-15.2f, 7.26f);
                trianglePath.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                trianglePath.setFillType(Path.FillType.EVEN_ODD);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(loopColor);
                canvas.drawPath(trianglePath, paint);
                canvas.restore();
            }
            canvas.restore();
        }
        
        // loopFlagLeft
        if (isFull) {
            canvas.saveLayerAlpha(null, (int) (loopFlagsAlpha * 255f), Canvas.ALL_SAVE_FLAG);
            {
                canvas.save();
                canvas.translate(loopLeftX, 1.5f);
                currentTransformation.peek().postTranslate(loopLeftX, 1.5f);
                // Stroke-1090
                RectF stroke1090Rect = CacheForSeekSlider.stroke1090Rect;
                stroke1090Rect.set(0.2f, 0.5f, 0.2f, 26.5f);
                Path stroke1090Path = CacheForSeekSlider.stroke1090Path;
                stroke1090Path.reset();
                stroke1090Path.moveTo(0.2f, 0.5f);
                stroke1090Path.lineTo(0.2f, 26.5f);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(2f);
                paint.setStrokeJoin(Paint.Join.ROUND);
                paint.setStrokeCap(Paint.Cap.ROUND);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(loopColorGreen);
                canvas.drawPath(stroke1090Path, paint);
                canvas.restore();
                
                // Triangle-1
                RectF triangle1Rect = CacheForSeekSlider.triangle1Rect;
                triangle1Rect.set(0.7f, 0.5f, 14.7f, 14.5f);
                Path triangle1Path = CacheForSeekSlider.triangle1Path;
                triangle1Path.reset();
                triangle1Path.moveTo(14.7f, 7.5f);
                triangle1Path.lineTo(0.7f, 14.5f);
                triangle1Path.lineTo(0.7f, 0.5f);
                triangle1Path.lineTo(14.7f, 7.5f);
                triangle1Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                triangle1Path.setFillType(Path.FillType.EVEN_ODD);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(loopColorGreen);
                canvas.drawPath(triangle1Path, paint);
                canvas.restore();
            }
            canvas.restore();
        }
        
        // loopFlagLeftCompact
        if (isCompact) {
            canvas.saveLayerAlpha(null, (int) (loopFlagsAlpha * 255f), Canvas.ALL_SAVE_FLAG);
            {
                canvas.save();
                canvas.translate(loopLeftX + 0.92f, 13.15f);
                currentTransformation.peek().postTranslate(loopLeftX + 0.92f, 13.15f);
                // Stroke- 2
                RectF stroke2Rect = CacheForSeekSlider.stroke2Rect;
                stroke2Rect.set(-0.31f, 0.85f, -0.31f, 14.85f);
                Path stroke2Path = CacheForSeekSlider.stroke2Path;
                stroke2Path.reset();
                stroke2Path.moveTo(-0.31f, 0.85f);
                stroke2Path.lineTo(-0.31f, 14.85f);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(2f);
                paint.setStrokeJoin(Paint.Join.ROUND);
                paint.setStrokeCap(Paint.Cap.ROUND);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(loopColorGreen);
                canvas.drawPath(stroke2Path, paint);
                canvas.restore();
                
                // Triangle- 2
                RectF triangle2Rect = CacheForSeekSlider.triangle2Rect;
                triangle2Rect.set(0.19f, -0.15f, 14.19f, 13.85f);
                Path triangle2Path = CacheForSeekSlider.triangle2Path;
                triangle2Path.reset();
                triangle2Path.moveTo(14.19f, 6.85f);
                triangle2Path.lineTo(0.19f, 13.85f);
                triangle2Path.lineTo(0.19f, -0.15f);
                triangle2Path.lineTo(14.19f, 6.85f);
                triangle2Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                triangle2Path.setFillType(Path.FillType.EVEN_ODD);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(loopColorGreen);
                canvas.drawPath(triangle2Path, paint);
                canvas.restore();
            }
            canvas.restore();
        }
        
        // loopFlagRightCompact
        if (isCompact) {
            canvas.saveLayerAlpha(null, (int) (loopFlagsAlpha * 255f), Canvas.ALL_SAVE_FLAG);
            {
                canvas.save();
                canvas.translate(loopRightX - 0.98f, 13.75f);
                currentTransformation.peek().postTranslate(loopRightX - 0.98f, 13.75f);
                // Stroke- 3
                RectF stroke3Rect = CacheForSeekSlider.stroke3Rect;
                stroke3Rect.set(-0.02f, 0.25f, -0.02f, 14.21f);
                Path stroke3Path = CacheForSeekSlider.stroke3Path;
                stroke3Path.reset();
                stroke3Path.moveTo(-0.02f, 0.25f);
                stroke3Path.lineTo(-0.02f, 14.21f);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(2f);
                paint.setStrokeJoin(Paint.Join.ROUND);
                paint.setStrokeCap(Paint.Cap.ROUND);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(loopColor);
                canvas.drawPath(stroke3Path, paint);
                canvas.restore();
                
                // Triangle- 3
                RectF triangle3Rect = CacheForSeekSlider.triangle3Rect;
                triangle3Rect.set(-15.02f, -0.25f, -1.02f, 12.75f);
                Path triangle3Path = CacheForSeekSlider.triangle3Path;
                triangle3Path.reset();
                triangle3Path.moveTo(-15.02f, 6.25f);
                triangle3Path.lineTo(-1.02f, 12.75f);
                triangle3Path.lineTo(-1.02f, -0.25f);
                triangle3Path.lineTo(-15.02f, 6.25f);
                triangle3Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                triangle3Path.setFillType(Path.FillType.EVEN_ODD);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(loopColor);
                canvas.drawPath(triangle3Path, paint);
                canvas.restore();
            }
            canvas.restore();
        }
        
        // scroller
        {
            canvas.save();
            canvas.translate(scrollX, 20.52f);
            currentTransformation.peek().postTranslate(scrollX, 20.52f);
            
            // Oval
            RectF ovalRect = CacheForSeekSlider.ovalRect;
            ovalRect.set(-9.06f, -0.52f, 8.94f, 17.48f);
            Path ovalPath = CacheForSeekSlider.ovalPath;
            ovalPath.reset();
            ovalPath.addOval(ovalRect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(foregroundColor);
            canvas.drawPath(ovalPath, paint);
            
            // Oval 3
            if (isConnected) {
                RectF oval3Rect = CacheForSeekSlider.oval3Rect;
                oval3Rect.set(-8.17f, 0.48f, 7.83f, 16.48f);
                Path oval3Path = CacheForSeekSlider.oval3Path;
                oval3Path.reset();
                oval3Path.addOval(oval3Rect, Path.Direction.CW);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setShader(CacheForSeekSlider.oval3PathGradient.get(gradient, -0.17f, 8.48f, 2.27f, -0.17f, 8.48f, 7.53f));
                canvas.drawPath(oval3Path, paint);
            }
            
            // Oval 2
            if (isConnected) {
                RectF oval2Rect = CacheForSeekSlider.oval2Rect;
                oval2Rect.set(-2.17f, 6.48f, 1.83f, 10.48f);
                Path oval2Path = CacheForSeekSlider.oval2Path;
                oval2Path.reset();
                oval2Path.addOval(oval2Rect, Path.Direction.CW);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(connectedColor);
                canvas.drawPath(oval2Path, paint);
            }
            
            canvas.restore();
        }
    }
    
    private static class CacheForBtnSettings {
        private static Paint paint = new Paint();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF ovalRect = new RectF();
        private static Path ovalPath = new Path();
    }
    
    
    public static void drawBtnSettings(Canvas canvas, boolean isPressed) {
        // General Declarations
        Paint paint = CacheForBtnSettings.paint;
        
        // Local Colors
        int navColorDown = Color.argb(255, 205, 205, 205);
        int navColorUp = Color.argb(255, 255, 255, 255);
        
        // Local Variables
        int btnNavColor = isPressed ? navColorDown : navColorUp;
        
        // Group 2
        {
            // Bezier
            RectF bezierRect = CacheForBtnSettings.bezierRect;
            bezierRect.set(8.5f, 6.5f, 36.5f, 34.5f);
            Path bezierPath = CacheForBtnSettings.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(32.55f, 22.33f);
            bezierPath.lineTo(36.5f, 22.33f);
            bezierPath.lineTo(36.5f, 18.67f);
            bezierPath.lineTo(32.55f, 18.67f);
            bezierPath.cubicTo(32.29f, 17.62f, 31.88f, 16.02f, 31.33f, 15.12f);
            bezierPath.lineTo(34.12f, 12.32f);
            bezierPath.lineTo(30.68f, 8.88f);
            bezierPath.lineTo(27.88f, 11.67f);
            bezierPath.cubicTo(26.98f, 11.12f, 25.38f, 10.71f, 24.33f, 10.45f);
            bezierPath.lineTo(24.33f, 6.5f);
            bezierPath.lineTo(20.67f, 6.5f);
            bezierPath.lineTo(20.67f, 10.45f);
            bezierPath.cubicTo(19.62f, 10.71f, 18.02f, 11.12f, 17.12f, 11.67f);
            bezierPath.lineTo(14.32f, 8.88f);
            bezierPath.lineTo(10.88f, 12.32f);
            bezierPath.lineTo(13.67f, 15.12f);
            bezierPath.cubicTo(13.12f, 16.02f, 12.71f, 17.62f, 12.45f, 18.67f);
            bezierPath.lineTo(8.5f, 18.67f);
            bezierPath.lineTo(8.5f, 22.33f);
            bezierPath.lineTo(12.45f, 22.33f);
            bezierPath.cubicTo(12.71f, 23.38f, 13.12f, 24.98f, 13.67f, 25.88f);
            bezierPath.lineTo(10.88f, 28.68f);
            bezierPath.lineTo(14.32f, 32.12f);
            bezierPath.lineTo(17.12f, 29.32f);
            bezierPath.cubicTo(18.02f, 29.88f, 19.62f, 30.29f, 20.67f, 30.55f);
            bezierPath.lineTo(20.67f, 34.5f);
            bezierPath.lineTo(24.33f, 34.5f);
            bezierPath.lineTo(24.33f, 30.55f);
            bezierPath.cubicTo(25.38f, 30.29f, 26.98f, 29.88f, 27.88f, 29.33f);
            bezierPath.lineTo(30.68f, 32.12f);
            bezierPath.lineTo(34.12f, 28.68f);
            bezierPath.lineTo(31.33f, 25.88f);
            bezierPath.cubicTo(31.88f, 24.98f, 32.29f, 23.38f, 32.55f, 22.33f);
            bezierPath.lineTo(32.55f, 22.33f);
            bezierPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnNavColor);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
            
            // Oval
            RectF ovalRect = CacheForBtnSettings.ovalRect;
            ovalRect.set(17.5f, 15.5f, 27.5f, 25.5f);
            Path ovalPath = CacheForBtnSettings.ovalPath;
            ovalPath.reset();
            ovalPath.addOval(ovalRect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnNavColor);
            canvas.drawPath(ovalPath, paint);
            canvas.restore();
        }
    }
    
    private static class CacheForBtnLibrary {
        private static Paint paint = new Paint();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
    }
    
    
    public static void drawBtnLibrary(Canvas canvas, boolean isPressed) {
        // General Declarations
        Paint paint = CacheForBtnLibrary.paint;
        
        // Local Colors
        int navColorDown = Color.argb(255, 205, 205, 205);
        int navColorUp = Color.argb(255, 255, 255, 255);
        
        // Local Variables
        int btnNavColor = isPressed ? navColorDown : navColorUp;
        
        // Group 2
        {
            // Bezier
            RectF bezierRect = CacheForBtnLibrary.bezierRect;
            bezierRect.set(8.5f, 7.5f, 36.5f, 33.5f);
            Path bezierPath = CacheForBtnLibrary.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(22.5f, 12.05f);
            bezierPath.cubicTo(22.5f, 9.54f, 29.05f, 7.5f, 36.5f, 7.5f);
            bezierPath.lineTo(36.5f, 28.95f);
            bezierPath.cubicTo(29.05f, 28.95f, 22.5f, 30.99f, 22.5f, 33.5f);
            bezierPath.cubicTo(22.5f, 30.99f, 15.95f, 28.95f, 8.5f, 28.95f);
            bezierPath.lineTo(8.5f, 7.5f);
            bezierPath.cubicTo(15.95f, 7.5f, 22.5f, 9.54f, 22.5f, 12.05f);
            bezierPath.lineTo(22.5f, 12.05f);
            bezierPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnNavColor);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
            
            // Bezier 2
            RectF bezier2Rect = CacheForBtnLibrary.bezier2Rect;
            bezier2Rect.set(22.5f, 12.05f, 22.5f, 33.34f);
            Path bezier2Path = CacheForBtnLibrary.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(22.5f, 12.05f);
            bezier2Path.lineTo(22.5f, 33.34f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnNavColor);
            canvas.drawPath(bezier2Path, paint);
            canvas.restore();
        }
    }
    
    private static class CacheForBtnPrevious {
        private static Paint paint = new Paint();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    
    public static void drawBtnPrevious(Canvas canvas, boolean isPressed, float redValue, float greenValue, float blueValue) {
        // General Declarations
        Paint paint = CacheForBtnPrevious.paint;
        
        // Local Colors
        int downControls = Color.argb(255, 132, 132, 132);
        
        // Local Variables
        int backgroundColor = isPressed ? downControls : Color.argb(255, (int) (redValue * 255f), (int) (greenValue * 255f), (int) (blueValue * 255f));
        
        // Bezier
        RectF bezierRect = CacheForBtnPrevious.bezierRect;
        bezierRect.set(1f, 2f, 44.95f, 46f);
        Path bezierPath = CacheForBtnPrevious.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(44.46f, 2.08f);
        bezierPath.cubicTo(44.13f, 1.93f, 43.74f, 1.99f, 43.47f, 2.23f);
        bezierPath.lineTo(28.44f, 15.54f);
        bezierPath.lineTo(28.44f, 4.75f);
        bezierPath.cubicTo(28.5f, 4.4f, 28.3f, 4.09f, 27.99f, 3.93f);
        bezierPath.cubicTo(27.68f, 3.78f, 27.31f, 3.81f, 27.03f, 4.02f);
        bezierPath.lineTo(1.37f, 23.27f);
        bezierPath.cubicTo(1.14f, 23.44f, 1f, 23.71f, 1f, 24f);
        bezierPath.cubicTo(1f, 24.29f, 1.14f, 24.56f, 1.37f, 24.73f);
        bezierPath.lineTo(27.03f, 43.98f);
        bezierPath.cubicTo(27.31f, 44.19f, 27.68f, 44.22f, 27.99f, 44.07f);
        bezierPath.cubicTo(28.3f, 43.91f, 28.5f, 43.6f, 28.44f, 43.25f);
        bezierPath.lineTo(28.44f, 32.46f);
        bezierPath.lineTo(43.47f, 45.77f);
        bezierPath.cubicTo(43.64f, 45.92f, 43.86f, 46f, 44.08f, 46f);
        bezierPath.cubicTo(44.21f, 46f, 44.34f, 45.97f, 44.46f, 45.92f);
        bezierPath.cubicTo(44.79f, 45.77f, 45f, 45.44f, 44.94f, 45.08f);
        bezierPath.lineTo(44.94f, 2.92f);
        bezierPath.cubicTo(45f, 2.56f, 44.79f, 2.23f, 44.46f, 2.08f);
        bezierPath.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezierPath.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(backgroundColor);
        canvas.drawPath(bezierPath, paint);
    }
    
    private static class CacheForBtnNext {
        private static Paint paint = new Paint();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    
    public static void drawBtnNext(Canvas canvas, boolean isPressed, float redValue, float greenValue, float blueValue) {
        // General Declarations
        Paint paint = CacheForBtnNext.paint;
        
        // Local Colors
        int downControls = Color.argb(255, 132, 132, 132);
        
        // Local Variables
        int backgroundColor = isPressed ? downControls : Color.argb(255, (int) (redValue * 255f), (int) (greenValue * 255f), (int) (blueValue * 255f));
        
        // Bezier
        RectF bezierRect = CacheForBtnNext.bezierRect;
        bezierRect.set(3f, 2f, 47f, 46f);
        Path bezierPath = CacheForBtnNext.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(46.63f, 23.27f);
        bezierPath.lineTo(20.97f, 4.02f);
        bezierPath.cubicTo(20.69f, 3.81f, 20.32f, 3.78f, 20.01f, 3.93f);
        bezierPath.cubicTo(19.7f, 4.09f, 19.5f, 4.4f, 19.5f, 4.75f);
        bezierPath.lineTo(19.5f, 15.54f);
        bezierPath.lineTo(4.53f, 2.23f);
        bezierPath.cubicTo(4.26f, 1.99f, 3.87f, 1.93f, 3.54f, 2.08f);
        bezierPath.cubicTo(3.21f, 2.23f, 3f, 2.56f, 3f, 2.92f);
        bezierPath.lineTo(3f, 45.08f);
        bezierPath.cubicTo(3f, 45.45f, 3.21f, 45.77f, 3.54f, 45.92f);
        bezierPath.cubicTo(3.66f, 45.98f, 3.79f, 46f, 3.92f, 46f);
        bezierPath.cubicTo(4.14f, 46f, 4.35f, 45.92f, 4.53f, 45.77f);
        bezierPath.lineTo(19.5f, 32.46f);
        bezierPath.lineTo(19.5f, 43.25f);
        bezierPath.cubicTo(19.5f, 43.6f, 19.7f, 43.92f, 20.01f, 44.07f);
        bezierPath.cubicTo(20.32f, 44.23f, 20.69f, 44.19f, 20.97f, 43.98f);
        bezierPath.lineTo(46.63f, 24.73f);
        bezierPath.cubicTo(46.86f, 24.56f, 47f, 24.29f, 47f, 24f);
        bezierPath.cubicTo(47f, 23.71f, 46.86f, 23.44f, 46.63f, 23.27f);
        bezierPath.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezierPath.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(backgroundColor);
        canvas.drawPath(bezierPath, paint);
    }
    
    private static class CacheForBtnPlus {
        private static Paint paint = new Paint();
        private static RectF ovalRect = new RectF();
        private static Path ovalPath = new Path();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
    }
    
    
    public static void drawBtnPlus(Canvas canvas, boolean isPressed) {
        // General Declarations
        Paint paint = CacheForBtnPlus.paint;
        
        // Local Colors
        int downControls = Color.argb(255, 132, 132, 132);
        int upControls = Color.argb(255, 0, 0, 0);
        
        // Local Variables
        int btnDarkColor = isPressed ? downControls : upControls;
        
        // Oval
        RectF ovalRect = CacheForBtnPlus.ovalRect;
        ovalRect.set(11f, 11f, 33f, 33f);
        Path ovalPath = CacheForBtnPlus.ovalPath;
        ovalPath.reset();
        ovalPath.addOval(ovalRect, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(1f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(btnDarkColor);
        canvas.drawPath(ovalPath, paint);
        canvas.restore();
        
        // Bezier
        RectF bezierRect = CacheForBtnPlus.bezierRect;
        bezierRect.set(22f, 15.98f, 22f, 27.98f);
        Path bezierPath = CacheForBtnPlus.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(22f, 15.98f);
        bezierPath.lineTo(22f, 27.98f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(1f);
        paint.setStrokeJoin(Paint.Join.ROUND);
        paint.setStrokeCap(Paint.Cap.ROUND);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(btnDarkColor);
        canvas.drawPath(bezierPath, paint);
        canvas.restore();
        
        // Bezier 2
        RectF bezier2Rect = CacheForBtnPlus.bezier2Rect;
        bezier2Rect.set(16f, 21.98f, 28f, 21.98f);
        Path bezier2Path = CacheForBtnPlus.bezier2Path;
        bezier2Path.reset();
        bezier2Path.moveTo(28f, 21.98f);
        bezier2Path.lineTo(16f, 21.98f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(1f);
        paint.setStrokeJoin(Paint.Join.ROUND);
        paint.setStrokeCap(Paint.Cap.ROUND);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(btnDarkColor);
        canvas.drawPath(bezier2Path, paint);
        canvas.restore();
    }
    
    private static class CacheForBtnGuitarPart {
        private static Paint paint = new Paint();
        private static RectF rectangle5Rect = new RectF();
        private static Path rectangle5Path = new Path();
        private static RectF rectangle4Rect = new RectF();
        private static Path rectangle4Path = new Path();
    }
    
    
    public static void drawBtnGuitarPart(Canvas canvas, RectF frame, boolean isPressed) {
        // General Declarations
        Paint paint = CacheForBtnGuitarPart.paint;
        
        // Local Colors
        int gold = Color.argb(255, 158, 136, 68);
        
        // Rectangle 5
        RectF rectangle5Rect = CacheForBtnGuitarPart.rectangle5Rect;
        rectangle5Rect.set(frame.left + 2f,
            frame.top + 2f,
            frame.left + 2f + (float) Math.floor((frame.width() - 2f) * 0.98425f + 0.5f),
            frame.top + 2f + (float) Math.floor((frame.height() - 2f) * 0.94595f + 0.5f));
        Path rectangle5Path = CacheForBtnGuitarPart.rectangle5Path;
        rectangle5Path.reset();
        rectangle5Path.addRoundRect(rectangle5Rect, 4f, 4f, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(Color.WHITE);
        canvas.drawPath(rectangle5Path, paint);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(1f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(gold);
        canvas.drawPath(rectangle5Path, paint);
        canvas.restore();
        
        // Rectangle 4
        if (isPressed) {
            RectF rectangle4Rect = CacheForBtnGuitarPart.rectangle4Rect;
            rectangle4Rect.set(frame.left + 2f,
                frame.top + 2f,
                frame.left + 2f + (float) Math.floor((frame.width() - 2f) * 0.98425f + 0.5f),
                frame.top + 2f + (float) Math.floor((frame.height() - 2f) * 0.94595f + 0.5f));
            Path rectangle4Path = CacheForBtnGuitarPart.rectangle4Path;
            rectangle4Path.reset();
            rectangle4Path.addRoundRect(rectangle4Rect, 4f, 4f, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(gold);
            canvas.drawPath(rectangle4Path, paint);
        }
    }
    
    private static class CacheForMarkerLine {
        private static Paint paint = new Paint();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    
    public static void drawMarkerLine(Canvas canvas) {
        // General Declarations
        Paint paint = CacheForMarkerLine.paint;
        
        // Bezier
        RectF bezierRect = CacheForMarkerLine.bezierRect;
        bezierRect.set(1.5f, 0.5f, 1.5f, 19.5f);
        Path bezierPath = CacheForMarkerLine.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(1.5f, 19.5f);
        bezierPath.lineTo(1.5f, 0.5f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(1f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(Color.BLACK);
        canvas.drawPath(bezierPath, paint);
        canvas.restore();
    }
    
    private static class CacheForPlaybackBG {
        private static Paint paint = new Paint();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
    }
    
    
    public static void drawPlaybackBG(Canvas canvas, RectF frame) {
        // General Declarations
        Paint paint = CacheForPlaybackBG.paint;
        
        // Rectangle
        RectF rectangleRect = CacheForPlaybackBG.rectangleRect;
        rectangleRect.set(frame.left + 9f,
            frame.top + 3f,
            frame.left + 9f + (float) Math.floor((frame.width() - 9f) * 0.98851f + 0.5f),
            frame.top + 3f + (float) Math.floor((frame.height() - 3f) * 0.9916f + 0.5f));
        Path rectanglePath = CacheForPlaybackBG.rectanglePath;
        rectanglePath.reset();
        rectanglePath.addRoundRect(rectangleRect, 8f, 8f, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(GuitarTunesStyleKit.playbackBackground);
        canvas.drawPath(rectanglePath, paint);
    }
    
    private static class CacheForBtnFavorite {
        private static Paint paint = new Paint();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF selectedRect = new RectF();
        private static Path selectedPath = new Path();
    }
    
    
    public static void drawBtnFavorite(Canvas canvas, boolean isPressed) {
        // General Declarations
        Paint paint = CacheForBtnFavorite.paint;
        
        // Local Colors
        int favorite = Color.argb(255, 234, 24, 109);
        
        // Bezier
        RectF bezierRect = CacheForBtnFavorite.bezierRect;
        bezierRect.set(9.57f, 8.57f, 33.3f, 33.31f);
        Path bezierPath = CacheForBtnFavorite.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(21.43f, 33.31f);
        bezierPath.cubicTo(21.43f, 33.31f, 33.3f, 24.13f, 33.3f, 15.43f);
        bezierPath.cubicTo(33.3f, 6.74f, 22.77f, 6.07f, 21.43f, 14.76f);
        bezierPath.cubicTo(20.1f, 6.07f, 9.57f, 6.74f, 9.57f, 16.1f);
        bezierPath.cubicTo(9.57f, 25.46f, 21.43f, 33.31f, 21.43f, 33.31f);
        bezierPath.lineTo(21.43f, 33.31f);
        bezierPath.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(1f);
        paint.setStrokeJoin(Paint.Join.ROUND);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(favorite);
        canvas.drawPath(bezierPath, paint);
        canvas.restore();
        
        // selected
        if (isPressed) {
            RectF selectedRect = CacheForBtnFavorite.selectedRect;
            selectedRect.set(9.57f, 8.57f, 33.3f, 33.31f);
            Path selectedPath = CacheForBtnFavorite.selectedPath;
            selectedPath.reset();
            selectedPath.moveTo(21.43f, 33.31f);
            selectedPath.cubicTo(21.43f, 33.31f, 33.3f, 24.13f, 33.3f, 15.43f);
            selectedPath.cubicTo(33.3f, 6.74f, 22.77f, 6.07f, 21.43f, 14.76f);
            selectedPath.cubicTo(20.1f, 6.07f, 9.57f, 6.74f, 9.57f, 16.1f);
            selectedPath.cubicTo(9.57f, 25.46f, 21.43f, 33.31f, 21.43f, 33.31f);
            selectedPath.lineTo(21.43f, 33.31f);
            selectedPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(favorite);
            canvas.drawPath(selectedPath, paint);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(favorite);
            canvas.drawPath(selectedPath, paint);
            canvas.restore();
        }
    }
    
    private static class CacheForBtnTuner {
        private static Paint paint = new Paint();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF ovalRect = new RectF();
        private static Path ovalPath = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
        private static RectF bezier4Rect = new RectF();
        private static Path bezier4Path = new Path();
        private static RectF bezier5Rect = new RectF();
        private static Path bezier5Path = new Path();
        private static RectF bezier6Rect = new RectF();
        private static Path bezier6Path = new Path();
        private static RectF bezier7Rect = new RectF();
        private static Path bezier7Path = new Path();
        private static RectF bezier8Rect = new RectF();
        private static Path bezier8Path = new Path();
    }
    
    
    public static void drawBtnTuner(Canvas canvas, boolean hasAlternateTuning) {
        // General Declarations
        Paint paint = CacheForBtnTuner.paint;
        
        // Local Colors
        int tunerAlternate = Color.argb(255, 227, 54, 54);
        int tunerStandard = Color.argb(255, 0, 0, 0);
        
        // Local Variables
        int tunerColor = hasAlternateTuning ? tunerAlternate : tunerStandard;
        
        // Group 2
        {
            // Bezier
            RectF bezierRect = CacheForBtnTuner.bezierRect;
            bezierRect.set(7.65f, 9.19f, 19.99f, 19.71f);
            Path bezierPath = CacheForBtnTuner.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(19.98f, 9.19f);
            bezierPath.cubicTo(15.48f, 9.51f, 11.28f, 10.92f, 7.65f, 13.17f);
            bezierPath.lineTo(14.19f, 19.71f);
            bezierPath.cubicTo(15.98f, 18.87f, 17.93f, 18.32f, 19.99f, 18.1f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(tunerColor);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
            
            // Bezier 2
            RectF bezier2Rect = CacheForBtnTuner.bezier2Rect;
            bezier2Rect.set(23.91f, 9.18f, 36.28f, 19.71f);
            Path bezier2Path = CacheForBtnTuner.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(23.94f, 18.1f);
            bezier2Path.cubicTo(25.99f, 18.32f, 27.94f, 18.87f, 29.73f, 19.71f);
            bezier2Path.lineTo(36.28f, 13.17f);
            bezier2Path.cubicTo(32.63f, 10.92f, 28.43f, 9.5f, 23.91f, 9.18f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(tunerColor);
            canvas.drawPath(bezier2Path, paint);
            canvas.restore();
            
            // Oval
            RectF ovalRect = CacheForBtnTuner.ovalRect;
            ovalRect.set(19.35f, 23.15f, 24.55f, 28.35f);
            Path ovalPath = CacheForBtnTuner.ovalPath;
            ovalPath.reset();
            ovalPath.addOval(ovalRect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(tunerColor);
            canvas.drawPath(ovalPath, paint);
            canvas.restore();
            
            // Bezier 3
            RectF bezier3Rect = CacheForBtnTuner.bezier3Rect;
            bezier3Rect.set(13.66f, 13.48f, 20.84f, 23.41f);
            Path bezier3Path = CacheForBtnTuner.bezier3Path;
            bezier3Path.reset();
            bezier3Path.moveTo(20.84f, 23.41f);
            bezier3Path.lineTo(13.66f, 13.48f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(tunerColor);
            canvas.drawPath(bezier3Path, paint);
            canvas.restore();
            
            // Bezier 4
            RectF bezier4Rect = CacheForBtnTuner.bezier4Rect;
            bezier4Rect.set(21.95f, 3.65f, 21.95f, 4.95f);
            Path bezier4Path = CacheForBtnTuner.bezier4Path;
            bezier4Path.reset();
            bezier4Path.moveTo(21.95f, 3.65f);
            bezier4Path.lineTo(21.95f, 4.95f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(tunerColor);
            canvas.drawPath(bezier4Path, paint);
            canvas.restore();
            
            // Bezier 5
            RectF bezier5Rect = CacheForBtnTuner.bezier5Rect;
            bezier5Rect.set(21.95f, 7.55f, 21.95f, 8.85f);
            Path bezier5Path = CacheForBtnTuner.bezier5Path;
            bezier5Path.reset();
            bezier5Path.moveTo(21.95f, 7.55f);
            bezier5Path.lineTo(21.95f, 8.85f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(tunerColor);
            canvas.drawPath(bezier5Path, paint);
            canvas.restore();
            
            // Bezier 6
            RectF bezier6Rect = CacheForBtnTuner.bezier6Rect;
            bezier6Rect.set(21.95f, 11.45f, 21.95f, 12.75f);
            Path bezier6Path = CacheForBtnTuner.bezier6Path;
            bezier6Path.reset();
            bezier6Path.moveTo(21.95f, 11.45f);
            bezier6Path.lineTo(21.95f, 12.75f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(tunerColor);
            canvas.drawPath(bezier6Path, paint);
            canvas.restore();
            
            // Bezier 7
            RectF bezier7Rect = CacheForBtnTuner.bezier7Rect;
            bezier7Rect.set(21.95f, 15.35f, 21.95f, 16.65f);
            Path bezier7Path = CacheForBtnTuner.bezier7Path;
            bezier7Path.reset();
            bezier7Path.moveTo(21.95f, 15.35f);
            bezier7Path.lineTo(21.95f, 16.65f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(tunerColor);
            canvas.drawPath(bezier7Path, paint);
            canvas.restore();
            
            // Bezier 8
            RectF bezier8Rect = CacheForBtnTuner.bezier8Rect;
            bezier8Rect.set(21.95f, 19.25f, 21.95f, 20.55f);
            Path bezier8Path = CacheForBtnTuner.bezier8Path;
            bezier8Path.reset();
            bezier8Path.moveTo(21.95f, 19.25f);
            bezier8Path.lineTo(21.95f, 20.55f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(tunerColor);
            canvas.drawPath(bezier8Path, paint);
            canvas.restore();
        }
    }
    
    
    
    
    public static void drawSpacer(Canvas canvas) {
        // Empty.
    }
    
    private static class CacheForTempoHeader {
        private static Paint paint = new Paint();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    
    public static void drawTempoHeader(Canvas canvas, RectF frame) {
        // General Declarations
        Paint paint = CacheForTempoHeader.paint;
        
        // Local Colors
        int libraryHeaderBG = Color.argb(255, 250, 250, 250);
        
        // Rectangle
        RectF rectangleRect = CacheForTempoHeader.rectangleRect;
        rectangleRect.set(frame.left,
            frame.top,
            frame.left + (float) Math.floor(frame.width() + 0.5f),
            frame.top + (float) Math.floor(frame.height() + 0.5f));
        Path rectanglePath = CacheForTempoHeader.rectanglePath;
        rectanglePath.reset();
        rectanglePath.moveTo(rectangleRect.left, rectangleRect.top);
        rectanglePath.lineTo(rectangleRect.right, rectangleRect.top);
        rectanglePath.lineTo(rectangleRect.right, rectangleRect.bottom);
        rectanglePath.lineTo(rectangleRect.left, rectangleRect.bottom);
        rectanglePath.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(libraryHeaderBG);
        canvas.drawPath(rectanglePath, paint);
        
        // Bezier
        RectF bezierRect = CacheForTempoHeader.bezierRect;
        bezierRect.set(frame.left,
            frame.top + 43.56f,
            frame.left + 43.56f,
            frame.top + 44f);
        Path bezierPath = CacheForTempoHeader.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(frame.left, frame.top + frame.height());
        bezierPath.lineTo(frame.left + frame.width() * 0.99f, frame.top + frame.height() * 0.99f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(libraryHeaderBG);
        canvas.drawPath(bezierPath, paint);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(1f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(Color.GRAY);
        canvas.drawPath(bezierPath, paint);
        canvas.restore();
    }
    
    private static class CacheForBtnPreviousCompact {
        private static Paint paint = new Paint();
        private static RectF group = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    
    public static void drawBtnPreviousCompact(Canvas canvas, RectF frame, boolean isPressed) {
        // General Declarations
        Paint paint = CacheForBtnPreviousCompact.paint;
        
        // Local Colors
        int upColor = Color.argb(255, 76, 142, 162);
        int downColor = Color.argb(255, 63, 113, 129);
        
        // Local Variables
        int btnColor = isPressed ? downColor : upColor;
        
        // Group
        {
            RectF group = CacheForBtnPreviousCompact.group;
            group.set(frame.left + (float) Math.floor(frame.width() * 0.29545f + 0.5f),
                frame.top + (float) Math.floor(frame.height() * 0.31818f + 0.5f) + 0f,
                frame.left + (float) Math.floor(frame.width() * 0.65909f + 0.5f),
                frame.top + (float) Math.floor(frame.height() * 0.65909f + 0.5f) + 0f);
            
            // Bezier
            RectF bezierRect = CacheForBtnPreviousCompact.bezierRect;
            bezierRect.set(group.left,
                group.top,
                group.left + (float) Math.floor(group.width() + 0.5f),
                group.top + (float) Math.floor(group.height() + 0.5f));
            Path bezierPath = CacheForBtnPreviousCompact.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(group.left + group.width() * 0.98875f, group.top + group.height() * 0.00184f);
            bezierPath.cubicTo(group.left + group.width() * 0.98128f, group.top + group.height() * -0.00153f, group.left + group.width() * 0.97252f, group.top + group.height() * -0.0002f, group.left + group.width() * 0.96635f, group.top + group.height() * 0.0053f);
            bezierPath.lineTo(group.left + group.width() * 0.62441f, group.top + group.height() * 0.3078f);
            bezierPath.lineTo(group.left + group.width() * 0.62441f, group.top + group.height() * 0.06251f);
            bezierPath.cubicTo(group.left + group.width() * 0.62566f, group.top + group.height() * 0.05463f, group.left + group.width() * 0.6212f, group.top + group.height() * 0.04742f, group.left + group.width() * 0.61415f, group.top + group.height() * 0.04388f);
            bezierPath.cubicTo(group.left + group.width() * 0.60706f, group.top + group.height() * 0.04038f, group.left + group.width() * 0.59863f, group.top + group.height() * 0.04109f, group.left + group.width() * 0.59229f, group.top + group.height() * 0.04588f);
            bezierPath.lineTo(group.left + group.width() * 0.00834f, group.top + group.height() * 0.48338f);
            bezierPath.cubicTo(group.left + group.width() * 0.00309f, group.top + group.height() * 0.48725f, group.left, group.top + group.height() * 0.49346f, group.left, group.top + group.height() * 0.5f);
            bezierPath.cubicTo(group.left, group.top + group.height() * 0.50655f, group.left + group.width() * 0.00309f, group.top + group.height() * 0.51275f, group.left + group.width() * 0.00834f, group.top + group.height() * 0.51671f);
            bezierPath.lineTo(group.left + group.width() * 0.59229f, group.top + group.height() * 0.95421f);
            bezierPath.cubicTo(group.left + group.width() * 0.59863f, group.top + group.height() * 0.95892f, group.left + group.width() * 0.60706f, group.top + group.height() * 0.95963f, group.left + group.width() * 0.61415f, group.top + group.height() * 0.95613f);
            bezierPath.cubicTo(group.left + group.width() * 0.6212f, group.top + group.height() * 0.95258f, group.left + group.width() * 0.62566f, group.top + group.height() * 0.94542f, group.left + group.width() * 0.62441f, group.top + group.height() * 0.9375f);
            bezierPath.lineTo(group.left + group.width() * 0.62441f, group.top + group.height() * 0.69221f);
            bezierPath.lineTo(group.left + group.width() * 0.96635f, group.top + group.height() * 0.99475f);
            bezierPath.cubicTo(group.left + group.width() * 0.97027f, group.top + group.height() * 0.99821f, group.left + group.width() * 0.97519f, group.top + group.height() * 1f, group.left + group.width() * 0.9802f, group.top + group.height() * 1f);
            bezierPath.cubicTo(group.left + group.width() * 0.98312f, group.top + group.height() * 1f, group.left + group.width() * 0.986f, group.top + group.height() * 0.99942f, group.left + group.width() * 0.98875f, group.top + group.height() * 0.99817f);
            bezierPath.cubicTo(group.left + group.width() * 0.99626f, group.top + group.height() * 0.99483f, group.left + group.width() * 1.00105f, group.top + group.height() * 0.98737f, group.left + group.width() * 0.9998f, group.top + group.height() * 0.97917f);
            bezierPath.lineTo(group.left + group.width() * 0.9998f, group.top + group.height() * 0.02084f);
            bezierPath.cubicTo(group.left + group.width() * 1.00105f, group.top + group.height() * 0.01267f, group.left + group.width() * 0.99626f, group.top + group.height() * 0.00522f, group.left + group.width() * 0.98875f, group.top + group.height() * 0.00184f);
            bezierPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            bezierPath.setFillType(Path.FillType.EVEN_ODD);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(btnColor);
            canvas.drawPath(bezierPath, paint);
        }
    }
    
    private static class CacheForBtnNextCompact {
        private static Paint paint = new Paint();
        private static RectF group = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    
    public static void drawBtnNextCompact(Canvas canvas, RectF frame, boolean isPressed) {
        // General Declarations
        Paint paint = CacheForBtnNextCompact.paint;
        
        // Local Colors
        int upColor = Color.argb(255, 76, 142, 162);
        int downColor = Color.argb(255, 63, 113, 129);
        
        // Local Variables
        int btnColor = isPressed ? downColor : upColor;
        
        // Group
        {
            RectF group = CacheForBtnNextCompact.group;
            group.set(frame.left + (float) Math.floor(frame.width() * 0.36364f + 0.5f),
                frame.top + (float) Math.floor(frame.height() * 0.34091f + 0.5f) + 0f,
                frame.left + (float) Math.floor(frame.width() * 0.70455f + 0.5f),
                frame.top + (float) Math.floor(frame.height() * 0.65909f + 0.5f) + 0f);
            
            // Bezier
            RectF bezierRect = CacheForBtnNextCompact.bezierRect;
            bezierRect.set(group.left,
                group.top,
                group.left + (float) Math.floor(group.width() + 0.5f),
                group.top + (float) Math.floor(group.height() + 0.5f));
            Path bezierPath = CacheForBtnNextCompact.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(group.left + group.width() * 0.99167f, group.top + group.height() * 0.48337f);
            bezierPath.lineTo(group.left + group.width() * 0.40833f, group.top + group.height() * 0.04587f);
            bezierPath.cubicTo(group.left + group.width() * 0.402f, group.top + group.height() * 0.04112f, group.left + group.width() * 0.39358f, group.top + group.height() * 0.04037f, group.left + group.width() * 0.3865f, group.top + group.height() * 0.04387f);
            bezierPath.cubicTo(group.left + group.width() * 0.37946f, group.top + group.height() * 0.04741f, group.left + group.width() * 0.375f, group.top + group.height() * 0.05462f, group.left + group.width() * 0.375f, group.top + group.height() * 0.0625f);
            bezierPath.lineTo(group.left + group.width() * 0.375f, group.top + group.height() * 0.30779f);
            bezierPath.lineTo(group.left + group.width() * 0.03467f, group.top + group.height() * 0.00529f);
            bezierPath.cubicTo(group.left + group.width() * 0.02854f, group.top + group.height() * -0.00017f, group.left + group.width() * 0.01975f, group.top + group.height() * -0.00155f, group.left + group.width() * 0.01229f, group.top + group.height() * 0.00183f);
            bezierPath.cubicTo(group.left + group.width() * 0.00479f, group.top + group.height() * 0.0052f, group.left, group.top + group.height() * 0.01266f, group.left, group.top + group.height() * 0.02083f);
            bezierPath.lineTo(group.left, group.top + group.height() * 0.97917f);
            bezierPath.cubicTo(group.left, group.top + group.height() * 0.98742f, group.left + group.width() * 0.00479f, group.top + group.height() * 0.99483f, group.left + group.width() * 0.01229f, group.top + group.height() * 0.99817f);
            bezierPath.cubicTo(group.left + group.width() * 0.01504f, group.top + group.height() * 0.99946f, group.left + group.width() * 0.01792f, group.top + group.height() * 1f, group.left + group.width() * 0.02083f, group.top + group.height() * 1f);
            bezierPath.cubicTo(group.left + group.width() * 0.02583f, group.top + group.height() * 1f, group.left + group.width() * 0.03079f, group.top + group.height() * 0.99821f, group.left + group.width() * 0.03467f, group.top + group.height() * 0.99475f);
            bezierPath.lineTo(group.left + group.width() * 0.375f, group.top + group.height() * 0.69225f);
            bezierPath.lineTo(group.left + group.width() * 0.375f, group.top + group.height() * 0.9375f);
            bezierPath.cubicTo(group.left + group.width() * 0.375f, group.top + group.height() * 0.94542f, group.left + group.width() * 0.37946f, group.top + group.height() * 0.95262f, group.left + group.width() * 0.3865f, group.top + group.height() * 0.95617f);
            bezierPath.cubicTo(group.left + group.width() * 0.39358f, group.top + group.height() * 0.95967f, group.left + group.width() * 0.402f, group.top + group.height() * 0.95892f, group.left + group.width() * 0.40833f, group.top + group.height() * 0.95421f);
            bezierPath.lineTo(group.left + group.width() * 0.99167f, group.top + group.height() * 0.51671f);
            bezierPath.cubicTo(group.left + group.width() * 0.99692f, group.top + group.height() * 0.51275f, group.left + group.width(), group.top + group.height() * 0.50658f, group.left + group.width(), group.top + group.height() * 0.5f);
            bezierPath.cubicTo(group.left + group.width(), group.top + group.height() * 0.49346f, group.left + group.width() * 0.99692f, group.top + group.height() * 0.48729f, group.left + group.width() * 0.99167f, group.top + group.height() * 0.48337f);
            bezierPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            bezierPath.setFillType(Path.FillType.EVEN_ODD);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(btnColor);
            canvas.drawPath(bezierPath, paint);
        }
    }
    
    private static class CacheForBtnPlayCompact {
        private static Paint paint = new Paint();
        private static RectF group = new RectF();
        private static RectF playRect = new RectF();
        private static Path playPath = new Path();
        private static RectF pause = new RectF();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
        private static RectF rectangle2Rect = new RectF();
        private static Path rectangle2Path = new Path();
    }
    
    
    public static void drawBtnPlayCompact(Canvas canvas, RectF frame, boolean isPressed, boolean isShowingPause) {
        // General Declarations
        Paint paint = CacheForBtnPlayCompact.paint;
        
        // Local Colors
        int upColor = Color.argb(255, 76, 142, 162);
        int downColor = Color.argb(255, 63, 113, 129);
        
        // Local Variables
        boolean isPlaying = !isShowingPause;
        int btnColor = isPressed ? downColor : upColor;
        
        // Group
        {
            RectF group = CacheForBtnPlayCompact.group;
            group.set(frame.left + (float) Math.floor(frame.width() * 0.29545f + 0.5f),
                frame.top + (float) Math.floor(frame.height() * 0.27273f + 0.5f),
                frame.left + (float) Math.floor(frame.width() * 0.70455f + 0.5f),
                frame.top + (float) Math.floor(frame.height() * 0.65909f + 0.5f));
            
            // Play
            if (isPlaying) {
                RectF playRect = CacheForBtnPlayCompact.playRect;
                playRect.set(group.left,
                    group.top,
                    group.left + (float) Math.floor(group.width() + 0.5f),
                    group.top + (float) Math.floor(group.height() + 0.5f));
                Path playPath = CacheForBtnPlayCompact.playPath;
                playPath.reset();
                playPath.moveTo(group.left, group.top + group.height());
                playPath.lineTo(group.left, group.top);
                playPath.lineTo(group.left + group.width(), group.top + group.height() * 0.5f);
                playPath.lineTo(group.left, group.top + group.height());
                playPath.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                playPath.setFillType(Path.FillType.EVEN_ODD);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(btnColor);
                canvas.drawPath(playPath, paint);
            }
            
            // Pause
            if (isShowingPause) {
                RectF pause = CacheForBtnPlayCompact.pause;
                pause.set(group.left + (float) Math.floor(group.width() * 0.16667f + 0.5f),
                    group.top + (float) Math.floor(group.height() * 0.05882f + 0.5f),
                    group.left + (float) Math.floor(group.width() * 0.83333f + 0.5f),
                    group.top + (float) Math.floor(group.height() + 0.5f));
                
                // Rectangle
                RectF rectangleRect = CacheForBtnPlayCompact.rectangleRect;
                rectangleRect.set(group.left + (float) Math.floor(group.width() * 0.16667f + 0.5f),
                    group.top + (float) Math.floor(group.height() * 0.05882f + 0.5f),
                    group.left + (float) Math.floor(group.width() * 0.44444f + 0.5f),
                    group.top + (float) Math.floor(group.height() + 0.5f));
                Path rectanglePath = CacheForBtnPlayCompact.rectanglePath;
                rectanglePath.reset();
                rectanglePath.moveTo(rectangleRect.left, rectangleRect.top);
                rectanglePath.lineTo(rectangleRect.right, rectangleRect.top);
                rectanglePath.lineTo(rectangleRect.right, rectangleRect.bottom);
                rectanglePath.lineTo(rectangleRect.left, rectangleRect.bottom);
                rectanglePath.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(btnColor);
                canvas.drawPath(rectanglePath, paint);
                
                // Rectangle 2
                RectF rectangle2Rect = CacheForBtnPlayCompact.rectangle2Rect;
                rectangle2Rect.set(group.left + (float) Math.floor(group.width() * 0.55556f + 0.5f),
                    group.top + (float) Math.floor(group.height() * 0.05882f + 0.5f),
                    group.left + (float) Math.floor(group.width() * 0.83333f + 0.5f),
                    group.top + (float) Math.floor(group.height() + 0.5f));
                Path rectangle2Path = CacheForBtnPlayCompact.rectangle2Path;
                rectangle2Path.reset();
                rectangle2Path.moveTo(rectangle2Rect.left, rectangle2Rect.top);
                rectangle2Path.lineTo(rectangle2Rect.right, rectangle2Rect.top);
                rectangle2Path.lineTo(rectangle2Rect.right, rectangle2Rect.bottom);
                rectangle2Path.lineTo(rectangle2Rect.left, rectangle2Rect.bottom);
                rectangle2Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(btnColor);
                canvas.drawPath(rectangle2Path, paint);
            }
        }
    }
    
    private static class CacheForBtnForwardCompact {
        private static Paint paint = new Paint();
        private static RectF group = new RectF();
        private static RectF stroke260Stroke261Stroke262Copy = new RectF();
        private static RectF stroke260Rect = new RectF();
        private static Path stroke260Path = new Path();
        private static RectF stroke261Rect = new RectF();
        private static Path stroke261Path = new Path();
        private static RectF labelRect = new RectF();
        private static Path labelPath = new Path();
    }
    
    
    public static void drawBtnForwardCompact(Canvas canvas, RectF frame, boolean isPressed) {
        // General Declarations
        Paint paint = CacheForBtnForwardCompact.paint;
        
        // Local Colors
        int upColor = Color.argb(255, 76, 142, 162);
        int downColor = Color.argb(255, 63, 113, 129);
        
        // Local Variables
        int btnColor = isPressed ? downColor : upColor;
        
        // Group
        {
            RectF group = CacheForBtnForwardCompact.group;
            group.set(frame.left + (float) Math.floor(frame.width() * 0.28751f - 0.15f) + 0.65f,
                frame.top + (float) Math.floor(frame.height() * 0.23863f + 0f) + 0.5f,
                frame.left + (float) Math.floor(frame.width() * 0.74586f - 0.32f) + 0.82f,
                frame.top + (float) Math.floor(frame.height() * 0.7614f - 0f) + 0.5f);
            
            // Stroke-260-+-Stroke-261-+-Stroke-262-Copy
            {
                RectF stroke260Stroke261Stroke262Copy = CacheForBtnForwardCompact.stroke260Stroke261Stroke262Copy;
                stroke260Stroke261Stroke262Copy.set(group.left,
                    group.top,
                    group.left + (float) Math.floor(group.width() + 0.33f) + 0.17f,
                    group.top + (float) Math.floor(group.height() + 0.5f) + 0f);
                
                // Stroke-260
                RectF stroke260Rect = CacheForBtnForwardCompact.stroke260Rect;
                stroke260Rect.set(group.left + (float) Math.floor(group.width() * 0.31392f + 0.17f) + 0.33f,
                    group.top,
                    group.left + (float) Math.floor(group.width() * 0.614f + 0.12f) + 0.38f,
                    group.top + (float) Math.floor(group.height() * 0.34764f - 0.5f) + 1f);
                Path stroke260Path = CacheForBtnForwardCompact.stroke260Path;
                stroke260Path.reset();
                stroke260Path.moveTo(stroke260Stroke261Stroke262Copy.left + stroke260Stroke261Stroke262Copy.width() * 0.37784f, stroke260Stroke261Stroke262Copy.top + stroke260Stroke261Stroke262Copy.height() * 0.00598f);
                stroke260Path.lineTo(stroke260Stroke261Stroke262Copy.left + stroke260Stroke261Stroke262Copy.width() * 0.59515f, stroke260Stroke261Stroke262Copy.top + stroke260Stroke261Stroke262Copy.height() * 0.13223f);
                stroke260Path.cubicTo(stroke260Stroke261Stroke262Copy.left + stroke260Stroke261Stroke262Copy.width() * 0.61837f, stroke260Stroke261Stroke262Copy.top + stroke260Stroke261Stroke262Copy.height() * 0.14572f, stroke260Stroke261Stroke262Copy.left + stroke260Stroke261Stroke262Copy.width() * 0.62053f, stroke260Stroke261Stroke262Copy.top + stroke260Stroke261Stroke262Copy.height() * 0.17542f, stroke260Stroke261Stroke262Copy.left + stroke260Stroke261Stroke262Copy.width() * 0.59946f, stroke260Stroke261Stroke262Copy.top + stroke260Stroke261Stroke262Copy.height() * 0.19149f);
                stroke260Path.lineTo(stroke260Stroke261Stroke262Copy.left + stroke260Stroke261Stroke262Copy.width() * 0.40629f, stroke260Stroke261Stroke262Copy.top + stroke260Stroke261Stroke262Copy.height() * 0.33879f);
                stroke260Path.cubicTo(stroke260Stroke261Stroke262Copy.left + stroke260Stroke261Stroke262Copy.width() * 0.38889f, stroke260Stroke261Stroke262Copy.top + stroke260Stroke261Stroke262Copy.height() * 0.35206f, stroke260Stroke261Stroke262Copy.left + stroke260Stroke261Stroke262Copy.width() * 0.36278f, stroke260Stroke261Stroke262Copy.top + stroke260Stroke261Stroke262Copy.height() * 0.35019f, stroke260Stroke261Stroke262Copy.left + stroke260Stroke261Stroke262Copy.width() * 0.34795f, stroke260Stroke261Stroke262Copy.top + stroke260Stroke261Stroke262Copy.height() * 0.33462f);
                stroke260Path.cubicTo(stroke260Stroke261Stroke262Copy.left + stroke260Stroke261Stroke262Copy.width() * 0.33313f, stroke260Stroke261Stroke262Copy.top + stroke260Stroke261Stroke262Copy.height() * 0.31905f, stroke260Stroke261Stroke262Copy.left + stroke260Stroke261Stroke262Copy.width() * 0.33522f, stroke260Stroke261Stroke262Copy.top + stroke260Stroke261Stroke262Copy.height() * 0.29567f, stroke260Stroke261Stroke262Copy.left + stroke260Stroke261Stroke262Copy.width() * 0.35262f, stroke260Stroke261Stroke262Copy.top + stroke260Stroke261Stroke262Copy.height() * 0.28241f);
                stroke260Path.lineTo(stroke260Stroke261Stroke262Copy.left + stroke260Stroke261Stroke262Copy.width() * 0.54579f, stroke260Stroke261Stroke262Copy.top + stroke260Stroke261Stroke262Copy.height() * 0.13511f);
                stroke260Path.lineTo(stroke260Stroke261Stroke262Copy.left + stroke260Stroke261Stroke262Copy.width() * 0.55009f, stroke260Stroke261Stroke262Copy.top + stroke260Stroke261Stroke262Copy.height() * 0.19436f);
                stroke260Path.lineTo(stroke260Stroke261Stroke262Copy.left + stroke260Stroke261Stroke262Copy.width() * 0.33278f, stroke260Stroke261Stroke262Copy.top + stroke260Stroke261Stroke262Copy.height() * 0.0681f);
                stroke260Path.cubicTo(stroke260Stroke261Stroke262Copy.left + stroke260Stroke261Stroke262Copy.width() * 0.31361f, stroke260Stroke261Stroke262Copy.top + stroke260Stroke261Stroke262Copy.height() * 0.05697f, stroke260Stroke261Stroke262Copy.left + stroke260Stroke261Stroke262Copy.width() * 0.30816f, stroke260Stroke261Stroke262Copy.top + stroke260Stroke261Stroke262Copy.height() * 0.03403f, stroke260Stroke261Stroke262Copy.left + stroke260Stroke261Stroke262Copy.width() * 0.3206f, stroke260Stroke261Stroke262Copy.top + stroke260Stroke261Stroke262Copy.height() * 0.01687f);
                stroke260Path.cubicTo(stroke260Stroke261Stroke262Copy.left + stroke260Stroke261Stroke262Copy.width() * 0.33304f, stroke260Stroke261Stroke262Copy.top + stroke260Stroke261Stroke262Copy.height() * -0.00028f, stroke260Stroke261Stroke262Copy.left + stroke260Stroke261Stroke262Copy.width() * 0.35867f, stroke260Stroke261Stroke262Copy.top + stroke260Stroke261Stroke262Copy.height() * -0.00516f, stroke260Stroke261Stroke262Copy.left + stroke260Stroke261Stroke262Copy.width() * 0.37784f, stroke260Stroke261Stroke262Copy.top + stroke260Stroke261Stroke262Copy.height() * 0.00598f);
                stroke260Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(btnColor);
                canvas.drawPath(stroke260Path, paint);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(0.1f);
                paint.setStrokeMiter(10f);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(btnColor);
                canvas.drawPath(stroke260Path, paint);
                canvas.restore();
                
                // Stroke-261
                RectF stroke261Rect = CacheForBtnForwardCompact.stroke261Rect;
                stroke261Rect.set(group.left,
                    group.top + (float) Math.floor(group.height() * 0.12323f - 0.33f) + 0.83f,
                    group.left + (float) Math.floor(group.width() + 0.33f) + 0.17f,
                    group.top + (float) Math.floor(group.height() * 1f + 0.5f) + 0f);
                Path stroke261Path = CacheForBtnForwardCompact.stroke261Path;
                stroke261Path.reset();
                stroke261Path.moveTo(stroke260Stroke261Stroke262Copy.left + stroke260Stroke261Stroke262Copy.width() * 0.56765f, stroke260Stroke261Stroke262Copy.top + stroke260Stroke261Stroke262Copy.height() * 0.20036f);
                stroke261Path.cubicTo(stroke260Stroke261Stroke262Copy.left + stroke260Stroke261Stroke262Copy.width() * 0.31025f, stroke260Stroke261Stroke262Copy.top + stroke260Stroke261Stroke262Copy.height() * 0.17248f, stroke260Stroke261Stroke262Copy.left + stroke260Stroke261Stroke262Copy.width() * 0.09192f, stroke260Stroke261Stroke262Copy.top + stroke260Stroke261Stroke262Copy.height() * 0.33962f, stroke260Stroke261Stroke262Copy.left + stroke260Stroke261Stroke262Copy.width() * 0.08304f, stroke260Stroke261Stroke262Copy.top + stroke260Stroke261Stroke262Copy.height() * 0.54982f);
                stroke261Path.cubicTo(stroke260Stroke261Stroke262Copy.left + stroke260Stroke261Stroke262Copy.width() * 0.0746f, stroke260Stroke261Stroke262Copy.top + stroke260Stroke261Stroke262Copy.height() * 0.74983f, stroke260Stroke261Stroke262Copy.left + stroke260Stroke261Stroke262Copy.width() * 0.25419f, stroke260Stroke261Stroke262Copy.top + stroke260Stroke261Stroke262Copy.height() * 0.91831f, stroke260Stroke261Stroke262Copy.left + stroke260Stroke261Stroke262Copy.width() * 0.48475f, stroke260Stroke261Stroke262Copy.top + stroke260Stroke261Stroke262Copy.height() * 0.92567f);
                stroke261Path.cubicTo(stroke260Stroke261Stroke262Copy.left + stroke260Stroke261Stroke262Copy.width() * 0.71541f, stroke260Stroke261Stroke262Copy.top + stroke260Stroke261Stroke262Copy.height() * 0.93318f, stroke260Stroke261Stroke262Copy.left + stroke260Stroke261Stroke262Copy.width() * 0.90887f, stroke260Stroke261Stroke262Copy.top + stroke260Stroke261Stroke262Copy.height() * 0.77655f, stroke260Stroke261Stroke262Copy.left + stroke260Stroke261Stroke262Copy.width() * 0.91727f, stroke260Stroke261Stroke262Copy.top + stroke260Stroke261Stroke262Copy.height() * 0.57649f);
                stroke261Path.cubicTo(stroke260Stroke261Stroke262Copy.left + stroke260Stroke261Stroke262Copy.width() * 0.91813f, stroke260Stroke261Stroke262Copy.top + stroke260Stroke261Stroke262Copy.height() * 0.55605f, stroke260Stroke261Stroke262Copy.left + stroke260Stroke261Stroke262Copy.width() * 0.93734f, stroke260Stroke261Stroke262Copy.top + stroke260Stroke261Stroke262Copy.height() * 0.54011f, stroke260Stroke261Stroke262Copy.left + stroke260Stroke261Stroke262Copy.width() * 0.96018f, stroke260Stroke261Stroke262Copy.top + stroke260Stroke261Stroke262Copy.height() * 0.54088f);
                stroke261Path.cubicTo(stroke260Stroke261Stroke262Copy.left + stroke260Stroke261Stroke262Copy.width() * 0.98301f, stroke260Stroke261Stroke262Copy.top + stroke260Stroke261Stroke262Copy.height() * 0.54165f, stroke260Stroke261Stroke262Copy.left + stroke260Stroke261Stroke262Copy.width() * 1.00083f, stroke260Stroke261Stroke262Copy.top + stroke260Stroke261Stroke262Copy.height() * 0.55884f, stroke260Stroke261Stroke262Copy.left + stroke260Stroke261Stroke262Copy.width() * 0.99997f, stroke260Stroke261Stroke262Copy.top + stroke260Stroke261Stroke262Copy.height() * 0.57928f);
                stroke261Path.cubicTo(stroke260Stroke261Stroke262Copy.left + stroke260Stroke261Stroke262Copy.width() * 0.98983f, stroke260Stroke261Stroke262Copy.top + stroke260Stroke261Stroke262Copy.height() * 0.82061f, stroke260Stroke261Stroke262Copy.left + stroke260Stroke261Stroke262Copy.width() * 0.75756f, stroke260Stroke261Stroke262Copy.top + stroke260Stroke261Stroke262Copy.height() * 1.00867f, stroke260Stroke261Stroke262Copy.left + stroke260Stroke261Stroke262Copy.width() * 0.48178f, stroke260Stroke261Stroke262Copy.top + stroke260Stroke261Stroke262Copy.height() * 0.99969f);
                stroke261Path.cubicTo(stroke260Stroke261Stroke262Copy.left + stroke260Stroke261Stroke262Copy.width() * 0.20598f, stroke260Stroke261Stroke262Copy.top + stroke260Stroke261Stroke262Copy.height() * 0.99089f, stroke260Stroke261Stroke262Copy.left + stroke260Stroke261Stroke262Copy.width() * -0.00985f, stroke260Stroke261Stroke262Copy.top + stroke260Stroke261Stroke262Copy.height() * 0.78842f, stroke260Stroke261Stroke262Copy.left + stroke260Stroke261Stroke262Copy.width() * 0.00035f, stroke260Stroke261Stroke262Copy.top + stroke260Stroke261Stroke262Copy.height() * 0.54703f);
                stroke261Path.cubicTo(stroke260Stroke261Stroke262Copy.left + stroke260Stroke261Stroke262Copy.width() * 0.01105f, stroke260Stroke261Stroke262Copy.top + stroke260Stroke261Stroke262Copy.height() * 0.29358f, stroke260Stroke261Stroke262Copy.left + stroke260Stroke261Stroke262Copy.width() * 0.2721f, stroke260Stroke261Stroke262Copy.top + stroke260Stroke261Stroke262Copy.height() * 0.09374f, stroke260Stroke261Stroke262Copy.left + stroke260Stroke261Stroke262Copy.width() * 0.57759f, stroke260Stroke261Stroke262Copy.top + stroke260Stroke261Stroke262Copy.height() * 0.12682f);
                stroke261Path.cubicTo(stroke260Stroke261Stroke262Copy.left + stroke260Stroke261Stroke262Copy.width() * 0.60028f, stroke260Stroke261Stroke262Copy.top + stroke260Stroke261Stroke262Copy.height() * 0.12928f, stroke260Stroke261Stroke262Copy.left + stroke260Stroke261Stroke262Copy.width() * 0.61644f, stroke260Stroke261Stroke262Copy.top + stroke260Stroke261Stroke262Copy.height() * 0.14773f, stroke260Stroke261Stroke262Copy.left + stroke260Stroke261Stroke262Copy.width() * 0.6137f, stroke260Stroke261Stroke262Copy.top + stroke260Stroke261Stroke262Copy.height() * 0.16804f);
                stroke261Path.cubicTo(stroke260Stroke261Stroke262Copy.left + stroke260Stroke261Stroke262Copy.width() * 0.61095f, stroke260Stroke261Stroke262Copy.top + stroke260Stroke261Stroke262Copy.height() * 0.18834f, stroke260Stroke261Stroke262Copy.left + stroke260Stroke261Stroke262Copy.width() * 0.59034f, stroke260Stroke261Stroke262Copy.top + stroke260Stroke261Stroke262Copy.height() * 0.20281f, stroke260Stroke261Stroke262Copy.left + stroke260Stroke261Stroke262Copy.width() * 0.56765f, stroke260Stroke261Stroke262Copy.top + stroke260Stroke261Stroke262Copy.height() * 0.20036f);
                stroke261Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(btnColor);
                canvas.drawPath(stroke261Path, paint);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(0.1f);
                paint.setStrokeMiter(10f);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(btnColor);
                canvas.drawPath(stroke261Path, paint);
                canvas.restore();
            }
            
            // Label
            RectF labelRect = CacheForBtnForwardCompact.labelRect;
            labelRect.set(group.left + (float) Math.floor(group.width() * 0.27604f - 0.07f) + 0.57f,
                group.top + (float) Math.floor(group.height() * 0.4542f + 0.05f) + 0.45f,
                group.left + (float) Math.floor(group.width() * 0.73471f - 0.32f) + 0.82f,
                group.top + (float) Math.floor(group.height() * 0.69963f + 0.41f) + 0.09f);
            Path labelPath = CacheForBtnForwardCompact.labelPath;
            labelPath.reset();
            labelPath.moveTo(group.left + group.width() * 0.34589f, group.top + group.height() * 0.59189f);
            labelPath.lineTo(group.left + group.width() * 0.37913f, group.top + group.height() * 0.59189f);
            labelPath.cubicTo(group.left + group.width() * 0.40957f, group.top + group.height() * 0.59189f, group.left + group.width() * 0.42806f, group.top + group.height() * 0.60491f, group.left + group.width() * 0.42806f, group.top + group.height() * 0.62639f);
            labelPath.cubicTo(group.left + group.width() * 0.42806f, group.top + group.height() * 0.64625f, group.left + group.width() * 0.40827f, group.top + group.height() * 0.66009f, group.left + group.width() * 0.38007f, group.top + group.height() * 0.66009f);
            labelPath.cubicTo(group.left + group.width() * 0.35037f, group.top + group.height() * 0.66009f, group.left + group.width() * 0.3317f, group.top + group.height() * 0.64706f, group.left + group.width() * 0.33002f, group.top + group.height() * 0.62721f);
            labelPath.lineTo(group.left + group.width() * 0.27604f, group.top + group.height() * 0.62721f);
            labelPath.cubicTo(group.left + group.width() * 0.27866f, group.top + group.height() * 0.6705f, group.left + group.width() * 0.31844f, group.top + group.height() * 0.69963f, group.left + group.width() * 0.37932f, group.top + group.height() * 0.69963f);
            labelPath.cubicTo(group.left + group.width() * 0.44151f, group.top + group.height() * 0.69963f, group.left + group.width() * 0.4854f, group.top + group.height() * 0.67164f, group.left + group.width() * 0.4854f, group.top + group.height() * 0.62949f);
            labelPath.cubicTo(group.left + group.width() * 0.4854f, group.top + group.height() * 0.59694f, group.left + group.width() * 0.45944f, group.top + group.height() * 0.57578f, group.left + group.width() * 0.41929f, group.top + group.height() * 0.57285f);
            labelPath.lineTo(group.left + group.width() * 0.41929f, group.top + group.height() * 0.57187f);
            labelPath.cubicTo(group.left + group.width() * 0.45234f, group.top + group.height() * 0.56666f, group.left + group.width() * 0.47494f, group.top + group.height() * 0.54583f, group.left + group.width() * 0.47494f, group.top + group.height() * 0.51702f);
            labelPath.cubicTo(group.left + group.width() * 0.47494f, group.top + group.height() * 0.47943f, group.left + group.width() * 0.43665f, group.top + group.height() * 0.45436f, group.left + group.width() * 0.38063f, group.top + group.height() * 0.45436f);
            labelPath.cubicTo(group.left + group.width() * 0.32217f, group.top + group.height() * 0.45436f, group.left + group.width() * 0.28333f, group.top + group.height() * 0.48268f, group.left + group.width() * 0.28127f, group.top + group.height() * 0.52614f);
            labelPath.lineTo(group.left + group.width() * 0.33319f, group.top + group.height() * 0.52614f);
            labelPath.cubicTo(group.left + group.width() * 0.33469f, group.top + group.height() * 0.50563f, group.left + group.width() * 0.35205f, group.top + group.height() * 0.49212f, group.left + group.width() * 0.3782f, group.top + group.height() * 0.49212f);
            labelPath.cubicTo(group.left + group.width() * 0.40621f, group.top + group.height() * 0.49212f, group.left + group.width() * 0.42171f, group.top + group.height() * 0.50465f, group.left + group.width() * 0.42171f, group.top + group.height() * 0.5237f);
            labelPath.cubicTo(group.left + group.width() * 0.42171f, group.top + group.height() * 0.54306f, group.left + group.width() * 0.40434f, group.top + group.height() * 0.55641f, group.left + group.width() * 0.37857f, group.top + group.height() * 0.55641f);
            labelPath.lineTo(group.left + group.width() * 0.34589f, group.top + group.height() * 0.55641f);
            labelPath.lineTo(group.left + group.width() * 0.34589f, group.top + group.height() * 0.59189f);
            labelPath.close();
            labelPath.moveTo(group.left + group.width() * 0.62584f, group.top + group.height() * 0.69963f);
            labelPath.cubicTo(group.left + group.width() * 0.69363f, group.top + group.height() * 0.69963f, group.left + group.width() * 0.73471f, group.top + group.height() * 0.65227f, group.left + group.width() * 0.73471f, group.top + group.height() * 0.57643f);
            labelPath.cubicTo(group.left + group.width() * 0.73471f, group.top + group.height() * 0.50058f, group.left + group.width() * 0.69326f, group.top + group.height() * 0.4542f, group.left + group.width() * 0.62584f, group.top + group.height() * 0.4542f);
            labelPath.cubicTo(group.left + group.width() * 0.55842f, group.top + group.height() * 0.4542f, group.left + group.width() * 0.51677f, group.top + group.height() * 0.50075f, group.left + group.width() * 0.51677f, group.top + group.height() * 0.57659f);
            labelPath.cubicTo(group.left + group.width() * 0.51677f, group.top + group.height() * 0.6526f, group.left + group.width() * 0.55804f, group.top + group.height() * 0.69963f, group.left + group.width() * 0.62584f, group.top + group.height() * 0.69963f);
            labelPath.close();
            labelPath.moveTo(group.left + group.width() * 0.62584f, group.top + group.height() * 0.66025f);
            labelPath.cubicTo(group.left + group.width() * 0.59371f, group.top + group.height() * 0.66025f, group.left + group.width() * 0.57411f, group.top + group.height() * 0.62998f, group.left + group.width() * 0.57411f, group.top + group.height() * 0.57659f);
            labelPath.cubicTo(group.left + group.width() * 0.57411f, group.top + group.height() * 0.5237f, group.left + group.width() * 0.59409f, group.top + group.height() * 0.49359f, group.left + group.width() * 0.62584f, group.top + group.height() * 0.49359f);
            labelPath.cubicTo(group.left + group.width() * 0.65777f, group.top + group.height() * 0.49359f, group.left + group.width() * 0.67738f, group.top + group.height() * 0.52353f, group.left + group.width() * 0.67738f, group.top + group.height() * 0.57659f);
            labelPath.cubicTo(group.left + group.width() * 0.67738f, group.top + group.height() * 0.63014f, group.left + group.width() * 0.65796f, group.top + group.height() * 0.66025f, group.left + group.width() * 0.62584f, group.top + group.height() * 0.66025f);
            labelPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(btnColor);
            canvas.drawPath(labelPath, paint);
        }
    }
    
    private static class CacheForBtnRewindCompact {
        private static Paint paint = new Paint();
        private static RectF group2 = new RectF();
        private static RectF play = new RectF();
        private static RectF stroke260Rect = new RectF();
        private static Path stroke260Path = new Path();
        private static RectF stroke261Rect = new RectF();
        private static Path stroke261Path = new Path();
        private static RectF labelRect = new RectF();
        private static Path labelPath = new Path();
    }
    
    
    public static void drawBtnRewindCompact(Canvas canvas, RectF frame, boolean isPressed) {
        // General Declarations
        Paint paint = CacheForBtnRewindCompact.paint;
        
        // Local Colors
        int upColor = Color.argb(255, 76, 142, 162);
        int downColor = Color.argb(255, 63, 113, 129);
        
        // Local Variables
        int btnColor = isPressed ? downColor : upColor;
        
        // Group 2
        {
            RectF group2 = CacheForBtnRewindCompact.group2;
            group2.set(frame.left + (float) Math.floor(frame.width() * 0.27687f + 0.32f) + 0.18f,
                frame.top + (float) Math.floor(frame.height() * 0.23863f + 0f) + 0.5f,
                frame.left + (float) Math.floor(frame.width() * 0.71249f + 0.15f) + 0.35f,
                frame.top + (float) Math.floor(frame.height() * 0.7614f - 0f) + 0.5f);
            
            // Play
            {
                RectF play = CacheForBtnRewindCompact.play;
                play.set(group2.left,
                    group2.top,
                    group2.left + (float) Math.floor(group2.width() + 0.33f) + 0.17f,
                    group2.top + (float) Math.floor(group2.height() + 0.5f) + 0f);
                
                // Stroke-260
                RectF stroke260Rect = CacheForBtnRewindCompact.stroke260Rect;
                stroke260Rect.set(group2.left + (float) Math.floor(group2.width() * 0.38738f + 0.07f) + 0.43f,
                    group2.top,
                    group2.left + (float) Math.floor(group2.width() * 0.68495f + 0.37f) + 0.13f,
                    group2.top + (float) Math.floor(group2.height() * 0.34764f - 0.5f) + 1f);
                Path stroke260Path = CacheForBtnRewindCompact.stroke260Path;
                stroke260Path.reset();
                stroke260Path.moveTo(play.left + play.width() * 0.66618f, play.top + play.height() * 0.0685f);
                stroke260Path.lineTo(play.left + play.width() * 0.44808f, play.top + play.height() * 0.19476f);
                stroke260Path.lineTo(play.left + play.width() * 0.45223f, play.top + play.height() * 0.13459f);
                stroke260Path.lineTo(play.left + play.width() * 0.64609f, play.top + play.height() * 0.2819f);
                stroke260Path.cubicTo(play.left + play.width() * 0.6631f, play.top + play.height() * 0.29482f, play.left + play.width() * 0.66564f, play.top + play.height() * 0.31815f, play.left + play.width() * 0.65178f, play.top + play.height() * 0.334f);
                stroke260Path.cubicTo(play.left + play.width() * 0.63791f, play.top + play.height() * 0.34985f, play.left + play.width() * 0.61288f, play.top + play.height() * 0.35223f, play.left + play.width() * 0.59587f, play.top + play.height() * 0.33931f);
                stroke260Path.lineTo(play.left + play.width() * 0.40201f, play.top + play.height() * 0.192f);
                stroke260Path.cubicTo(play.left + play.width() * 0.38087f, play.top + play.height() * 0.17594f, play.left + play.width() * 0.38298f, play.top + play.height() * 0.14525f, play.left + play.width() * 0.40615f, play.top + play.height() * 0.13184f);
                stroke260Path.lineTo(play.left + play.width() * 0.62425f, play.top + play.height() * 0.00558f);
                stroke260Path.cubicTo(play.left + play.width() * 0.64289f, play.top + play.height() * -0.00521f, play.left + play.width() * 0.66739f, play.top + play.height() * 0.00012f, play.left + play.width() * 0.67897f, play.top + play.height() * 0.0175f);
                stroke260Path.cubicTo(play.left + play.width() * 0.69054f, play.top + play.height() * 0.03487f, play.left + play.width() * 0.68482f, play.top + play.height() * 0.05771f, play.left + play.width() * 0.66618f, play.top + play.height() * 0.0685f);
                stroke260Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(btnColor);
                canvas.drawPath(stroke260Path, paint);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(0.1f);
                paint.setStrokeMiter(10f);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(btnColor);
                canvas.drawPath(stroke260Path, paint);
                canvas.restore();
                
                // Stroke-261
                RectF stroke261Rect = CacheForBtnRewindCompact.stroke261Rect;
                stroke261Rect.set(group2.left,
                    group2.top + (float) Math.floor(group2.height() * 0.12324f - 0.33f) + 0.83f,
                    group2.left + (float) Math.floor(group2.width() + 0.33f) + 0.17f,
                    group2.top + (float) Math.floor(group2.height() * 1f + 0.5f) + 0f);
                Path stroke261Path = CacheForBtnRewindCompact.stroke261Path;
                stroke261Path.reset();
                stroke261Path.moveTo(play.left + play.width() * 0.42255f, play.top + play.height() * 0.1268f);
                stroke261Path.cubicTo(play.left + play.width() * 0.72759f, play.top + play.height() * 0.09389f, play.left + play.width() * 0.98889f, play.top + play.height() * 0.29321f, play.left + play.width() * 0.99965f, play.top + play.height() * 0.54696f);
                stroke261Path.cubicTo(play.left + play.width() * 1.0099f, play.top + play.height() * 0.78879f, play.left + play.width() * 0.79365f, play.top + play.height() * 0.99093f, play.left + play.width() * 0.51813f, play.top + play.height() * 0.99969f);
                stroke261Path.cubicTo(play.left + play.width() * 0.24278f, play.top + play.height() * 1.00863f, play.left + play.width() * 0.01022f, play.top + play.height() * 0.82101f, play.left + play.width() * 0.00003f, play.top + play.height() * 0.57934f);
                stroke261Path.cubicTo(play.left + play.width() * -0.00083f, play.top + play.height() * 0.5589f, play.left + play.width() * 0.01625f, play.top + play.height() * 0.54168f, play.left + play.width() * 0.03817f, play.top + play.height() * 0.54088f);
                stroke261Path.cubicTo(play.left + play.width() * 0.0601f, play.top + play.height() * 0.54008f, play.left + play.width() * 0.07858f, play.top + play.height() * 0.55599f, play.left + play.width() * 0.07944f, play.top + play.height() * 0.57643f);
                stroke261Path.cubicTo(play.left + play.width() * 0.08786f, play.top + play.height() * 0.77615f, play.left + play.width() * 0.28255f, play.top + play.height() * 0.93323f, play.left + play.width() * 0.5154f, play.top + play.height() * 0.92567f);
                stroke261Path.cubicTo(play.left + play.width() * 0.74812f, play.top + play.height() * 0.91827f, play.left + play.width() * 0.9287f, play.top + play.height() * 0.74946f, play.left + play.width() * 0.92024f, play.top + play.height() * 0.54989f);
                stroke261Path.cubicTo(play.left + play.width() * 0.91135f, play.top + play.height() * 0.33999f, play.left + play.width() * 0.69156f, play.top + play.height() * 0.17234f, play.left + play.width() * 0.43169f, play.top + play.height() * 0.20038f);
                stroke261Path.cubicTo(play.left + play.width() * 0.40989f, play.top + play.height() * 0.20273f, play.left + play.width() * 0.39017f, play.top + play.height() * 0.18817f, play.left + play.width() * 0.38765f, play.top + play.height() * 0.16785f);
                stroke261Path.cubicTo(play.left + play.width() * 0.38512f, play.top + play.height() * 0.14753f, play.left + play.width() * 0.40075f, play.top + play.height() * 0.12915f, play.left + play.width() * 0.42255f, play.top + play.height() * 0.1268f);
                stroke261Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(btnColor);
                canvas.drawPath(stroke261Path, paint);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(0.1f);
                paint.setStrokeMiter(10f);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(btnColor);
                canvas.drawPath(stroke261Path, paint);
                canvas.restore();
            }
            
            // Label
            RectF labelRect = CacheForBtnRewindCompact.labelRect;
            labelRect.set(group2.left + (float) Math.floor(group2.width() * 0.41992f + 0.45f) + 0.05f,
                group2.top + (float) Math.floor(group2.height() * 0.48307f + 0.39f) + 0.11f,
                group2.left + (float) Math.floor(group2.width() * 0.6259f - 0.5f) + 1f,
                group2.top + (float) Math.floor(group2.height() * 0.71269f + 0.11f) + 0.39f);
            Path labelPath = CacheForBtnRewindCompact.labelPath;
            labelPath.reset();
            labelPath.moveTo(group2.left + group2.width() * 0.52151f, group2.top + group2.height() * 0.71269f);
            labelPath.cubicTo(group2.left + group2.width() * 0.58354f, group2.top + group2.height() * 0.71269f, group2.left + group2.width() * 0.6259f, group2.top + group2.height() * 0.68031f, group2.left + group2.width() * 0.6259f, group2.top + group2.height() * 0.63267f);
            labelPath.cubicTo(group2.left + group2.width() * 0.6259f, group2.top + group2.height() * 0.58893f, group2.left + group2.width() * 0.58879f, group2.top + group2.height() * 0.55732f, group2.left + group2.width() * 0.53706f, group2.top + group2.height() * 0.55732f);
            labelPath.cubicTo(group2.left + group2.width() * 0.50951f, group2.top + group2.height() * 0.55732f, group2.left + group2.width() * 0.48796f, group2.top + group2.height() * 0.56682f, group2.left + group2.width() * 0.4769f, group2.top + group2.height() * 0.58192f);
            labelPath.lineTo(group2.left + group2.width() * 0.47578f, group2.top + group2.height() * 0.58192f);
            labelPath.lineTo(group2.left + group2.width() * 0.48196f, group2.top + group2.height() * 0.52043f);
            labelPath.lineTo(group2.left + group2.width() * 0.6096f, group2.top + group2.height() * 0.52043f);
            labelPath.lineTo(group2.left + group2.width() * 0.6096f, group2.top + group2.height() * 0.48307f);
            labelPath.lineTo(group2.left + group2.width() * 0.43754f, group2.top + group2.height() * 0.48307f);
            labelPath.lineTo(group2.left + group2.width() * 0.42423f, group2.top + group2.height() * 0.61228f);
            labelPath.lineTo(group2.left + group2.width() * 0.47484f, group2.top + group2.height() * 0.61228f);
            labelPath.cubicTo(group2.left + group2.width() * 0.48421f, group2.top + group2.height() * 0.59936f, group2.left + group2.width() * 0.50183f, group2.top + group2.height() * 0.59157f, group2.left + group2.width() * 0.52226f, group2.top + group2.height() * 0.59157f);
            labelPath.cubicTo(group2.left + group2.width() * 0.55149f, group2.top + group2.height() * 0.59157f, group2.left + group2.width() * 0.57192f, group2.top + group2.height() * 0.60901f, group2.left + group2.width() * 0.57192f, group2.top + group2.height() * 0.63392f);
            labelPath.cubicTo(group2.left + group2.width() * 0.57192f, group2.top + group2.height() * 0.65836f, group2.left + group2.width() * 0.55149f, group2.top + group2.height() * 0.67549f, group2.left + group2.width() * 0.52188f, group2.top + group2.height() * 0.67549f);
            labelPath.cubicTo(group2.left + group2.width() * 0.49564f, group2.top + group2.height() * 0.67549f, group2.left + group2.width() * 0.4754f, group2.top + group2.height() * 0.66241f, group2.left + group2.width() * 0.47221f, group2.top + group2.height() * 0.64342f);
            labelPath.lineTo(group2.left + group2.width() * 0.41992f, group2.top + group2.height() * 0.64342f);
            labelPath.cubicTo(group2.left + group2.width() * 0.42161f, group2.top + group2.height() * 0.68405f, group2.left + group2.width() * 0.46341f, group2.top + group2.height() * 0.71269f, group2.left + group2.width() * 0.52151f, group2.top + group2.height() * 0.71269f);
            labelPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(btnColor);
            canvas.drawPath(labelPath, paint);
        }
    }
    
    private static class CacheForSeekSliderCompact {
        private static Paint paint = new Paint();
        private static RectF triangleRect = new RectF();
        private static Path trianglePath = new Path();
        private static RectF triangle1Rect = new RectF();
        private static Path triangle1Path = new Path();
        private static RectF rectangle2Rect = new RectF();
        private static Path rectangle2Path = new Path();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
    }
    
    
    public static void drawSeekSliderCompact(Canvas canvas, float percent, PointF scrollSize, float loopLeft, float loopRight, boolean loopsEnabled) {
        // General Declarations
        Stack<Matrix> currentTransformation = new Stack<Matrix>();
        currentTransformation.push(new Matrix());
        Paint paint = CacheForSeekSliderCompact.paint;
        
        // Local Colors
        int loopColorGreen = Color.argb(255, 63, 160, 55);
        int loopColor = Color.argb(255, 197, 7, 7);
        int upColor = Color.argb(255, 76, 142, 162);
        int color2 = Color.argb(172, 170, 170, 170);
        
        // Local Variables
        float loopRightX = 15f + loopRight * scrollSize.x;
        float loopLeftX = 15f + loopLeft * scrollSize.x;
        float scrollWidth = percent * scrollSize.x;
        float loopFlagsAlpha = loopsEnabled ? 1f : 0.4f;
        
        // loopFlagRight
        {
            canvas.saveLayerAlpha(null, (int) (loopFlagsAlpha * 255f), Canvas.ALL_SAVE_FLAG);
            {
                canvas.save();
                canvas.translate(loopRightX - 13.01f, 33.02f);
                currentTransformation.peek().postTranslate(loopRightX - 13.01f, 33.02f);
                // Triangle-
                RectF triangleRect = CacheForSeekSliderCompact.triangleRect;
                triangleRect.set(-13.99f, -0.02f, 0.01f, 9.48f);
                Path trianglePath = CacheForSeekSliderCompact.trianglePath;
                trianglePath.reset();
                trianglePath.moveTo(-13.99f, 9.48f);
                trianglePath.lineTo(0.01f, 9.48f);
                trianglePath.lineTo(0.01f, -0.02f);
                trianglePath.lineTo(-13.99f, 9.48f);
                trianglePath.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                trianglePath.setFillType(Path.FillType.EVEN_ODD);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(loopColor);
                canvas.drawPath(trianglePath, paint);
                canvas.restore();
            }
            canvas.restore();
        }
        
        // loopFlagLeft
        {
            canvas.saveLayerAlpha(null, (int) (loopFlagsAlpha * 255f), Canvas.ALL_SAVE_FLAG);
            {
                canvas.save();
                canvas.translate(loopLeftX - 14.85f, 33.31f);
                currentTransformation.peek().postTranslate(loopLeftX - 14.85f, 33.31f);
                // Triangle-1
                RectF triangle1Rect = CacheForSeekSliderCompact.triangle1Rect;
                triangle1Rect.set(-0.15f, 0.19f, 13.85f, 9.19f);
                Path triangle1Path = CacheForSeekSliderCompact.triangle1Path;
                triangle1Path.reset();
                triangle1Path.moveTo(13.85f, 9.19f);
                triangle1Path.lineTo(-0.15f, 9.19f);
                triangle1Path.lineTo(-0.15f, 0.19f);
                triangle1Path.lineTo(13.85f, 9.19f);
                triangle1Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                triangle1Path.setFillType(Path.FillType.EVEN_ODD);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(loopColorGreen);
                canvas.drawPath(triangle1Path, paint);
                canvas.restore();
            }
            canvas.restore();
        }
        
        // Rectangle 2
        RectF rectangle2Rect = CacheForSeekSliderCompact.rectangle2Rect;
        rectangle2Rect.set(0f, 42f, scrollSize.x, 42f + scrollSize.y);
        Path rectangle2Path = CacheForSeekSliderCompact.rectangle2Path;
        rectangle2Path.reset();
        rectangle2Path.moveTo(rectangle2Rect.left, rectangle2Rect.top);
        rectangle2Path.lineTo(rectangle2Rect.right, rectangle2Rect.top);
        rectangle2Path.lineTo(rectangle2Rect.right, rectangle2Rect.bottom);
        rectangle2Path.lineTo(rectangle2Rect.left, rectangle2Rect.bottom);
        rectangle2Path.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color2);
        canvas.drawPath(rectangle2Path, paint);
        
        // Rectangle
        canvas.save();
        canvas.translate(0f, 39f);
        currentTransformation.peek().postTranslate(0f, 39f);
        RectF rectangleRect = CacheForSeekSliderCompact.rectangleRect;
        rectangleRect.set(0f, 3f, scrollWidth, 5f);
        Path rectanglePath = CacheForSeekSliderCompact.rectanglePath;
        rectanglePath.reset();
        rectanglePath.moveTo(rectangleRect.left, rectangleRect.top);
        rectanglePath.lineTo(rectangleRect.right, rectangleRect.top);
        rectanglePath.lineTo(rectangleRect.right, rectangleRect.bottom);
        rectanglePath.lineTo(rectangleRect.left, rectangleRect.bottom);
        rectanglePath.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(upColor);
        canvas.drawPath(rectanglePath, paint);
        canvas.restore();
    }
    
    private static class CacheForMarkerLineCompact {
        private static Paint paint = new Paint();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    
    public static void drawMarkerLineCompact(Canvas canvas) {
        // General Declarations
        Paint paint = CacheForMarkerLineCompact.paint;
        
        // Local Colors
        int upColor = Color.argb(255, 76, 142, 162);
        
        // Bezier
        RectF bezierRect = CacheForMarkerLineCompact.bezierRect;
        bezierRect.set(0.5f, 15.5f, 0.5f, 21.5f);
        Path bezierPath = CacheForMarkerLineCompact.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(0.5f, 21.5f);
        bezierPath.lineTo(0.5f, 15.5f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(2f);
        paint.setStrokeJoin(Paint.Join.ROUND);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(upColor);
        canvas.drawPath(bezierPath, paint);
        canvas.restore();
    }
    
    private static class CacheForBtnLibraryCompact {
        private static Paint paint = new Paint();
        private static RectF group2 = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
    }
    
    
    public static void drawBtnLibraryCompact(Canvas canvas, RectF frame, boolean isPressed) {
        // General Declarations
        Paint paint = CacheForBtnLibraryCompact.paint;
        
        // Local Colors
        int upColor = Color.argb(255, 76, 142, 162);
        int downColor = Color.argb(255, 63, 113, 129);
        
        // Local Variables
        int btnColor = isPressed ? downColor : upColor;
        
        // Group 2
        {
            RectF group2 = CacheForBtnLibraryCompact.group2;
            group2.set(frame.left + (float) Math.floor(frame.width() * 0.17442f) + 0.5f,
                frame.top + (float) Math.floor(frame.height() * 0.28409f) + 0.5f,
                frame.left + (float) Math.floor(frame.width() * 0.68605f) + 0.5f,
                frame.top + (float) Math.floor(frame.height() * 0.73864f) + 0.5f);
            
            // Bezier
            RectF bezierRect = CacheForBtnLibraryCompact.bezierRect;
            bezierRect.set(group2.left,
                group2.top,
                group2.left + (float) Math.floor(group2.width() + 0.5f),
                group2.top + (float) Math.floor(group2.height() + 0.5f));
            Path bezierPath = CacheForBtnLibraryCompact.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(group2.left + group2.width() * 0.5f, group2.top + group2.height() * 0.175f);
            bezierPath.cubicTo(group2.left + group2.width() * 0.5f, group2.top + group2.height() * 0.0783f, group2.left + group2.width() * 0.734f, group2.top, group2.left + group2.width(), group2.top);
            bezierPath.lineTo(group2.left + group2.width(), group2.top + group2.height() * 0.825f);
            bezierPath.cubicTo(group2.left + group2.width() * 0.734f, group2.top + group2.height() * 0.825f, group2.left + group2.width() * 0.5f, group2.top + group2.height() * 0.9033f, group2.left + group2.width() * 0.5f, group2.top + group2.height());
            bezierPath.cubicTo(group2.left + group2.width() * 0.5f, group2.top + group2.height() * 0.9033f, group2.left + group2.width() * 0.26595f, group2.top + group2.height() * 0.825f, group2.left, group2.top + group2.height() * 0.825f);
            bezierPath.lineTo(group2.left, group2.top);
            bezierPath.cubicTo(group2.left + group2.width() * 0.26595f, group2.top, group2.left + group2.width() * 0.5f, group2.top + group2.height() * 0.0783f, group2.left + group2.width() * 0.5f, group2.top + group2.height() * 0.175f);
            bezierPath.lineTo(group2.left + group2.width() * 0.5f, group2.top + group2.height() * 0.175f);
            bezierPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnColor);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
            
            // Bezier 2
            RectF bezier2Rect = CacheForBtnLibraryCompact.bezier2Rect;
            bezier2Rect.set(group2.left + (float) Math.floor(group2.width() * 0.5f + 0.5f),
                group2.top + (float) Math.floor(group2.height() * 0.175f) + 0.5f,
                group2.left + (float) Math.floor(group2.width() * 0.50005f + 0.5f) + 0f,
                group2.top + (float) Math.floor(group2.height() * 0.99375f - 0.38f) + 0.88f);
            Path bezier2Path = CacheForBtnLibraryCompact.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(group2.left + group2.width() * 0.5f, group2.top + group2.height() * 0.175f);
            bezier2Path.lineTo(group2.left + group2.width() * 0.5f, group2.top + group2.height() * 0.99375f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnColor);
            canvas.drawPath(bezier2Path, paint);
            canvas.restore();
        }
    }
    
    private static class CacheForBasicTopBorder {
        private static Paint paint = new Paint();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    
    public static void drawBasicTopBorder(Canvas canvas, RectF frame) {
        // General Declarations
        Paint paint = CacheForBasicTopBorder.paint;
        
        // Bezier
        RectF bezierRect = CacheForBasicTopBorder.bezierRect;
        bezierRect.set(frame.left + 0.5f,
            frame.top + 0.5f,
            frame.left + 43.5f,
            frame.top + 0.5f);
        Path bezierPath = CacheForBasicTopBorder.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(frame.left + frame.width() * 0.01136f, frame.top + 0.5f);
        bezierPath.lineTo(frame.left + frame.width() * 0.98864f, frame.top + 0.5f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(2f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(Color.LTGRAY);
        canvas.drawPath(bezierPath, paint);
        canvas.restore();
    }
    
    private static class CacheForBtnItunes {
        private static Paint paint = new Paint();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
        private static RectF bezier4Rect = new RectF();
        private static Path bezier4Path = new Path();
        private static RectF bezier5Rect = new RectF();
        private static Path bezier5Path = new Path();
        private static RectF bezier6Rect = new RectF();
        private static Path bezier6Path = new Path();
        private static RectF bezier7Rect = new RectF();
        private static Path bezier7Path = new Path();
        private static RectF bezier8Rect = new RectF();
        private static Path bezier8Path = new Path();
        private static RectF bezier9Rect = new RectF();
        private static Path bezier9Path = new Path();
        private static RectF bezier10Rect = new RectF();
        private static Path bezier10Path = new Path();
        private static RectF bezier11Rect = new RectF();
        private static Path bezier11Path = new Path();
        private static RectF bezier12Rect = new RectF();
        private static Path bezier12Path = new Path();
        private static RectF bezier13Rect = new RectF();
        private static Path bezier13Path = new Path();
        private static RectF bezier14Rect = new RectF();
        private static Path bezier14Path = new Path();
        private static RectF bezier15Rect = new RectF();
        private static Path bezier15Path = new Path();
        private static RectF bezier16Rect = new RectF();
        private static Path bezier16Path = new Path();
        private static RectF bezier17Rect = new RectF();
        private static Path bezier17Path = new Path();
    }
    
    
    public static void drawBtnItunes(Canvas canvas) {
        // General Declarations
        Paint paint = CacheForBtnItunes.paint;
        
        // Local Colors
        int fillColor3 = Color.argb(255, 255, 255, 255);
        int fillColor2 = Color.argb(255, 0, 0, 0);
        int fillColor = Color.argb(255, 149, 149, 149);
        
        // Group 2
        {
            // Bezier
            RectF bezierRect = CacheForBtnItunes.bezierRect;
            bezierRect.set(1f, 1f, 111f, 41f);
            Path bezierPath = CacheForBtnItunes.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(104.37f, 1f);
            bezierPath.lineTo(7.63f, 1f);
            bezierPath.cubicTo(7.37f, 1f, 7.12f, 1f, 6.87f, 1f);
            bezierPath.cubicTo(6.65f, 1f, 6.44f, 1f, 6.23f, 1.01f);
            bezierPath.cubicTo(5.77f, 1.03f, 5.3f, 1.05f, 4.84f, 1.14f);
            bezierPath.cubicTo(4.37f, 1.22f, 3.94f, 1.36f, 3.52f, 1.57f);
            bezierPath.cubicTo(3.1f, 1.78f, 2.72f, 2.06f, 2.38f, 2.39f);
            bezierPath.cubicTo(2.06f, 2.72f, 1.78f, 3.1f, 1.57f, 3.52f);
            bezierPath.cubicTo(1.36f, 3.94f, 1.22f, 4.37f, 1.14f, 4.84f);
            bezierPath.cubicTo(1.05f, 5.3f, 1.02f, 5.77f, 1.01f, 6.23f);
            bezierPath.cubicTo(1f, 6.44f, 1f, 6.65f, 1f, 6.87f);
            bezierPath.cubicTo(1f, 7.12f, 1f, 7.37f, 1f, 7.63f);
            bezierPath.lineTo(1f, 34.38f);
            bezierPath.cubicTo(1f, 34.63f, 1f, 34.88f, 1f, 35.13f);
            bezierPath.cubicTo(1f, 35.35f, 1f, 35.56f, 1.01f, 35.77f);
            bezierPath.cubicTo(1.02f, 36.24f, 1.05f, 36.71f, 1.14f, 37.16f);
            bezierPath.cubicTo(1.22f, 37.63f, 1.36f, 38.07f, 1.57f, 38.49f);
            bezierPath.cubicTo(1.78f, 38.9f, 2.06f, 39.29f, 2.38f, 39.61f);
            bezierPath.cubicTo(2.72f, 39.95f, 3.1f, 40.23f, 3.52f, 40.44f);
            bezierPath.cubicTo(3.94f, 40.65f, 4.37f, 40.78f, 4.84f, 40.88f);
            bezierPath.cubicTo(5.3f, 40.95f, 5.77f, 40.98f, 6.23f, 40.99f);
            bezierPath.cubicTo(6.44f, 40.99f, 6.65f, 41f, 6.87f, 41f);
            bezierPath.cubicTo(7.12f, 41f, 7.37f, 41f, 7.63f, 41f);
            bezierPath.lineTo(104.37f, 41f);
            bezierPath.cubicTo(104.62f, 41f, 104.88f, 41f, 105.13f, 41f);
            bezierPath.cubicTo(105.34f, 41f, 105.56f, 40.99f, 105.77f, 40.99f);
            bezierPath.cubicTo(106.24f, 40.98f, 106.71f, 40.95f, 107.17f, 40.88f);
            bezierPath.cubicTo(107.63f, 40.78f, 108.06f, 40.65f, 108.49f, 40.44f);
            bezierPath.cubicTo(108.91f, 40.23f, 109.28f, 39.95f, 109.61f, 39.61f);
            bezierPath.cubicTo(109.94f, 39.29f, 110.22f, 38.9f, 110.43f, 38.49f);
            bezierPath.cubicTo(110.65f, 38.07f, 110.79f, 37.63f, 110.87f, 37.16f);
            bezierPath.cubicTo(110.95f, 36.71f, 110.98f, 36.24f, 110.99f, 35.77f);
            bezierPath.cubicTo(111f, 35.56f, 111f, 35.35f, 111f, 35.13f);
            bezierPath.cubicTo(111f, 34.88f, 111f, 34.63f, 111f, 34.38f);
            bezierPath.lineTo(111f, 7.63f);
            bezierPath.cubicTo(111f, 7.37f, 111f, 7.12f, 111f, 6.87f);
            bezierPath.cubicTo(111f, 6.65f, 111f, 6.44f, 110.99f, 6.23f);
            bezierPath.cubicTo(110.98f, 5.77f, 110.95f, 5.3f, 110.87f, 4.84f);
            bezierPath.cubicTo(110.78f, 4.37f, 110.65f, 3.94f, 110.43f, 3.52f);
            bezierPath.cubicTo(110.22f, 3.1f, 109.94f, 2.72f, 109.61f, 2.38f);
            bezierPath.cubicTo(109.28f, 2.06f, 108.9f, 1.78f, 108.48f, 1.57f);
            bezierPath.cubicTo(108.06f, 1.36f, 107.63f, 1.22f, 107.16f, 1.13f);
            bezierPath.cubicTo(106.7f, 1.05f, 106.23f, 1.02f, 105.77f, 1.01f);
            bezierPath.cubicTo(105.56f, 1f, 105.34f, 1f, 105.13f, 1f);
            bezierPath.cubicTo(104.88f, 1f, 104.62f, 1f, 104.37f, 1f);
            bezierPath.lineTo(104.37f, 1f);
            bezierPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(fillColor);
            canvas.drawPath(bezierPath, paint);
            
            // Bezier 2
            RectF bezier2Rect = CacheForBtnItunes.bezier2Rect;
            bezier2Rect.set(1.99f, 1.98f, 110.01f, 40.02f);
            Path bezier2Path = CacheForBtnItunes.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(104.37f, 1.98f);
            bezier2Path.lineTo(105.12f, 1.99f);
            bezier2Path.cubicTo(105.33f, 1.99f, 105.54f, 1.99f, 105.74f, 2f);
            bezier2Path.cubicTo(106.12f, 2.01f, 106.56f, 2.03f, 106.99f, 2.11f);
            bezier2Path.cubicTo(107.38f, 2.18f, 107.72f, 2.29f, 108.04f, 2.45f);
            bezier2Path.cubicTo(108.36f, 2.61f, 108.65f, 2.83f, 108.91f, 3.09f);
            bezier2Path.cubicTo(109.17f, 3.34f, 109.39f, 3.64f, 109.55f, 3.96f);
            bezier2Path.cubicTo(109.72f, 4.29f, 109.82f, 4.62f, 109.9f, 5.01f);
            bezier2Path.cubicTo(109.97f, 5.44f, 109.99f, 5.88f, 110f, 6.25f);
            bezier2Path.cubicTo(110.01f, 6.46f, 110.01f, 6.67f, 110.01f, 6.88f);
            bezier2Path.cubicTo(110.01f, 7.13f, 110.01f, 7.37f, 110.01f, 7.63f);
            bezier2Path.lineTo(110.01f, 34.38f);
            bezier2Path.cubicTo(110.01f, 34.63f, 110.01f, 34.88f, 110.01f, 35.13f);
            bezier2Path.cubicTo(110.01f, 35.34f, 110.01f, 35.55f, 110f, 35.75f);
            bezier2Path.cubicTo(109.99f, 36.13f, 109.97f, 36.57f, 109.9f, 36.99f);
            bezier2Path.cubicTo(109.83f, 37.38f, 109.72f, 37.72f, 109.55f, 38.05f);
            bezier2Path.cubicTo(109.39f, 38.37f, 109.17f, 38.66f, 108.91f, 38.92f);
            bezier2Path.cubicTo(108.65f, 39.18f, 108.36f, 39.39f, 108.04f, 39.55f);
            bezier2Path.cubicTo(107.72f, 39.72f, 107.38f, 39.83f, 106.99f, 39.9f);
            bezier2Path.cubicTo(106.56f, 39.97f, 106.1f, 40f, 105.75f, 40.01f);
            bezier2Path.cubicTo(105.54f, 40.01f, 105.33f, 40.02f, 105.12f, 40.02f);
            bezier2Path.cubicTo(104.87f, 40.02f, 104.62f, 40.02f, 104.37f, 40.02f);
            bezier2Path.lineTo(7.63f, 40.02f);
            bezier2Path.cubicTo(7.62f, 40.02f, 7.62f, 40.02f, 7.62f, 40.02f);
            bezier2Path.cubicTo(7.37f, 40.02f, 7.12f, 40.02f, 6.87f, 40.02f);
            bezier2Path.cubicTo(6.67f, 40.02f, 6.46f, 40.01f, 6.25f, 40.01f);
            bezier2Path.cubicTo(5.9f, 40f, 5.44f, 39.97f, 5.01f, 39.9f);
            bezier2Path.cubicTo(4.62f, 39.83f, 4.29f, 39.72f, 3.96f, 39.55f);
            bezier2Path.cubicTo(3.64f, 39.39f, 3.34f, 39.18f, 3.09f, 38.92f);
            bezier2Path.cubicTo(2.83f, 38.66f, 2.61f, 38.37f, 2.45f, 38.05f);
            bezier2Path.cubicTo(2.29f, 37.72f, 2.18f, 37.38f, 2.11f, 36.99f);
            bezier2Path.cubicTo(2.03f, 36.57f, 2.01f, 36.13f, 2f, 35.75f);
            bezier2Path.cubicTo(1.99f, 35.54f, 1.99f, 35.33f, 1.99f, 35.13f);
            bezier2Path.lineTo(1.99f, 34.53f);
            bezier2Path.lineTo(1.99f, 34.38f);
            bezier2Path.lineTo(1.99f, 7.63f);
            bezier2Path.lineTo(1.99f, 7.48f);
            bezier2Path.lineTo(1.99f, 6.88f);
            bezier2Path.cubicTo(1.99f, 6.67f, 1.99f, 6.46f, 2f, 6.25f);
            bezier2Path.cubicTo(2.01f, 5.88f, 2.03f, 5.44f, 2.11f, 5.01f);
            bezier2Path.cubicTo(2.18f, 4.62f, 2.29f, 4.29f, 2.45f, 3.96f);
            bezier2Path.cubicTo(2.61f, 3.64f, 2.83f, 3.34f, 3.09f, 3.09f);
            bezier2Path.cubicTo(3.34f, 2.83f, 3.64f, 2.61f, 3.96f, 2.45f);
            bezier2Path.cubicTo(4.29f, 2.29f, 4.62f, 2.18f, 5.01f, 2.11f);
            bezier2Path.cubicTo(5.44f, 2.03f, 5.88f, 2.01f, 6.25f, 2f);
            bezier2Path.cubicTo(6.46f, 1.99f, 6.67f, 1.99f, 6.88f, 1.99f);
            bezier2Path.lineTo(7.63f, 1.99f);
            bezier2Path.lineTo(104.37f, 1.98f);
            bezier2Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(fillColor2);
            canvas.drawPath(bezier2Path, paint);
            
            // Group 3
            {
                // Group 4
                {
                    // Bezier 3
                    RectF bezier3Rect = CacheForBtnItunes.bezier3Rect;
                    bezier3Rect.set(13.79f, 13.37f, 34.55f, 32.73f);
                    Path bezier3Path = CacheForBtnItunes.bezier3Path;
                    bezier3Path.reset();
                    bezier3Path.moveTo(31.13f, 20.78f);
                    bezier3Path.cubicTo(31.1f, 17.56f, 33.77f, 15.99f, 33.89f, 15.92f);
                    bezier3Path.cubicTo(32.38f, 13.72f, 30.04f, 13.42f, 29.21f, 13.39f);
                    bezier3Path.cubicTo(27.25f, 13.19f, 25.34f, 14.57f, 24.34f, 14.57f);
                    bezier3Path.cubicTo(23.31f, 14.57f, 21.77f, 13.41f, 20.11f, 13.45f);
                    bezier3Path.cubicTo(17.97f, 13.48f, 15.97f, 14.72f, 14.87f, 16.64f);
                    bezier3Path.cubicTo(12.6f, 20.57f, 14.29f, 26.33f, 16.46f, 29.5f);
                    bezier3Path.cubicTo(17.55f, 31.05f, 18.82f, 32.79f, 20.48f, 32.73f);
                    bezier3Path.cubicTo(22.1f, 32.66f, 22.71f, 31.69f, 24.67f, 31.69f);
                    bezier3Path.cubicTo(26.62f, 31.69f, 27.19f, 32.73f, 28.88f, 32.69f);
                    bezier3Path.cubicTo(30.62f, 32.66f, 31.72f, 31.13f, 32.77f, 29.56f);
                    bezier3Path.cubicTo(34.02f, 27.78f, 34.53f, 26.03f, 34.55f, 25.94f);
                    bezier3Path.cubicTo(34.51f, 25.92f, 31.16f, 24.65f, 31.13f, 20.78f);
                    bezier3Path.close();
                    
                    paint.reset();
                    paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                    paint.setStyle(Paint.Style.FILL);
                    paint.setColor(fillColor3);
                    canvas.drawPath(bezier3Path, paint);
                    
                    // Bezier 4
                    RectF bezier4Rect = CacheForBtnItunes.bezier4Rect;
                    bezier4Rect.set(24.11f, 7.22f, 29.26f, 13.11f);
                    Path bezier4Path = CacheForBtnItunes.bezier4Path;
                    bezier4Path.reset();
                    bezier4Path.moveTo(27.93f, 11.31f);
                    bezier4Path.cubicTo(28.8f, 10.21f, 29.4f, 8.73f, 29.23f, 7.22f);
                    bezier4Path.cubicTo(27.97f, 7.27f, 26.39f, 8.09f, 25.48f, 9.16f);
                    bezier4Path.cubicTo(24.67f, 10.1f, 23.95f, 11.65f, 24.14f, 13.1f);
                    bezier4Path.cubicTo(25.56f, 13.21f, 27.02f, 12.38f, 27.93f, 11.31f);
                    bezier4Path.close();
                    
                    paint.reset();
                    paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                    paint.setStyle(Paint.Style.FILL);
                    paint.setColor(fillColor3);
                    canvas.drawPath(bezier4Path, paint);
                }
            }
            
            // Group 5
            {
                // Bezier 5
                RectF bezier5Rect = CacheForBtnItunes.bezier5Rect;
                bezier5Rect.set(45.32f, 8.03f, 50.48f, 14.44f);
                Path bezier5Path = CacheForBtnItunes.bezier5Path;
                bezier5Path.reset();
                bezier5Path.moveTo(50.48f, 14.09f);
                bezier5Path.cubicTo(49.87f, 14.32f, 49.23f, 14.44f, 48.55f, 14.44f);
                bezier5Path.cubicTo(47.54f, 14.44f, 46.76f, 14.16f, 46.19f, 13.62f);
                bezier5Path.cubicTo(45.61f, 13.05f, 45.32f, 12.28f, 45.32f, 11.29f);
                bezier5Path.cubicTo(45.32f, 10.31f, 45.63f, 9.52f, 46.25f, 8.92f);
                bezier5Path.cubicTo(46.88f, 8.32f, 47.7f, 8.03f, 48.72f, 8.03f);
                bezier5Path.cubicTo(49.37f, 8.03f, 49.89f, 8.12f, 50.29f, 8.31f);
                bezier5Path.lineTo(50.07f, 9.13f);
                bezier5Path.cubicTo(49.68f, 8.96f, 49.23f, 8.87f, 48.7f, 8.87f);
                bezier5Path.cubicTo(48f, 8.87f, 47.44f, 9.07f, 47.02f, 9.48f);
                bezier5Path.cubicTo(46.59f, 9.9f, 46.38f, 10.49f, 46.38f, 11.23f);
                bezier5Path.cubicTo(46.38f, 11.98f, 46.58f, 12.56f, 46.99f, 12.99f);
                bezier5Path.cubicTo(47.38f, 13.4f, 47.92f, 13.61f, 48.6f, 13.61f);
                bezier5Path.cubicTo(49.02f, 13.61f, 49.32f, 13.56f, 49.51f, 13.48f);
                bezier5Path.lineTo(49.51f, 11.77f);
                bezier5Path.lineTo(48.36f, 11.77f);
                bezier5Path.lineTo(48.36f, 10.98f);
                bezier5Path.lineTo(50.48f, 10.98f);
                bezier5Path.lineTo(50.48f, 14.09f);
                bezier5Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(fillColor3);
                canvas.drawPath(bezier5Path, paint);
                
                // Bezier 6
                RectF bezier6Rect = CacheForBtnItunes.bezier6Rect;
                bezier6Rect.set(51.7f, 9.74f, 55.73f, 14.46f);
                Path bezier6Path = CacheForBtnItunes.bezier6Path;
                bezier6Path.reset();
                bezier6Path.moveTo(55.73f, 11.89f);
                bezier6Path.cubicTo(55.73f, 12.07f, 55.71f, 12.23f, 55.69f, 12.35f);
                bezier6Path.lineTo(52.67f, 12.35f);
                bezier6Path.cubicTo(52.68f, 12.8f, 52.83f, 13.14f, 53.11f, 13.38f);
                bezier6Path.cubicTo(53.36f, 13.59f, 53.69f, 13.69f, 54.1f, 13.69f);
                bezier6Path.cubicTo(54.54f, 13.69f, 54.95f, 13.62f, 55.32f, 13.48f);
                bezier6Path.lineTo(55.48f, 14.18f);
                bezier6Path.cubicTo(55.05f, 14.36f, 54.54f, 14.46f, 53.96f, 14.46f);
                bezier6Path.cubicTo(53.25f, 14.46f, 52.7f, 14.25f, 52.3f, 13.84f);
                bezier6Path.cubicTo(51.9f, 13.42f, 51.7f, 12.87f, 51.7f, 12.17f);
                bezier6Path.cubicTo(51.7f, 11.49f, 51.89f, 10.92f, 52.26f, 10.47f);
                bezier6Path.cubicTo(52.65f, 9.98f, 53.18f, 9.74f, 53.84f, 9.74f);
                bezier6Path.cubicTo(54.5f, 9.74f, 54.99f, 9.98f, 55.33f, 10.47f);
                bezier6Path.cubicTo(55.59f, 10.85f, 55.73f, 11.33f, 55.73f, 11.89f);
                bezier6Path.close();
                bezier6Path.moveTo(54.77f, 11.63f);
                bezier6Path.cubicTo(54.77f, 11.33f, 54.71f, 11.08f, 54.57f, 10.86f);
                bezier6Path.cubicTo(54.4f, 10.58f, 54.13f, 10.44f, 53.77f, 10.44f);
                bezier6Path.cubicTo(53.44f, 10.44f, 53.17f, 10.58f, 52.97f, 10.85f);
                bezier6Path.cubicTo(52.8f, 11.07f, 52.7f, 11.33f, 52.67f, 11.63f);
                bezier6Path.lineTo(54.77f, 11.63f);
                bezier6Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(fillColor3);
                canvas.drawPath(bezier6Path, paint);
                
                // Bezier 7
                RectF bezier7Rect = CacheForBtnItunes.bezier7Rect;
                bezier7Rect.set(56.57f, 8.72f, 59.32f, 14.47f);
                Path bezier7Path = CacheForBtnItunes.bezier7Path;
                bezier7Path.reset();
                bezier7Path.moveTo(59.32f, 10.6f);
                bezier7Path.lineTo(58.21f, 10.6f);
                bezier7Path.lineTo(58.21f, 12.8f);
                bezier7Path.cubicTo(58.21f, 13.36f, 58.41f, 13.64f, 58.8f, 13.64f);
                bezier7Path.cubicTo(58.98f, 13.64f, 59.13f, 13.62f, 59.25f, 13.59f);
                bezier7Path.lineTo(59.28f, 14.35f);
                bezier7Path.cubicTo(59.08f, 14.43f, 58.82f, 14.47f, 58.5f, 14.47f);
                bezier7Path.cubicTo(58.1f, 14.47f, 57.79f, 14.34f, 57.56f, 14.1f);
                bezier7Path.cubicTo(57.34f, 13.86f, 57.23f, 13.45f, 57.23f, 12.88f);
                bezier7Path.lineTo(57.23f, 10.6f);
                bezier7Path.lineTo(56.57f, 10.6f);
                bezier7Path.lineTo(56.57f, 9.84f);
                bezier7Path.lineTo(57.23f, 9.84f);
                bezier7Path.lineTo(57.23f, 9.01f);
                bezier7Path.lineTo(58.21f, 8.72f);
                bezier7Path.lineTo(58.21f, 9.84f);
                bezier7Path.lineTo(59.32f, 9.84f);
                bezier7Path.lineTo(59.32f, 10.6f);
                bezier7Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(fillColor3);
                canvas.drawPath(bezier7Path, paint);
                
                // Bezier 8
                RectF bezier8Rect = CacheForBtnItunes.bezier8Rect;
                bezier8Rect.set(63.03f, 7.89f, 64.26f, 14.37f);
                Path bezier8Path = CacheForBtnItunes.bezier8Path;
                bezier8Path.reset();
                bezier8Path.moveTo(64.26f, 8.49f);
                bezier8Path.cubicTo(64.26f, 8.67f, 64.2f, 8.82f, 64.09f, 8.93f);
                bezier8Path.cubicTo(63.97f, 9.04f, 63.82f, 9.1f, 63.63f, 9.1f);
                bezier8Path.cubicTo(63.46f, 9.1f, 63.32f, 9.04f, 63.21f, 8.92f);
                bezier8Path.cubicTo(63.09f, 8.81f, 63.03f, 8.66f, 63.03f, 8.49f);
                bezier8Path.cubicTo(63.03f, 8.32f, 63.09f, 8.17f, 63.21f, 8.06f);
                bezier8Path.cubicTo(63.33f, 7.95f, 63.48f, 7.89f, 63.65f, 7.89f);
                bezier8Path.cubicTo(63.82f, 7.89f, 63.97f, 7.95f, 64.09f, 8.06f);
                bezier8Path.cubicTo(64.2f, 8.17f, 64.26f, 8.32f, 64.26f, 8.49f);
                bezier8Path.close();
                bezier8Path.moveTo(64.15f, 14.37f);
                bezier8Path.lineTo(63.14f, 14.37f);
                bezier8Path.lineTo(63.14f, 9.84f);
                bezier8Path.lineTo(64.15f, 9.84f);
                bezier8Path.lineTo(64.15f, 14.37f);
                bezier8Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(fillColor3);
                canvas.drawPath(bezier8Path, paint);
                
                // Bezier 9
                RectF bezier9Rect = CacheForBtnItunes.bezier9Rect;
                bezier9Rect.set(65.32f, 8.72f, 68.07f, 14.47f);
                Path bezier9Path = CacheForBtnItunes.bezier9Path;
                bezier9Path.reset();
                bezier9Path.moveTo(68.07f, 10.6f);
                bezier9Path.lineTo(66.97f, 10.6f);
                bezier9Path.lineTo(66.97f, 12.8f);
                bezier9Path.cubicTo(66.97f, 13.36f, 67.16f, 13.64f, 67.55f, 13.64f);
                bezier9Path.cubicTo(67.73f, 13.64f, 67.88f, 13.62f, 68f, 13.59f);
                bezier9Path.lineTo(68.03f, 14.35f);
                bezier9Path.cubicTo(67.83f, 14.43f, 67.57f, 14.47f, 67.25f, 14.47f);
                bezier9Path.cubicTo(66.85f, 14.47f, 66.54f, 14.34f, 66.31f, 14.1f);
                bezier9Path.cubicTo(66.09f, 13.86f, 65.98f, 13.45f, 65.98f, 12.88f);
                bezier9Path.lineTo(65.98f, 10.6f);
                bezier9Path.lineTo(65.32f, 10.6f);
                bezier9Path.lineTo(65.32f, 9.84f);
                bezier9Path.lineTo(65.98f, 9.84f);
                bezier9Path.lineTo(65.98f, 9.01f);
                bezier9Path.lineTo(66.97f, 8.72f);
                bezier9Path.lineTo(66.97f, 9.84f);
                bezier9Path.lineTo(68.07f, 9.84f);
                bezier9Path.lineTo(68.07f, 10.6f);
                bezier9Path.lineTo(68.07f, 10.6f);
                bezier9Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(fillColor3);
                canvas.drawPath(bezier9Path, paint);
                
                // Bezier 10
                RectF bezier10Rect = CacheForBtnItunes.bezier10Rect;
                bezier10Rect.set(71.6f, 9.75f, 76.03f, 14.48f);
                Path bezier10Path = CacheForBtnItunes.bezier10Path;
                bezier10Path.reset();
                bezier10Path.moveTo(76.03f, 12.07f);
                bezier10Path.cubicTo(76.03f, 12.77f, 75.83f, 13.34f, 75.44f, 13.79f);
                bezier10Path.cubicTo(75.02f, 14.25f, 74.47f, 14.48f, 73.78f, 14.48f);
                bezier10Path.cubicTo(73.11f, 14.48f, 72.58f, 14.25f, 72.19f, 13.81f);
                bezier10Path.cubicTo(71.79f, 13.37f, 71.6f, 12.82f, 71.6f, 12.15f);
                bezier10Path.cubicTo(71.6f, 11.44f, 71.8f, 10.87f, 72.21f, 10.42f);
                bezier10Path.cubicTo(72.61f, 9.97f, 73.16f, 9.75f, 73.85f, 9.75f);
                bezier10Path.cubicTo(74.52f, 9.75f, 75.05f, 9.97f, 75.46f, 10.41f);
                bezier10Path.cubicTo(75.84f, 10.84f, 76.03f, 11.39f, 76.03f, 12.07f);
                bezier10Path.close();
                bezier10Path.moveTo(74.99f, 12.1f);
                bezier10Path.cubicTo(74.99f, 11.69f, 74.9f, 11.33f, 74.72f, 11.03f);
                bezier10Path.cubicTo(74.51f, 10.67f, 74.21f, 10.49f, 73.82f, 10.49f);
                bezier10Path.cubicTo(73.41f, 10.49f, 73.1f, 10.67f, 72.89f, 11.03f);
                bezier10Path.cubicTo(72.71f, 11.33f, 72.62f, 11.69f, 72.62f, 12.12f);
                bezier10Path.cubicTo(72.62f, 12.54f, 72.71f, 12.9f, 72.89f, 13.2f);
                bezier10Path.cubicTo(73.11f, 13.56f, 73.41f, 13.74f, 73.8f, 13.74f);
                bezier10Path.cubicTo(74.19f, 13.74f, 74.49f, 13.55f, 74.71f, 13.19f);
                bezier10Path.cubicTo(74.9f, 12.88f, 74.99f, 12.52f, 74.99f, 12.1f);
                bezier10Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(fillColor3);
                canvas.drawPath(bezier10Path, paint);
                
                // Bezier 11
                RectF bezier11Rect = CacheForBtnItunes.bezier11Rect;
                bezier11Rect.set(77.33f, 9.75f, 81.3f, 14.37f);
                Path bezier11Path = CacheForBtnItunes.bezier11Path;
                bezier11Path.reset();
                bezier11Path.moveTo(81.3f, 14.37f);
                bezier11Path.lineTo(80.29f, 14.37f);
                bezier11Path.lineTo(80.29f, 11.78f);
                bezier11Path.cubicTo(80.29f, 10.98f, 79.99f, 10.58f, 79.38f, 10.58f);
                bezier11Path.cubicTo(79.08f, 10.58f, 78.84f, 10.69f, 78.65f, 10.91f);
                bezier11Path.cubicTo(78.47f, 11.13f, 78.37f, 11.39f, 78.37f, 11.69f);
                bezier11Path.lineTo(78.37f, 14.37f);
                bezier11Path.lineTo(77.37f, 14.37f);
                bezier11Path.lineTo(77.37f, 11.14f);
                bezier11Path.cubicTo(77.37f, 10.74f, 77.35f, 10.31f, 77.33f, 9.84f);
                bezier11Path.lineTo(78.21f, 9.84f);
                bezier11Path.lineTo(78.26f, 10.55f);
                bezier11Path.lineTo(78.29f, 10.55f);
                bezier11Path.cubicTo(78.41f, 10.33f, 78.58f, 10.15f, 78.81f, 10f);
                bezier11Path.cubicTo(79.08f, 9.83f, 79.39f, 9.75f, 79.72f, 9.75f);
                bezier11Path.cubicTo(80.15f, 9.75f, 80.5f, 9.89f, 80.78f, 10.16f);
                bezier11Path.cubicTo(81.13f, 10.5f, 81.3f, 11f, 81.3f, 11.66f);
                bezier11Path.lineTo(81.3f, 14.37f);
                bezier11Path.lineTo(81.3f, 14.37f);
                bezier11Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(fillColor3);
                canvas.drawPath(bezier11Path, paint);
            }
            
            // Group 6
            {
                // Bezier 12
                RectF bezier12Rect = CacheForBtnItunes.bezier12Rect;
                bezier12Rect.set(45.44f, 18.78f, 48.05f, 32.5f);
                Path bezier12Path = CacheForBtnItunes.bezier12Path;
                bezier12Path.reset();
                bezier12Path.moveTo(48.05f, 20.04f);
                bezier12Path.cubicTo(48.05f, 20.42f, 47.92f, 20.73f, 47.67f, 20.97f);
                bezier12Path.cubicTo(47.42f, 21.21f, 47.1f, 21.32f, 46.7f, 21.32f);
                bezier12Path.cubicTo(46.35f, 21.32f, 46.05f, 21.2f, 45.8f, 20.96f);
                bezier12Path.cubicTo(45.56f, 20.72f, 45.44f, 20.41f, 45.44f, 20.04f);
                bezier12Path.cubicTo(45.44f, 19.67f, 45.56f, 19.37f, 45.81f, 19.13f);
                bezier12Path.cubicTo(46.06f, 18.9f, 46.37f, 18.78f, 46.74f, 18.78f);
                bezier12Path.cubicTo(47.11f, 18.78f, 47.42f, 18.9f, 47.67f, 19.13f);
                bezier12Path.cubicTo(47.92f, 19.37f, 48.05f, 19.67f, 48.05f, 20.04f);
                bezier12Path.close();
                bezier12Path.moveTo(47.81f, 32.5f);
                bezier12Path.lineTo(45.68f, 32.5f);
                bezier12Path.lineTo(45.68f, 22.9f);
                bezier12Path.lineTo(47.81f, 22.9f);
                bezier12Path.lineTo(47.81f, 32.5f);
                bezier12Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(fillColor3);
                canvas.drawPath(bezier12Path, paint);
                
                // Bezier 13
                RectF bezier13Rect = CacheForBtnItunes.bezier13Rect;
                bezier13Rect.set(49.55f, 19.19f, 59.28f, 32.5f);
                Path bezier13Path = CacheForBtnItunes.bezier13Path;
                bezier13Path.reset();
                bezier13Path.moveTo(59.28f, 20.99f);
                bezier13Path.lineTo(55.47f, 20.99f);
                bezier13Path.lineTo(55.47f, 32.5f);
                bezier13Path.lineTo(53.34f, 32.5f);
                bezier13Path.lineTo(53.34f, 20.99f);
                bezier13Path.lineTo(49.55f, 20.99f);
                bezier13Path.lineTo(49.55f, 19.19f);
                bezier13Path.lineTo(59.28f, 19.19f);
                bezier13Path.lineTo(59.28f, 20.99f);
                bezier13Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(fillColor3);
                canvas.drawPath(bezier13Path, paint);
                
                // Bezier 14
                RectF bezier14Rect = CacheForBtnItunes.bezier14Rect;
                bezier14Rect.set(59.82f, 22.9f, 68.17f, 32.72f);
                Path bezier14Path = CacheForBtnItunes.bezier14Path;
                bezier14Path.reset();
                bezier14Path.moveTo(68.17f, 32.5f);
                bezier14Path.lineTo(66.3f, 32.5f);
                bezier14Path.lineTo(66.18f, 31.04f);
                bezier14Path.lineTo(66.14f, 31.04f);
                bezier14Path.cubicTo(65.47f, 32.16f, 64.45f, 32.72f, 63.1f, 32.72f);
                bezier14Path.cubicTo(62.15f, 32.72f, 61.39f, 32.42f, 60.82f, 31.83f);
                bezier14Path.cubicTo(60.15f, 31.11f, 59.82f, 30.01f, 59.82f, 28.55f);
                bezier14Path.lineTo(59.82f, 22.9f);
                bezier14Path.lineTo(61.95f, 22.9f);
                bezier14Path.lineTo(61.95f, 28.2f);
                bezier14Path.cubicTo(61.95f, 30.04f, 62.58f, 30.96f, 63.85f, 30.96f);
                bezier14Path.cubicTo(64.8f, 30.96f, 65.45f, 30.5f, 65.82f, 29.58f);
                bezier14Path.cubicTo(65.91f, 29.34f, 65.96f, 29.07f, 65.96f, 28.77f);
                bezier14Path.lineTo(65.96f, 22.9f);
                bezier14Path.lineTo(68.09f, 22.9f);
                bezier14Path.lineTo(68.09f, 29.74f);
                bezier14Path.cubicTo(68.09f, 30.65f, 68.12f, 31.57f, 68.17f, 32.5f);
                bezier14Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(fillColor3);
                canvas.drawPath(bezier14Path, paint);
                
                // Bezier 15
                RectF bezier15Rect = CacheForBtnItunes.bezier15Rect;
                bezier15Rect.set(70.97f, 22.71f, 79.39f, 32.5f);
                Path bezier15Path = CacheForBtnItunes.bezier15Path;
                bezier15Path.reset();
                bezier15Path.moveTo(79.39f, 32.5f);
                bezier15Path.lineTo(77.26f, 32.5f);
                bezier15Path.lineTo(77.26f, 27.01f);
                bezier15Path.cubicTo(77.26f, 25.31f, 76.61f, 24.46f, 75.32f, 24.46f);
                bezier15Path.cubicTo(74.69f, 24.46f, 74.18f, 24.7f, 73.78f, 25.16f);
                bezier15Path.cubicTo(73.39f, 25.63f, 73.19f, 26.18f, 73.19f, 26.81f);
                bezier15Path.lineTo(73.19f, 32.5f);
                bezier15Path.lineTo(71.05f, 32.5f);
                bezier15Path.lineTo(71.05f, 25.65f);
                bezier15Path.cubicTo(71.05f, 24.81f, 71.03f, 23.89f, 70.97f, 22.9f);
                bezier15Path.lineTo(72.85f, 22.9f);
                bezier15Path.lineTo(72.95f, 24.4f);
                bezier15Path.lineTo(73.01f, 24.4f);
                bezier15Path.cubicTo(73.26f, 23.94f, 73.63f, 23.55f, 74.12f, 23.25f);
                bezier15Path.cubicTo(74.69f, 22.89f, 75.34f, 22.71f, 76.05f, 22.71f);
                bezier15Path.cubicTo(76.95f, 22.71f, 77.69f, 23f, 78.28f, 23.58f);
                bezier15Path.cubicTo(79.02f, 24.29f, 79.39f, 25.35f, 79.39f, 26.76f);
                bezier15Path.lineTo(79.39f, 32.5f);
                bezier15Path.lineTo(79.39f, 32.5f);
                bezier15Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(fillColor3);
                canvas.drawPath(bezier15Path, paint);
                
                // Bezier 16
                RectF bezier16Rect = CacheForBtnItunes.bezier16Rect;
                bezier16Rect.set(81.74f, 22.69f, 90.27f, 32.68f);
                Path bezier16Path = CacheForBtnItunes.bezier16Path;
                bezier16Path.reset();
                bezier16Path.moveTo(90.27f, 27.25f);
                bezier16Path.cubicTo(90.27f, 27.63f, 90.25f, 27.95f, 90.19f, 28.22f);
                bezier16Path.lineTo(83.79f, 28.22f);
                bezier16Path.cubicTo(83.82f, 29.16f, 84.13f, 29.89f, 84.72f, 30.39f);
                bezier16Path.cubicTo(85.26f, 30.84f, 85.96f, 31.06f, 86.82f, 31.06f);
                bezier16Path.cubicTo(87.76f, 31.06f, 88.63f, 30.91f, 89.4f, 30.61f);
                bezier16Path.lineTo(89.74f, 32.09f);
                bezier16Path.cubicTo(88.83f, 32.48f, 87.76f, 32.68f, 86.52f, 32.68f);
                bezier16Path.cubicTo(85.03f, 32.68f, 83.86f, 32.24f, 83.01f, 31.37f);
                bezier16Path.cubicTo(82.16f, 30.49f, 81.74f, 29.32f, 81.74f, 27.84f);
                bezier16Path.cubicTo(81.74f, 26.39f, 82.14f, 25.19f, 82.93f, 24.23f);
                bezier16Path.cubicTo(83.76f, 23.2f, 84.87f, 22.69f, 86.28f, 22.69f);
                bezier16Path.cubicTo(87.66f, 22.69f, 88.71f, 23.2f, 89.42f, 24.23f);
                bezier16Path.cubicTo(89.99f, 25.04f, 90.27f, 26.05f, 90.27f, 27.25f);
                bezier16Path.close();
                bezier16Path.moveTo(88.24f, 26.7f);
                bezier16Path.cubicTo(88.25f, 26.06f, 88.11f, 25.52f, 87.82f, 25.06f);
                bezier16Path.cubicTo(87.45f, 24.46f, 86.89f, 24.17f, 86.12f, 24.17f);
                bezier16Path.cubicTo(85.43f, 24.17f, 84.86f, 24.46f, 84.43f, 25.04f);
                bezier16Path.cubicTo(84.07f, 25.5f, 83.86f, 26.05f, 83.79f, 26.69f);
                bezier16Path.lineTo(88.24f, 26.7f);
                bezier16Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(fillColor3);
                canvas.drawPath(bezier16Path, paint);
                
                // Bezier 17
                RectF bezier17Rect = CacheForBtnItunes.bezier17Rect;
                bezier17Rect.set(92.01f, 22.71f, 98.51f, 32.7f);
                Path bezier17Path = CacheForBtnItunes.bezier17Path;
                bezier17Path.reset();
                bezier17Path.moveTo(98.51f, 29.74f);
                bezier17Path.cubicTo(98.51f, 30.64f, 98.18f, 31.35f, 97.52f, 31.89f);
                bezier17Path.cubicTo(96.86f, 32.43f, 95.95f, 32.7f, 94.8f, 32.7f);
                bezier17Path.cubicTo(93.7f, 32.7f, 92.77f, 32.48f, 92.01f, 32.05f);
                bezier17Path.lineTo(92.46f, 30.47f);
                bezier17Path.cubicTo(93.2f, 30.92f, 93.99f, 31.14f, 94.82f, 31.14f);
                bezier17Path.cubicTo(95.91f, 31.14f, 96.45f, 30.74f, 96.45f, 29.94f);
                bezier17Path.cubicTo(96.45f, 29.58f, 96.34f, 29.29f, 96.1f, 29.06f);
                bezier17Path.cubicTo(95.86f, 28.83f, 95.44f, 28.6f, 94.84f, 28.37f);
                bezier17Path.cubicTo(93.12f, 27.74f, 92.27f, 26.82f, 92.27f, 25.61f);
                bezier17Path.cubicTo(92.27f, 24.78f, 92.58f, 24.09f, 93.22f, 23.54f);
                bezier17Path.cubicTo(93.85f, 22.98f, 94.68f, 22.71f, 95.72f, 22.71f);
                bezier17Path.cubicTo(96.67f, 22.71f, 97.48f, 22.9f, 98.15f, 23.29f);
                bezier17Path.lineTo(97.7f, 24.82f);
                bezier17Path.cubicTo(97.08f, 24.45f, 96.43f, 24.27f, 95.74f, 24.27f);
                bezier17Path.cubicTo(95.3f, 24.27f, 94.95f, 24.37f, 94.7f, 24.58f);
                bezier17Path.cubicTo(94.45f, 24.79f, 94.32f, 25.06f, 94.32f, 25.39f);
                bezier17Path.cubicTo(94.32f, 25.72f, 94.45f, 25.99f, 94.72f, 26.2f);
                bezier17Path.cubicTo(94.94f, 26.39f, 95.38f, 26.61f, 96.02f, 26.85f);
                bezier17Path.cubicTo(97.68f, 27.48f, 98.51f, 28.44f, 98.51f, 29.74f);
                bezier17Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(fillColor3);
                canvas.drawPath(bezier17Path, paint);
            }
        }
    }
    
    private static class CacheForBtnItunesCompact {
        private static Paint paint = new Paint();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF rectangle2Rect = new RectF();
        private static Path rectangle2Path = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
        private static RectF bezier4Rect = new RectF();
        private static Path bezier4Path = new Path();
        private static RectF bezier5Rect = new RectF();
        private static Path bezier5Path = new Path();
        private static RectF bezier6Rect = new RectF();
        private static Path bezier6Path = new Path();
        private static RectF bezier7Rect = new RectF();
        private static Path bezier7Path = new Path();
    }
    
    
    public static void drawBtnItunesCompact(Canvas canvas) {
        // General Declarations
        Paint paint = CacheForBtnItunesCompact.paint;
        
        // Local Colors
        int fillColor3 = Color.argb(255, 255, 255, 255);
        int fillColor2 = Color.argb(255, 0, 0, 0);
        int fillColor = Color.argb(255, 149, 149, 149);
        
        // Group 2
        {
            // Rectangle
            RectF rectangleRect = CacheForBtnItunesCompact.rectangleRect;
            rectangleRect.set(0.33f, 13.33f, 43.68f, 27.68f);
            Path rectanglePath = CacheForBtnItunesCompact.rectanglePath;
            rectanglePath.reset();
            rectanglePath.addRoundRect(rectangleRect, 1.4f, 1.4f, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(fillColor3);
            canvas.drawPath(rectanglePath, paint);
            
            // Bezier
            RectF bezierRect = CacheForBtnItunesCompact.bezierRect;
            bezierRect.set(0f, 13f, 44f, 28f);
            Path bezierPath = CacheForBtnItunesCompact.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(42.23f, 28f);
            bezierPath.lineTo(1.77f, 28f);
            bezierPath.cubicTo(0.8f, 28f, 0f, 27.2f, 0f, 26.22f);
            bezierPath.lineTo(0f, 14.77f);
            bezierPath.cubicTo(0f, 13.8f, 0.8f, 13f, 1.77f, 13f);
            bezierPath.lineTo(42.23f, 13f);
            bezierPath.cubicTo(43.2f, 13f, 44f, 13.8f, 44f, 14.77f);
            bezierPath.lineTo(44f, 26.22f);
            bezierPath.cubicTo(44f, 27.2f, 43.2f, 28f, 42.23f, 28f);
            bezierPath.lineTo(42.23f, 28f);
            bezierPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(fillColor);
            canvas.drawPath(bezierPath, paint);
            
            // Rectangle 2
            RectF rectangle2Rect = CacheForBtnItunesCompact.rectangle2Rect;
            rectangle2Rect.set(0.33f, 13.33f, 43.68f, 27.68f);
            Path rectangle2Path = CacheForBtnItunesCompact.rectangle2Path;
            rectangle2Path.reset();
            rectangle2Path.addRoundRect(rectangle2Rect, 1.4f, 1.4f, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(fillColor2);
            canvas.drawPath(rectangle2Path, paint);
            
            // Group 3
            {
                // Bezier 2
                RectF bezier2Rect = CacheForBtnItunesCompact.bezier2Rect;
                bezier2Rect.set(7.31f, 16.24f, 8.76f, 23.89f);
                Path bezier2Path = CacheForBtnItunesCompact.bezier2Path;
                bezier2Path.reset();
                bezier2Path.moveTo(8.76f, 16.95f);
                bezier2Path.cubicTo(8.76f, 17.16f, 8.69f, 17.33f, 8.55f, 17.46f);
                bezier2Path.cubicTo(8.41f, 17.59f, 8.23f, 17.66f, 8.01f, 17.66f);
                bezier2Path.cubicTo(7.82f, 17.66f, 7.65f, 17.59f, 7.51f, 17.46f);
                bezier2Path.cubicTo(7.38f, 17.32f, 7.31f, 17.15f, 7.31f, 16.95f);
                bezier2Path.cubicTo(7.31f, 16.74f, 7.38f, 16.57f, 7.52f, 16.44f);
                bezier2Path.cubicTo(7.66f, 16.31f, 7.83f, 16.24f, 8.04f, 16.24f);
                bezier2Path.cubicTo(8.24f, 16.24f, 8.41f, 16.31f, 8.55f, 16.44f);
                bezier2Path.cubicTo(8.69f, 16.57f, 8.76f, 16.74f, 8.76f, 16.95f);
                bezier2Path.close();
                bezier2Path.moveTo(8.63f, 23.89f);
                bezier2Path.lineTo(7.44f, 23.89f);
                bezier2Path.lineTo(7.44f, 18.54f);
                bezier2Path.lineTo(8.63f, 18.54f);
                bezier2Path.lineTo(8.63f, 23.89f);
                bezier2Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(fillColor3);
                canvas.drawPath(bezier2Path, paint);
                
                // Bezier 3
                RectF bezier3Rect = CacheForBtnItunesCompact.bezier3Rect;
                bezier3Rect.set(9.61f, 16.47f, 15.04f, 23.89f);
                Path bezier3Path = CacheForBtnItunesCompact.bezier3Path;
                bezier3Path.reset();
                bezier3Path.moveTo(15.04f, 17.47f);
                bezier3Path.lineTo(12.91f, 17.47f);
                bezier3Path.lineTo(12.91f, 23.89f);
                bezier3Path.lineTo(11.72f, 23.89f);
                bezier3Path.lineTo(11.72f, 17.47f);
                bezier3Path.lineTo(9.61f, 17.47f);
                bezier3Path.lineTo(9.61f, 16.47f);
                bezier3Path.lineTo(15.04f, 16.47f);
                bezier3Path.lineTo(15.04f, 17.47f);
                bezier3Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(fillColor3);
                canvas.drawPath(bezier3Path, paint);
                
                // Bezier 4
                RectF bezier4Rect = CacheForBtnItunesCompact.bezier4Rect;
                bezier4Rect.set(15.32f, 18.54f, 19.97f, 24.01f);
                Path bezier4Path = CacheForBtnItunesCompact.bezier4Path;
                bezier4Path.reset();
                bezier4Path.moveTo(19.97f, 23.89f);
                bezier4Path.lineTo(18.93f, 23.89f);
                bezier4Path.lineTo(18.86f, 23.08f);
                bezier4Path.lineTo(18.84f, 23.08f);
                bezier4Path.cubicTo(18.47f, 23.7f, 17.9f, 24.01f, 17.15f, 24.01f);
                bezier4Path.cubicTo(16.62f, 24.01f, 16.2f, 23.85f, 15.88f, 23.52f);
                bezier4Path.cubicTo(15.51f, 23.11f, 15.32f, 22.5f, 15.32f, 21.69f);
                bezier4Path.lineTo(15.32f, 18.54f);
                bezier4Path.lineTo(16.51f, 18.54f);
                bezier4Path.lineTo(16.51f, 21.49f);
                bezier4Path.cubicTo(16.51f, 22.52f, 16.86f, 23.03f, 17.56f, 23.03f);
                bezier4Path.cubicTo(18.09f, 23.03f, 18.46f, 22.77f, 18.66f, 22.26f);
                bezier4Path.cubicTo(18.71f, 22.13f, 18.74f, 21.98f, 18.74f, 21.81f);
                bezier4Path.lineTo(18.74f, 18.54f);
                bezier4Path.lineTo(19.93f, 18.54f);
                bezier4Path.lineTo(19.93f, 22.35f);
                bezier4Path.cubicTo(19.93f, 22.85f, 19.94f, 23.37f, 19.97f, 23.89f);
                bezier4Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(fillColor3);
                canvas.drawPath(bezier4Path, paint);
                
                // Bezier 5
                RectF bezier5Rect = CacheForBtnItunesCompact.bezier5Rect;
                bezier5Rect.set(21.56f, 18.43f, 26.24f, 23.89f);
                Path bezier5Path = CacheForBtnItunesCompact.bezier5Path;
                bezier5Path.reset();
                bezier5Path.moveTo(26.24f, 23.89f);
                bezier5Path.lineTo(25.05f, 23.89f);
                bezier5Path.lineTo(25.05f, 20.82f);
                bezier5Path.cubicTo(25.05f, 19.87f, 24.69f, 19.4f, 23.97f, 19.4f);
                bezier5Path.cubicTo(23.62f, 19.4f, 23.34f, 19.53f, 23.12f, 19.79f);
                bezier5Path.cubicTo(22.9f, 20.05f, 22.79f, 20.36f, 22.79f, 20.71f);
                bezier5Path.lineTo(22.79f, 23.89f);
                bezier5Path.lineTo(21.6f, 23.89f);
                bezier5Path.lineTo(21.6f, 20.07f);
                bezier5Path.cubicTo(21.6f, 19.6f, 21.59f, 19.09f, 21.56f, 18.54f);
                bezier5Path.lineTo(22.6f, 18.54f);
                bezier5Path.lineTo(22.66f, 19.37f);
                bezier5Path.lineTo(22.69f, 19.37f);
                bezier5Path.cubicTo(22.83f, 19.11f, 23.03f, 18.9f, 23.31f, 18.73f);
                bezier5Path.cubicTo(23.63f, 18.53f, 23.99f, 18.43f, 24.38f, 18.43f);
                bezier5Path.cubicTo(24.88f, 18.43f, 25.29f, 18.59f, 25.63f, 18.91f);
                bezier5Path.cubicTo(26.04f, 19.31f, 26.24f, 19.9f, 26.24f, 20.69f);
                bezier5Path.lineTo(26.24f, 23.89f);
                bezier5Path.lineTo(26.24f, 23.89f);
                bezier5Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(fillColor3);
                canvas.drawPath(bezier5Path, paint);
                
                // Bezier 6
                RectF bezier6Rect = CacheForBtnItunesCompact.bezier6Rect;
                bezier6Rect.set(27.54f, 18.42f, 32.29f, 23.99f);
                Path bezier6Path = CacheForBtnItunesCompact.bezier6Path;
                bezier6Path.reset();
                bezier6Path.moveTo(32.29f, 20.96f);
                bezier6Path.cubicTo(32.29f, 21.17f, 32.27f, 21.35f, 32.24f, 21.5f);
                bezier6Path.lineTo(28.68f, 21.5f);
                bezier6Path.cubicTo(28.7f, 22.03f, 28.87f, 22.43f, 29.2f, 22.71f);
                bezier6Path.cubicTo(29.5f, 22.96f, 29.89f, 23.08f, 30.37f, 23.08f);
                bezier6Path.cubicTo(30.89f, 23.08f, 31.38f, 23f, 31.81f, 22.83f);
                bezier6Path.lineTo(31.99f, 23.66f);
                bezier6Path.cubicTo(31.49f, 23.88f, 30.89f, 23.99f, 30.2f, 23.99f);
                bezier6Path.cubicTo(29.37f, 23.99f, 28.72f, 23.74f, 28.25f, 23.26f);
                bezier6Path.cubicTo(27.78f, 22.77f, 27.54f, 22.11f, 27.54f, 21.29f);
                bezier6Path.cubicTo(27.54f, 20.48f, 27.76f, 19.81f, 28.2f, 19.28f);
                bezier6Path.cubicTo(28.66f, 18.71f, 29.29f, 18.42f, 30.07f, 18.42f);
                bezier6Path.cubicTo(30.84f, 18.42f, 31.42f, 18.71f, 31.82f, 19.28f);
                bezier6Path.cubicTo(32.13f, 19.73f, 32.29f, 20.29f, 32.29f, 20.96f);
                bezier6Path.close();
                bezier6Path.moveTo(31.16f, 20.65f);
                bezier6Path.cubicTo(31.16f, 20.3f, 31.09f, 20f, 30.93f, 19.74f);
                bezier6Path.cubicTo(30.72f, 19.41f, 30.41f, 19.25f, 29.98f, 19.25f);
                bezier6Path.cubicTo(29.59f, 19.25f, 29.28f, 19.41f, 29.04f, 19.73f);
                bezier6Path.cubicTo(28.84f, 19.99f, 28.72f, 20.29f, 28.68f, 20.65f);
                bezier6Path.lineTo(31.16f, 20.65f);
                bezier6Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(fillColor3);
                canvas.drawPath(bezier6Path, paint);
                
                // Bezier 7
                RectF bezier7Rect = CacheForBtnItunesCompact.bezier7Rect;
                bezier7Rect.set(33.28f, 18.43f, 36.9f, 24f);
                Path bezier7Path = CacheForBtnItunesCompact.bezier7Path;
                bezier7Path.reset();
                bezier7Path.moveTo(36.9f, 22.35f);
                bezier7Path.cubicTo(36.9f, 22.85f, 36.71f, 23.25f, 36.35f, 23.55f);
                bezier7Path.cubicTo(35.98f, 23.85f, 35.47f, 24f, 34.83f, 24f);
                bezier7Path.cubicTo(34.22f, 24f, 33.7f, 23.88f, 33.28f, 23.63f);
                bezier7Path.lineTo(33.53f, 22.75f);
                bezier7Path.cubicTo(33.94f, 23f, 34.38f, 23.13f, 34.84f, 23.13f);
                bezier7Path.cubicTo(35.45f, 23.13f, 35.75f, 22.9f, 35.75f, 22.46f);
                bezier7Path.cubicTo(35.75f, 22.26f, 35.69f, 22.1f, 35.56f, 21.97f);
                bezier7Path.cubicTo(35.42f, 21.84f, 35.19f, 21.71f, 34.85f, 21.59f);
                bezier7Path.cubicTo(33.9f, 21.24f, 33.42f, 20.72f, 33.42f, 20.05f);
                bezier7Path.cubicTo(33.42f, 19.59f, 33.6f, 19.2f, 33.95f, 18.89f);
                bezier7Path.cubicTo(34.3f, 18.59f, 34.77f, 18.43f, 35.35f, 18.43f);
                bezier7Path.cubicTo(35.87f, 18.43f, 36.32f, 18.54f, 36.7f, 18.75f);
                bezier7Path.lineTo(36.45f, 19.6f);
                bezier7Path.cubicTo(36.1f, 19.39f, 35.74f, 19.29f, 35.36f, 19.29f);
                bezier7Path.cubicTo(35.11f, 19.29f, 34.91f, 19.35f, 34.77f, 19.47f);
                bezier7Path.cubicTo(34.63f, 19.58f, 34.56f, 19.73f, 34.56f, 19.92f);
                bezier7Path.cubicTo(34.56f, 20.1f, 34.64f, 20.25f, 34.78f, 20.37f);
                bezier7Path.cubicTo(34.91f, 20.48f, 35.15f, 20.6f, 35.51f, 20.73f);
                bezier7Path.cubicTo(36.44f, 21.08f, 36.9f, 21.62f, 36.9f, 22.35f);
                bezier7Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(fillColor3);
                canvas.drawPath(bezier7Path, paint);
            }
        }
    }
    
    private static class CacheForBtnFretlightStatus {
        private static Paint paint = new Paint();
        private static RectF group2 = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF labelRect = new RectF();
        private static TextPaint labelTextPaint = new TextPaint();
        private static PaintCodeStaticLayout labelStaticLayout = new PaintCodeStaticLayout();
    }
    
    
    public static void drawBtnFretlightStatus(Canvas canvas, Context context, RectF frame, boolean isPressed, float redValue, float greenValue, float blueValue, float connectedDevices) {
        // General Declarations
        Paint paint = CacheForBtnFretlightStatus.paint;
        
        // Local Colors
        int downControls = Color.argb(255, 132, 132, 132);
        
        // Local Variables
        int backgroundColor = isPressed ? downControls : Color.argb(255, (int) (redValue * 255f), (int) (greenValue * 255f), (int) (blueValue * 255f));
        String statusText = "Fretlight Status (" + String.valueOf((int) Math.round(connectedDevices)) + ")";
        
        // Group 2
        {
            RectF group2 = CacheForBtnFretlightStatus.group2;
            group2.set(frame.left + (float) Math.floor((frame.width() - 170f) * 0.5f + 0.5f),
                frame.top + (float) Math.floor((frame.height() - 34f) * 0.4f + 0.5f),
                frame.left + (float) Math.floor((frame.width() - 170f) * 0.5f + 0.5f) + 170f,
                frame.top + (float) Math.floor((frame.height() - 34f) * 0.4f + 0.5f) + 34f);
            
            // Bezier
            RectF bezierRect = CacheForBtnFretlightStatus.bezierRect;
            bezierRect.set(group2.left,
                group2.top,
                group2.left + (float) Math.floor(group2.width() + 0.5f),
                group2.top + (float) Math.floor(group2.height() + 0.5f));
            Path bezierPath = CacheForBtnFretlightStatus.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(group2.left, group2.top + group2.height() * 0.12513f);
            bezierPath.cubicTo(group2.left, group2.top + group2.height() * 0.05602f, group2.left + group2.width() * 0.01072f, group2.top, group2.left + group2.width() * 0.02398f, group2.top);
            bezierPath.lineTo(group2.left + group2.width() * 0.97602f, group2.top);
            bezierPath.cubicTo(group2.left + group2.width() * 0.98926f, group2.top, group2.left + group2.width(), group2.top + group2.height() * 0.05591f, group2.left + group2.width(), group2.top + group2.height() * 0.12513f);
            bezierPath.lineTo(group2.left + group2.width(), group2.top + group2.height() * 0.87487f);
            bezierPath.cubicTo(group2.left + group2.width(), group2.top + group2.height() * 0.94398f, group2.left + group2.width() * 0.98928f, group2.top + group2.height(), group2.left + group2.width() * 0.97602f, group2.top + group2.height());
            bezierPath.lineTo(group2.left + group2.width() * 0.02398f, group2.top + group2.height());
            bezierPath.cubicTo(group2.left + group2.width() * 0.01074f, group2.top + group2.height(), group2.left, group2.top + group2.height() * 0.94409f, group2.left, group2.top + group2.height() * 0.87487f);
            bezierPath.lineTo(group2.left, group2.top + group2.height() * 0.12513f);
            bezierPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            bezierPath.setFillType(Path.FillType.EVEN_ODD);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(backgroundColor);
            canvas.drawPath(bezierPath, paint);
            
            // Label
            RectF labelRect = CacheForBtnFretlightStatus.labelRect;
            labelRect.set(group2.left,
                group2.top + (float) Math.floor(group2.height() * 0.05882f + 0.5f),
                group2.left + (float) Math.floor(group2.width() + 0.5f),
                group2.top + (float) Math.floor(group2.height() * 0.88235f + 0.5f));
            TextPaint labelTextPaint = CacheForBtnFretlightStatus.labelTextPaint;
            labelTextPaint.reset();
            labelTextPaint.setFlags(Paint.ANTI_ALIAS_FLAG);
            labelTextPaint.setColor(Color.WHITE);
            labelTextPaint.setTypeface(Typeface.createFromAsset(context.getAssets(), "HelveticaNeue.dfont"));
            labelTextPaint.setTextSize(18f);
            StaticLayout labelStaticLayout = CacheForBtnFretlightStatus.labelStaticLayout.get((int) labelRect.width(), Layout.Alignment.ALIGN_CENTER, statusText, labelTextPaint);
            canvas.save();
            canvas.clipRect(labelRect);
            canvas.translate(labelRect.left, labelRect.top + (labelRect.height() - labelStaticLayout.getHeight()) / 2f);
            labelStaticLayout.draw(canvas);
            canvas.restore();
        }
    }
    
    private static class CacheForBtnGuitarIdentify {
        private static Paint paint = new Paint();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
        private static RectF labelRect = new RectF();
        private static TextPaint labelTextPaint = new TextPaint();
        private static PaintCodeStaticLayout labelStaticLayout = new PaintCodeStaticLayout();
    }
    
    
    public static void drawBtnGuitarIdentify(Canvas canvas, Context context, boolean isPressed) {
        // General Declarations
        Paint paint = CacheForBtnGuitarIdentify.paint;
        
        // Local Colors
        int textForeground2 = Color.argb(255, 255, 255, 255);
        int upColor = Color.argb(255, 76, 142, 162);
        int downColor = Color.argb(255, 63, 113, 129);
        
        // Local Variables
        int btnColor = isPressed ? downColor : upColor;
        String identifyTitle = isPressed ? "Stop Identification" : "Identify All Guitars";
        
        // Rectangle
        RectF rectangleRect = CacheForBtnGuitarIdentify.rectangleRect;
        rectangleRect.set(7f, 5f, 193f, 38f);
        Path rectanglePath = CacheForBtnGuitarIdentify.rectanglePath;
        rectanglePath.reset();
        rectanglePath.addRoundRect(rectangleRect, 4f, 4f, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(btnColor);
        canvas.drawPath(rectanglePath, paint);
        
        // Label
        RectF labelRect = CacheForBtnGuitarIdentify.labelRect;
        labelRect.set(7f, 8f, 193f, 33f);
        TextPaint labelTextPaint = CacheForBtnGuitarIdentify.labelTextPaint;
        labelTextPaint.reset();
        labelTextPaint.setFlags(Paint.ANTI_ALIAS_FLAG);
        labelTextPaint.setColor(textForeground2);
        labelTextPaint.setTypeface(Typeface.createFromAsset(context.getAssets(), "HelveticaNeue.dfont"));
        labelTextPaint.setTextSize(17f);
        StaticLayout labelStaticLayout = CacheForBtnGuitarIdentify.labelStaticLayout.get((int) labelRect.width(), Layout.Alignment.ALIGN_CENTER, identifyTitle, labelTextPaint);
        canvas.save();
        canvas.clipRect(labelRect);
        canvas.translate(labelRect.left, labelRect.top + (labelRect.height() - labelStaticLayout.getHeight()) / 2f);
        labelStaticLayout.draw(canvas);
        canvas.restore();
    }
    
    private static class CacheForIconStatusConnected {
        private static Paint paint = new Paint();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
    }
    
    
    public static void drawIconStatusConnected(Canvas canvas) {
        // General Declarations
        Paint paint = CacheForIconStatusConnected.paint;
        
        // Local Colors
        int fillColor9 = Color.argb(255, 31, 245, 43);
        int strokeColor5 = Color.argb(255, 255, 255, 255);
        
        // Group
        {
            // Bezier
            RectF bezierRect = CacheForIconStatusConnected.bezierRect;
            bezierRect.set(2f, 2f, 42f, 42f);
            Path bezierPath = CacheForIconStatusConnected.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(22f, 42f);
            bezierPath.cubicTo(33.05f, 42f, 42f, 33.05f, 42f, 22f);
            bezierPath.cubicTo(42f, 10.95f, 33.05f, 2f, 22f, 2f);
            bezierPath.cubicTo(10.95f, 2f, 2f, 10.95f, 2f, 22f);
            bezierPath.cubicTo(2f, 33.05f, 10.95f, 42f, 22f, 42f);
            bezierPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            bezierPath.setFillType(Path.FillType.EVEN_ODD);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(fillColor9);
            canvas.drawPath(bezierPath, paint);
            
            // Bezier 2
            RectF bezier2Rect = CacheForIconStatusConnected.bezier2Rect;
            bezier2Rect.set(11.6f, 12.48f, 31.15f, 33.04f);
            Path bezier2Path = CacheForIconStatusConnected.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(22.77f, 26.73f);
            bezier2Path.cubicTo(22.77f, 26.73f, 21.48f, 27.11f, 21.13f, 28.78f);
            bezier2Path.cubicTo(21.13f, 28.78f, 20.67f, 32.38f, 18.6f, 32.89f);
            bezier2Path.cubicTo(18.6f, 32.89f, 17.26f, 33.69f, 14.68f, 31.56f);
            bezier2Path.cubicTo(14.68f, 31.56f, 10.44f, 28.48f, 11.9f, 26.04f);
            bezier2Path.cubicTo(11.9f, 26.04f, 12.41f, 24.96f, 14.53f, 23.92f);
            bezier2Path.cubicTo(14.53f, 23.92f, 16.37f, 23.22f, 16.72f, 22.32f);
            bezier2Path.cubicTo(16.72f, 22.32f, 17.9f, 18.41f, 19.67f, 18.21f);
            bezier2Path.cubicTo(19.67f, 18.21f, 21.01f, 18.32f, 20.4f, 19.23f);
            bezier2Path.cubicTo(20.4f, 19.23f, 18.91f, 21.78f, 20.94f, 21.99f);
            bezier2Path.lineTo(25.61f, 16.2f);
            bezier2Path.cubicTo(25.61f, 16.2f, 26.09f, 15.79f, 25.76f, 15.33f);
            bezier2Path.lineTo(29.99f, 12.59f);
            bezier2Path.cubicTo(29.99f, 12.59f, 31.08f, 12.07f, 31.15f, 13.32f);
            bezier2Path.cubicTo(31.15f, 13.32f, 29.94f, 13.63f, 29.37f, 15.38f);
            bezier2Path.cubicTo(29.37f, 15.38f, 29.19f, 16.36f, 28.35f, 16.61f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1.2f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(strokeColor5);
            canvas.drawPath(bezier2Path, paint);
            canvas.restore();
        }
    }
    
    private static class CacheForBtnStatusLefty {
        private static Paint paint = new Paint();
        private static RectF labelRect = new RectF();
        private static TextPaint labelTextPaint = new TextPaint();
        private static PaintCodeStaticLayout labelStaticLayout = new PaintCodeStaticLayout();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    
    public static void drawBtnStatusLefty(Canvas canvas, Context context, boolean isPressed) {
        // General Declarations
        Paint paint = CacheForBtnStatusLefty.paint;
        
        // Local Colors
        int unselectedColor = Color.argb(255, 206, 206, 206);
        int upColor = Color.argb(255, 76, 142, 162);
        
        // Local Variables
        int toggleColor = isPressed ? upColor : unselectedColor;
        
        // Group
        {
            // Label
            RectF labelRect = CacheForBtnStatusLefty.labelRect;
            labelRect.set(24f, 5f, 70f, 30f);
            TextPaint labelTextPaint = CacheForBtnStatusLefty.labelTextPaint;
            labelTextPaint.reset();
            labelTextPaint.setFlags(Paint.ANTI_ALIAS_FLAG);
            labelTextPaint.setColor(toggleColor);
            labelTextPaint.setTypeface(Typeface.createFromAsset(context.getAssets(), "HelveticaNeue.dfont"));
            labelTextPaint.setTextSize(17f);
            StaticLayout labelStaticLayout = CacheForBtnStatusLefty.labelStaticLayout.get((int) labelRect.width(), Layout.Alignment.ALIGN_NORMAL, "Lefty", labelTextPaint);
            canvas.save();
            canvas.clipRect(labelRect);
            canvas.translate(labelRect.left, labelRect.top + (labelRect.height() - labelStaticLayout.getHeight()) / 2f);
            labelStaticLayout.draw(canvas);
            canvas.restore();
            
            // Bezier
            RectF bezierRect = CacheForBtnStatusLefty.bezierRect;
            bezierRect.set(1f, 12f, 16.28f, 23.96f);
            Path bezierPath = CacheForBtnStatusLefty.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(4.76f, 23.26f);
            bezierPath.lineTo(5.46f, 23.96f);
            bezierPath.lineTo(6.17f, 23.27f);
            bezierPath.lineTo(16.28f, 13.43f);
            bezierPath.lineTo(14.89f, 12f);
            bezierPath.lineTo(4.77f, 21.84f);
            bezierPath.lineTo(6.18f, 21.85f);
            bezierPath.lineTo(2.41f, 18.08f);
            bezierPath.lineTo(1f, 19.5f);
            bezierPath.lineTo(4.76f, 23.26f);
            bezierPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(toggleColor);
            canvas.drawPath(bezierPath, paint);
        }
    }
    
    private static class CacheForBtnStatusBass {
        private static Paint paint = new Paint();
        private static RectF labelRect = new RectF();
        private static TextPaint labelTextPaint = new TextPaint();
        private static PaintCodeStaticLayout labelStaticLayout = new PaintCodeStaticLayout();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    
    public static void drawBtnStatusBass(Canvas canvas, Context context, boolean isPressed) {
        // General Declarations
        Paint paint = CacheForBtnStatusBass.paint;
        
        // Local Colors
        int unselectedColor = Color.argb(255, 206, 206, 206);
        int upColor = Color.argb(255, 76, 142, 162);
        
        // Local Variables
        int toggleColor = isPressed ? upColor : unselectedColor;
        
        // Group
        {
            // Label
            RectF labelRect = CacheForBtnStatusBass.labelRect;
            labelRect.set(24f, 5f, 70f, 30f);
            TextPaint labelTextPaint = CacheForBtnStatusBass.labelTextPaint;
            labelTextPaint.reset();
            labelTextPaint.setFlags(Paint.ANTI_ALIAS_FLAG);
            labelTextPaint.setColor(toggleColor);
            labelTextPaint.setTypeface(Typeface.createFromAsset(context.getAssets(), "HelveticaNeue.dfont"));
            labelTextPaint.setTextSize(17f);
            StaticLayout labelStaticLayout = CacheForBtnStatusBass.labelStaticLayout.get((int) labelRect.width(), Layout.Alignment.ALIGN_NORMAL, "Bass", labelTextPaint);
            canvas.save();
            canvas.clipRect(labelRect);
            canvas.translate(labelRect.left, labelRect.top + (labelRect.height() - labelStaticLayout.getHeight()) / 2f);
            labelStaticLayout.draw(canvas);
            canvas.restore();
            
            // Bezier
            RectF bezierRect = CacheForBtnStatusBass.bezierRect;
            bezierRect.set(1f, 12f, 16.28f, 23.96f);
            Path bezierPath = CacheForBtnStatusBass.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(4.76f, 23.26f);
            bezierPath.lineTo(5.46f, 23.96f);
            bezierPath.lineTo(6.17f, 23.27f);
            bezierPath.lineTo(16.28f, 13.43f);
            bezierPath.lineTo(14.89f, 12f);
            bezierPath.lineTo(4.77f, 21.84f);
            bezierPath.lineTo(6.18f, 21.85f);
            bezierPath.lineTo(2.41f, 18.08f);
            bezierPath.lineTo(1f, 19.5f);
            bezierPath.lineTo(4.76f, 23.26f);
            bezierPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(toggleColor);
            canvas.drawPath(bezierPath, paint);
        }
    }
    
    private static class CacheForBtnGuitarAssignAll {
        private static Paint paint = new Paint();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
        private static RectF labelRect = new RectF();
        private static TextPaint labelTextPaint = new TextPaint();
        private static PaintCodeStaticLayout labelStaticLayout = new PaintCodeStaticLayout();
    }
    
    
    public static void drawBtnGuitarAssignAll(Canvas canvas, Context context, boolean isPressed) {
        // General Declarations
        Paint paint = CacheForBtnGuitarAssignAll.paint;
        
        // Local Colors
        int textForeground2 = Color.argb(255, 255, 255, 255);
        int upColor = Color.argb(255, 76, 142, 162);
        int downColor = Color.argb(255, 63, 113, 129);
        
        // Local Variables
        int btnColor = isPressed ? downColor : upColor;
        
        // Rectangle
        RectF rectangleRect = CacheForBtnGuitarAssignAll.rectangleRect;
        rectangleRect.set(7f, 5f, 193f, 38f);
        Path rectanglePath = CacheForBtnGuitarAssignAll.rectanglePath;
        rectanglePath.reset();
        rectanglePath.addRoundRect(rectangleRect, 4f, 4f, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(btnColor);
        canvas.drawPath(rectanglePath, paint);
        
        // Label
        RectF labelRect = CacheForBtnGuitarAssignAll.labelRect;
        labelRect.set(7f, 8f, 193f, 33f);
        TextPaint labelTextPaint = CacheForBtnGuitarAssignAll.labelTextPaint;
        labelTextPaint.reset();
        labelTextPaint.setFlags(Paint.ANTI_ALIAS_FLAG);
        labelTextPaint.setColor(textForeground2);
        labelTextPaint.setTypeface(Typeface.createFromAsset(context.getAssets(), "HelveticaNeue.dfont"));
        labelTextPaint.setTextSize(17f);
        StaticLayout labelStaticLayout = CacheForBtnGuitarAssignAll.labelStaticLayout.get((int) labelRect.width(), Layout.Alignment.ALIGN_CENTER, "Assign Part to All", labelTextPaint);
        canvas.save();
        canvas.clipRect(labelRect);
        canvas.translate(labelRect.left, labelRect.top + (labelRect.height() - labelStaticLayout.getHeight()) / 2f);
        labelStaticLayout.draw(canvas);
        canvas.restore();
    }
    
    private static class CacheForBtnNextiPhone {
        private static Paint paint = new Paint();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    
    public static void drawBtnNextiPhone(Canvas canvas, boolean isPressed, float redValue, float greenValue, float blueValue) {
        // General Declarations
        Paint paint = CacheForBtnNextiPhone.paint;
        
        // Local Colors
        int downControls = Color.argb(255, 132, 132, 132);
        
        // Local Variables
        int backgroundColor = isPressed ? downControls : Color.argb(255, (int) (redValue * 255f), (int) (greenValue * 255f), (int) (blueValue * 255f));
        
        // Group
        {
            // Bezier
            RectF bezierRect = CacheForBtnNextiPhone.bezierRect;
            bezierRect.set(8f, 9f, 37f, 37f);
            Path bezierPath = CacheForBtnNextiPhone.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(36.76f, 22.53f);
            bezierPath.lineTo(19.84f, 10.28f);
            bezierPath.cubicTo(19.66f, 10.15f, 19.41f, 10.13f, 19.21f, 10.23f);
            bezierPath.cubicTo(19f, 10.33f, 18.88f, 10.53f, 18.88f, 10.75f);
            bezierPath.lineTo(18.88f, 17.62f);
            bezierPath.lineTo(9.01f, 9.15f);
            bezierPath.cubicTo(8.83f, 9f, 8.57f, 8.96f, 8.36f, 9.05f);
            bezierPath.cubicTo(8.14f, 9.15f, 8f, 9.35f, 8f, 9.58f);
            bezierPath.lineTo(8f, 36.42f);
            bezierPath.cubicTo(8f, 36.65f, 8.14f, 36.86f, 8.36f, 36.95f);
            bezierPath.cubicTo(8.44f, 36.98f, 8.52f, 37f, 8.6f, 37f);
            bezierPath.cubicTo(8.75f, 37f, 8.89f, 36.95f, 9.01f, 36.85f);
            bezierPath.lineTo(18.88f, 28.38f);
            bezierPath.lineTo(18.88f, 35.25f);
            bezierPath.cubicTo(18.88f, 35.47f, 19f, 35.67f, 19.21f, 35.77f);
            bezierPath.cubicTo(19.41f, 35.87f, 19.66f, 35.85f, 19.84f, 35.72f);
            bezierPath.lineTo(36.76f, 23.47f);
            bezierPath.cubicTo(36.91f, 23.36f, 37f, 23.18f, 37f, 23f);
            bezierPath.cubicTo(37f, 22.82f, 36.91f, 22.64f, 36.76f, 22.53f);
            bezierPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            bezierPath.setFillType(Path.FillType.EVEN_ODD);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(backgroundColor);
            canvas.drawPath(bezierPath, paint);
        }
    }
    
    private static class CacheForBtnPlayiPhone {
        private static Paint paint = new Paint();
        private static RectF playRect = new RectF();
        private static Path playPath = new Path();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
        private static RectF rectangle2Rect = new RectF();
        private static Path rectangle2Path = new Path();
    }
    
    
    public static void drawBtnPlayiPhone(Canvas canvas, boolean isPressed, boolean isShowingPause, float redValue, float greenValue, float blueValue) {
        // General Declarations
        Paint paint = CacheForBtnPlayiPhone.paint;
        
        // Local Colors
        int downControls = Color.argb(255, 132, 132, 132);
        
        // Local Variables
        int backgroundColor = isPressed ? downControls : Color.argb(255, (int) (redValue * 255f), (int) (greenValue * 255f), (int) (blueValue * 255f));
        boolean isPlaying = !isShowingPause;
        
        // Group
        {
            // Play
            if (isPlaying) {
                RectF playRect = CacheForBtnPlayiPhone.playRect;
                playRect.set(7f, 8.04f, 37f, 35.04f);
                Path playPath = CacheForBtnPlayiPhone.playPath;
                playPath.reset();
                playPath.moveTo(7f, 35.04f);
                playPath.lineTo(7f, 8.04f);
                playPath.lineTo(37f, 21.54f);
                playPath.lineTo(7f, 35.04f);
                playPath.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                playPath.setFillType(Path.FillType.EVEN_ODD);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(backgroundColor);
                canvas.drawPath(playPath, paint);
            }
            
            // Pause
            if (isShowingPause) {
                // Rectangle
                RectF rectangleRect = CacheForBtnPlayiPhone.rectangleRect;
                rectangleRect.set(12f, 9.04f, 21f, 35.04f);
                Path rectanglePath = CacheForBtnPlayiPhone.rectanglePath;
                rectanglePath.reset();
                rectanglePath.moveTo(rectangleRect.left, rectangleRect.top);
                rectanglePath.lineTo(rectangleRect.right, rectangleRect.top);
                rectanglePath.lineTo(rectangleRect.right, rectangleRect.bottom);
                rectanglePath.lineTo(rectangleRect.left, rectangleRect.bottom);
                rectanglePath.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(backgroundColor);
                canvas.drawPath(rectanglePath, paint);
                
                // Rectangle 2
                RectF rectangle2Rect = CacheForBtnPlayiPhone.rectangle2Rect;
                rectangle2Rect.set(24f, 9.04f, 32f, 35.04f);
                Path rectangle2Path = CacheForBtnPlayiPhone.rectangle2Path;
                rectangle2Path.reset();
                rectangle2Path.moveTo(rectangle2Rect.left, rectangle2Rect.top);
                rectangle2Path.lineTo(rectangle2Rect.right, rectangle2Rect.top);
                rectangle2Path.lineTo(rectangle2Rect.right, rectangle2Rect.bottom);
                rectangle2Path.lineTo(rectangle2Rect.left, rectangle2Rect.bottom);
                rectangle2Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(backgroundColor);
                canvas.drawPath(rectangle2Path, paint);
            }
        }
    }
    
    private static class CacheForBtnRewindiPhone {
        private static Paint paint = new Paint();
        private static RectF stroke260Rect = new RectF();
        private static Path stroke260Path = new Path();
        private static RectF stroke261Rect = new RectF();
        private static Path stroke261Path = new Path();
        private static RectF labelRect = new RectF();
        private static Path labelPath = new Path();
    }
    
    
    public static void drawBtnRewindiPhone(Canvas canvas, boolean isPressed, float redValue, float greenValue, float blueValue) {
        // General Declarations
        Paint paint = CacheForBtnRewindiPhone.paint;
        
        // Local Colors
        int upColor = Color.argb(255, 76, 142, 162);
        int downColor = Color.argb(255, 63, 113, 129);
        int downControls = Color.argb(255, 132, 132, 132);
        
        // Local Variables
        int backgroundColor = isPressed ? downControls : Color.argb(255, (int) (redValue * 255f), (int) (greenValue * 255f), (int) (blueValue * 255f));
        int btnColor = isPressed ? downColor : upColor;
        
        // Group 2
        {
            // Play
            {
                // Stroke-260
                RectF stroke260Rect = CacheForBtnRewindiPhone.stroke260Rect;
                stroke260Rect.set(19.32f, 6.5f, 27.11f, 16.93f);
                Path stroke260Path = CacheForBtnRewindiPhone.stroke260Path;
                stroke260Path.reset();
                stroke260Path.moveTo(26.61f, 8.55f);
                stroke260Path.lineTo(20.91f, 12.34f);
                stroke260Path.lineTo(21.02f, 10.54f);
                stroke260Path.lineTo(26.09f, 14.96f);
                stroke260Path.cubicTo(26.53f, 15.34f, 26.6f, 16.04f, 26.24f, 16.52f);
                stroke260Path.cubicTo(25.87f, 17f, 25.22f, 17.07f, 24.77f, 16.68f);
                stroke260Path.lineTo(19.7f, 12.26f);
                stroke260Path.cubicTo(19.15f, 11.78f, 19.2f, 10.86f, 19.81f, 10.46f);
                stroke260Path.lineTo(25.52f, 6.67f);
                stroke260Path.cubicTo(26f, 6.34f, 26.65f, 6.5f, 26.95f, 7.02f);
                stroke260Path.cubicTo(27.25f, 7.55f, 27.1f, 8.23f, 26.61f, 8.55f);
                stroke260Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(backgroundColor);
                canvas.drawPath(stroke260Path, paint);
                
                // Stroke-261
                RectF stroke261Rect = CacheForBtnRewindiPhone.stroke261Rect;
                stroke261Rect.set(9.18f, 10.2f, 35.35f, 36.5f);
                Path stroke261Path = CacheForBtnRewindiPhone.stroke261Path;
                stroke261Path.reset();
                stroke261Path.moveTo(20.24f, 10.3f);
                stroke261Path.cubicTo(28.22f, 9.32f, 35.06f, 15.3f, 35.34f, 22.91f);
                stroke261Path.cubicTo(35.61f, 30.16f, 29.95f, 36.23f, 22.74f, 36.49f);
                stroke261Path.cubicTo(15.54f, 36.76f, 9.45f, 31.13f, 9.18f, 23.88f);
                stroke261Path.cubicTo(9.16f, 23.27f, 9.61f, 22.75f, 10.18f, 22.73f);
                stroke261Path.cubicTo(10.75f, 22.7f, 11.24f, 23.18f, 11.26f, 23.79f);
                stroke261Path.cubicTo(11.48f, 29.79f, 16.58f, 34.5f, 22.67f, 34.27f);
                stroke261Path.cubicTo(28.76f, 34.05f, 33.48f, 28.99f, 33.26f, 23f);
                stroke261Path.cubicTo(33.03f, 16.7f, 27.28f, 11.67f, 20.48f, 12.51f);
                stroke261Path.cubicTo(19.91f, 12.58f, 19.39f, 12.15f, 19.33f, 11.54f);
                stroke261Path.cubicTo(19.26f, 10.93f, 19.67f, 10.37f, 20.24f, 10.3f);
                stroke261Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(backgroundColor);
                canvas.drawPath(stroke261Path, paint);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(0.1f);
                paint.setStrokeMiter(10f);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(btnColor);
                canvas.drawPath(stroke261Path, paint);
                canvas.restore();
            }
            
            // Label
            RectF labelRect = CacheForBtnRewindiPhone.labelRect;
            labelRect.set(20.17f, 20.99f, 25.56f, 27.88f);
            Path labelPath = CacheForBtnRewindiPhone.labelPath;
            labelPath.reset();
            labelPath.moveTo(22.83f, 27.88f);
            labelPath.cubicTo(24.45f, 27.88f, 25.56f, 26.91f, 25.56f, 25.48f);
            labelPath.cubicTo(25.56f, 24.17f, 24.59f, 23.22f, 23.24f, 23.22f);
            labelPath.cubicTo(22.51f, 23.22f, 21.95f, 23.51f, 21.66f, 23.96f);
            labelPath.lineTo(21.63f, 23.96f);
            labelPath.lineTo(21.79f, 22.11f);
            labelPath.lineTo(25.13f, 22.11f);
            labelPath.lineTo(25.13f, 20.99f);
            labelPath.lineTo(20.63f, 20.99f);
            labelPath.lineTo(20.28f, 24.87f);
            labelPath.lineTo(21.61f, 24.87f);
            labelPath.cubicTo(21.85f, 24.48f, 22.31f, 24.25f, 22.85f, 24.25f);
            labelPath.cubicTo(23.61f, 24.25f, 24.15f, 24.77f, 24.15f, 25.52f);
            labelPath.cubicTo(24.15f, 26.25f, 23.61f, 26.77f, 22.84f, 26.77f);
            labelPath.cubicTo(22.15f, 26.77f, 21.62f, 26.37f, 21.54f, 25.8f);
            labelPath.lineTo(20.17f, 25.8f);
            labelPath.cubicTo(20.21f, 27.02f, 21.31f, 27.88f, 22.83f, 27.88f);
            labelPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(backgroundColor);
            canvas.drawPath(labelPath, paint);
        }
    }
    
    private static class CacheForBtnForwardiPhone {
        private static Paint paint = new Paint();
        private static RectF stroke260Rect = new RectF();
        private static Path stroke260Path = new Path();
        private static RectF stroke261Rect = new RectF();
        private static Path stroke261Path = new Path();
        private static RectF labelRect = new RectF();
        private static Path labelPath = new Path();
    }
    
    
    public static void drawBtnForwardiPhone(Canvas canvas, boolean isPressed, float redValue, float greenValue, float blueValue) {
        // General Declarations
        Paint paint = CacheForBtnForwardiPhone.paint;
        
        // Local Colors
        int upColor = Color.argb(255, 76, 142, 162);
        int downColor = Color.argb(255, 63, 113, 129);
        int downControls = Color.argb(255, 132, 132, 132);
        
        // Local Variables
        int backgroundColor = isPressed ? downControls : Color.argb(255, (int) (redValue * 255f), (int) (greenValue * 255f), (int) (blueValue * 255f));
        int btnColor = isPressed ? downColor : upColor;
        
        // Group
        {
            // Stroke-260-+-Stroke-261-+-Stroke-262-Copy
            {
                // Stroke-260
                RectF stroke260Rect = CacheForBtnForwardiPhone.stroke260Rect;
                stroke260Rect.set(17.18f, 6.5f, 25.33f, 16.93f);
                Path stroke260Path = CacheForBtnForwardiPhone.stroke260Path;
                stroke260Path.reset();
                stroke260Path.moveTo(18.92f, 6.68f);
                stroke260Path.lineTo(24.82f, 10.47f);
                stroke260Path.cubicTo(25.45f, 10.87f, 25.51f, 11.76f, 24.94f, 12.24f);
                stroke260Path.lineTo(19.69f, 16.66f);
                stroke260Path.cubicTo(19.22f, 17.06f, 18.51f, 17.01f, 18.1f, 16.54f);
                stroke260Path.cubicTo(17.7f, 16.07f, 17.76f, 15.37f, 18.23f, 14.97f);
                stroke260Path.lineTo(23.48f, 10.55f);
                stroke260Path.lineTo(23.59f, 12.33f);
                stroke260Path.lineTo(17.69f, 8.54f);
                stroke260Path.cubicTo(17.17f, 8.21f, 17.02f, 7.52f, 17.36f, 7.01f);
                stroke260Path.cubicTo(17.7f, 6.49f, 18.39f, 6.35f, 18.92f, 6.68f);
                stroke260Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(backgroundColor);
                canvas.drawPath(stroke260Path, paint);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(0.1f);
                paint.setStrokeMiter(10f);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(btnColor);
                canvas.drawPath(stroke260Path, paint);
                canvas.restore();
                
                // Stroke-261
                RectF stroke261Rect = CacheForBtnForwardiPhone.stroke261Rect;
                stroke261Rect.set(8.65f, 10.2f, 35.82f, 36.5f);
                Path stroke261Path = CacheForBtnForwardiPhone.stroke261Path;
                stroke261Path.reset();
                stroke261Path.moveTo(24.07f, 12.51f);
                stroke261Path.cubicTo(17.08f, 11.67f, 11.15f, 16.69f, 10.91f, 23f);
                stroke261Path.cubicTo(10.68f, 29f, 15.56f, 34.05f, 21.82f, 34.27f);
                stroke261Path.cubicTo(28.09f, 34.5f, 33.34f, 29.8f, 33.57f, 23.8f);
                stroke261Path.cubicTo(33.59f, 23.18f, 34.12f, 22.7f, 34.74f, 22.73f);
                stroke261Path.cubicTo(35.36f, 22.75f, 35.84f, 23.27f, 35.82f, 23.88f);
                stroke261Path.cubicTo(35.54f, 31.12f, 29.23f, 36.76f, 21.74f, 36.49f);
                stroke261Path.cubicTo(14.25f, 36.23f, 8.38f, 30.15f, 8.66f, 22.91f);
                stroke261Path.cubicTo(8.95f, 15.31f, 16.04f, 9.31f, 24.34f, 10.3f);
                stroke261Path.cubicTo(24.96f, 10.38f, 25.4f, 10.93f, 25.32f, 11.54f);
                stroke261Path.cubicTo(25.25f, 12.15f, 24.69f, 12.58f, 24.07f, 12.51f);
                stroke261Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(backgroundColor);
                canvas.drawPath(stroke261Path, paint);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(0.1f);
                paint.setStrokeMiter(10f);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(btnColor);
                canvas.drawPath(stroke261Path, paint);
                canvas.restore();
            }
            
            // Label
            RectF labelRect = CacheForBtnForwardiPhone.labelRect;
            labelRect.set(16.15f, 20.13f, 28.61f, 27.49f);
            Path labelPath = CacheForBtnForwardiPhone.labelPath;
            labelPath.reset();
            labelPath.moveTo(18.05f, 24.26f);
            labelPath.lineTo(18.95f, 24.26f);
            labelPath.cubicTo(19.78f, 24.26f, 20.28f, 24.65f, 20.28f, 25.29f);
            labelPath.cubicTo(20.28f, 25.89f, 19.74f, 26.3f, 18.98f, 26.3f);
            labelPath.cubicTo(18.17f, 26.3f, 17.66f, 25.91f, 17.62f, 25.32f);
            labelPath.lineTo(16.15f, 25.32f);
            labelPath.cubicTo(16.22f, 26.62f, 17.3f, 27.49f, 18.96f, 27.49f);
            labelPath.cubicTo(20.65f, 27.49f, 21.84f, 26.65f, 21.84f, 25.39f);
            labelPath.cubicTo(21.84f, 24.41f, 21.13f, 23.77f, 20.04f, 23.69f);
            labelPath.lineTo(20.04f, 23.66f);
            labelPath.cubicTo(20.94f, 23.5f, 21.55f, 22.88f, 21.55f, 22.01f);
            labelPath.cubicTo(21.55f, 20.88f, 20.51f, 20.13f, 18.99f, 20.13f);
            labelPath.cubicTo(17.4f, 20.13f, 16.35f, 20.98f, 16.29f, 22.28f);
            labelPath.lineTo(17.7f, 22.28f);
            labelPath.cubicTo(17.74f, 21.67f, 18.21f, 21.26f, 18.93f, 21.26f);
            labelPath.cubicTo(19.69f, 21.26f, 20.11f, 21.64f, 20.11f, 22.21f);
            labelPath.cubicTo(20.11f, 22.79f, 19.64f, 23.19f, 18.94f, 23.19f);
            labelPath.lineTo(18.05f, 23.19f);
            labelPath.lineTo(18.05f, 24.26f);
            labelPath.close();
            labelPath.moveTo(25.65f, 27.49f);
            labelPath.cubicTo(27.49f, 27.49f, 28.61f, 26.07f, 28.61f, 23.79f);
            labelPath.cubicTo(28.61f, 21.52f, 27.48f, 20.13f, 25.65f, 20.13f);
            labelPath.cubicTo(23.82f, 20.13f, 22.69f, 21.52f, 22.69f, 23.8f);
            labelPath.cubicTo(22.69f, 26.08f, 23.81f, 27.49f, 25.65f, 27.49f);
            labelPath.close();
            labelPath.moveTo(25.65f, 26.31f);
            labelPath.cubicTo(24.78f, 26.31f, 24.25f, 25.4f, 24.25f, 23.8f);
            labelPath.cubicTo(24.25f, 22.21f, 24.79f, 21.31f, 25.65f, 21.31f);
            labelPath.cubicTo(26.52f, 21.31f, 27.05f, 22.21f, 27.05f, 23.8f);
            labelPath.cubicTo(27.05f, 25.41f, 26.53f, 26.31f, 25.65f, 26.31f);
            labelPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(backgroundColor);
            canvas.drawPath(labelPath, paint);
        }
    }
    
    private static class CacheForBtnPreviousiPhone {
        private static Paint paint = new Paint();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    
    public static void drawBtnPreviousiPhone(Canvas canvas, boolean isPressed, float redValue, float greenValue, float blueValue) {
        // General Declarations
        Paint paint = CacheForBtnPreviousiPhone.paint;
        
        // Local Colors
        int downControls = Color.argb(255, 132, 132, 132);
        
        // Local Variables
        int backgroundColor = isPressed ? downControls : Color.argb(255, (int) (redValue * 255f), (int) (greenValue * 255f), (int) (blueValue * 255f));
        
        // Group
        {
            // Bezier
            RectF bezierRect = CacheForBtnPreviousiPhone.bezierRect;
            bezierRect.set(7f, 9f, 36f, 37f);
            Path bezierPath = CacheForBtnPreviousiPhone.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(35.67f, 9.05f);
            bezierPath.cubicTo(35.46f, 8.96f, 35.2f, 8.99f, 35.02f, 9.15f);
            bezierPath.lineTo(25.11f, 17.62f);
            bezierPath.lineTo(25.11f, 10.75f);
            bezierPath.cubicTo(25.14f, 10.53f, 25.01f, 10.33f, 24.81f, 10.23f);
            bezierPath.cubicTo(24.6f, 10.13f, 24.36f, 10.15f, 24.18f, 10.28f);
            bezierPath.lineTo(7.24f, 22.53f);
            bezierPath.cubicTo(7.09f, 22.64f, 7f, 22.82f, 7f, 23f);
            bezierPath.cubicTo(7f, 23.18f, 7.09f, 23.36f, 7.24f, 23.47f);
            bezierPath.lineTo(24.18f, 35.72f);
            bezierPath.cubicTo(24.36f, 35.85f, 24.6f, 35.87f, 24.81f, 35.77f);
            bezierPath.cubicTo(25.01f, 35.67f, 25.14f, 35.47f, 25.11f, 35.25f);
            bezierPath.lineTo(25.11f, 28.38f);
            bezierPath.lineTo(35.02f, 36.85f);
            bezierPath.cubicTo(35.14f, 36.95f, 35.28f, 37f, 35.43f, 37f);
            bezierPath.cubicTo(35.51f, 37f, 35.59f, 36.98f, 35.67f, 36.95f);
            bezierPath.cubicTo(35.89f, 36.86f, 36.03f, 36.65f, 35.99f, 36.42f);
            bezierPath.lineTo(35.99f, 9.58f);
            bezierPath.cubicTo(36.03f, 9.35f, 35.89f, 9.15f, 35.67f, 9.05f);
            bezierPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            bezierPath.setFillType(Path.FillType.EVEN_ODD);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(backgroundColor);
            canvas.drawPath(bezierPath, paint);
        }
    }
    
    private static class CacheForIPhoneBtnFretlightStatus {
        private static Paint paint = new Paint();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
        private static RectF labelRect = new RectF();
        private static TextPaint labelTextPaint = new TextPaint();
        private static PaintCodeStaticLayout labelStaticLayout = new PaintCodeStaticLayout();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF rectangle2Rect = new RectF();
        private static Path rectangle2Path = new Path();
        private static RectF rectangle3Rect = new RectF();
        private static Path rectangle3Path = new Path();
    }
    
    
    public static void drawIPhoneBtnFretlightStatus(Canvas canvas, Context context, boolean isPressed, float redValue, float greenValue, float blueValue, float connectedDevices) {
        // General Declarations
        Stack<Matrix> currentTransformation = new Stack<Matrix>();
        currentTransformation.push(new Matrix());
        Paint paint = CacheForIPhoneBtnFretlightStatus.paint;
        
        // Local Colors
        int white = Color.argb(255, 255, 255, 255);
        int upControls = Color.argb(255, 0, 0, 0);
        int downControls = Color.argb(255, 132, 132, 132);
        
        // Local Variables
        int foregroundColorAlt = redValue == 1f && greenValue == 1f && blueValue == 1f ? upControls : white;
        String statusTextiPhone = "(" + String.valueOf((int) Math.round(connectedDevices)) + ")";
        int backgroundColor = isPressed ? downControls : Color.argb(255, (int) (redValue * 255f), (int) (greenValue * 255f), (int) (blueValue * 255f));
        
        // Rectangle
        RectF rectangleRect = CacheForIPhoneBtnFretlightStatus.rectangleRect;
        rectangleRect.set(0f, 1f, 59.71f, 29f);
        Path rectanglePath = CacheForIPhoneBtnFretlightStatus.rectanglePath;
        rectanglePath.reset();
        rectanglePath.addRoundRect(rectangleRect, 3f, 3f, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(backgroundColor);
        canvas.drawPath(rectanglePath, paint);
        
        // Label
        RectF labelRect = CacheForIPhoneBtnFretlightStatus.labelRect;
        labelRect.set(24.78f, 1f, 57.2f, 29f);
        TextPaint labelTextPaint = CacheForIPhoneBtnFretlightStatus.labelTextPaint;
        labelTextPaint.reset();
        labelTextPaint.setFlags(Paint.ANTI_ALIAS_FLAG);
        labelTextPaint.setColor(foregroundColorAlt);
        labelTextPaint.setTypeface(Typeface.createFromAsset(context.getAssets(), "HelveticaNeue.dfont"));
        labelTextPaint.setTextSize(16f);
        StaticLayout labelStaticLayout = CacheForIPhoneBtnFretlightStatus.labelStaticLayout.get((int) labelRect.width(), Layout.Alignment.ALIGN_CENTER, statusTextiPhone, labelTextPaint);
        canvas.save();
        canvas.clipRect(labelRect);
        canvas.translate(labelRect.left, labelRect.top + (labelRect.height() - labelStaticLayout.getHeight()) / 2f);
        labelStaticLayout.draw(canvas);
        canvas.restore();
        
        // Group 3
        {
            // Bezier
            RectF bezierRect = CacheForIPhoneBtnFretlightStatus.bezierRect;
            bezierRect.set(7.71f, 5f, 19.49f, 25f);
            Path bezierPath = CacheForIPhoneBtnFretlightStatus.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(8.57f, 9.26f);
            bezierPath.lineTo(19.33f, 19.18f);
            bezierPath.cubicTo(19.53f, 19.37f, 19.54f, 19.7f, 19.34f, 19.9f);
            bezierPath.lineTo(14.35f, 24.85f);
            bezierPath.cubicTo(14.04f, 25.17f, 13.5f, 24.94f, 13.5f, 24.5f);
            bezierPath.lineTo(13.5f, 5.5f);
            bezierPath.cubicTo(13.5f, 5.06f, 14.04f, 4.83f, 14.35f, 5.15f);
            bezierPath.lineTo(19.34f, 10.1f);
            bezierPath.cubicTo(19.54f, 10.3f, 19.53f, 10.63f, 19.33f, 10.82f);
            bezierPath.lineTo(8.55f, 20.74f);
            bezierPath.cubicTo(8.35f, 20.92f, 8.03f, 20.91f, 7.84f, 20.71f);
            bezierPath.cubicTo(7.66f, 20.5f, 7.67f, 20.19f, 7.87f, 20f);
            bezierPath.lineTo(18.65f, 10.09f);
            bezierPath.lineTo(18.63f, 10.81f);
            bezierPath.lineTo(13.65f, 5.85f);
            bezierPath.lineTo(14.5f, 5.5f);
            bezierPath.lineTo(14.5f, 24.5f);
            bezierPath.lineTo(13.65f, 24.15f);
            bezierPath.lineTo(18.63f, 19.19f);
            bezierPath.lineTo(18.65f, 19.91f);
            bezierPath.lineTo(7.89f, 10f);
            bezierPath.cubicTo(7.69f, 9.81f, 7.68f, 9.49f, 7.87f, 9.29f);
            bezierPath.cubicTo(8.05f, 9.09f, 8.37f, 9.08f, 8.57f, 9.26f);
            bezierPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(foregroundColorAlt);
            canvas.drawPath(bezierPath, paint);
            
            // Rectangle 2
            canvas.save();
            canvas.translate(8.65f, 15f);
            currentTransformation.peek().postTranslate(8.65f, 15f);
            canvas.rotate(45f);
            currentTransformation.peek().postRotate(45f);
            RectF rectangle2Rect = CacheForIPhoneBtnFretlightStatus.rectangle2Rect;
            rectangle2Rect.set(-1.17f, -1.17f, 1.17f, 1.17f);
            Path rectangle2Path = CacheForIPhoneBtnFretlightStatus.rectangle2Path;
            rectangle2Path.reset();
            rectangle2Path.moveTo(rectangle2Rect.left, rectangle2Rect.top);
            rectangle2Path.lineTo(rectangle2Rect.right, rectangle2Rect.top);
            rectangle2Path.lineTo(rectangle2Rect.right, rectangle2Rect.bottom);
            rectangle2Path.lineTo(rectangle2Rect.left, rectangle2Rect.bottom);
            rectangle2Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(foregroundColorAlt);
            canvas.drawPath(rectangle2Path, paint);
            canvas.restore();
            canvas.restore();
            
            // Rectangle 3
            canvas.save();
            canvas.translate(19.35f, 15f);
            currentTransformation.peek().postTranslate(19.35f, 15f);
            canvas.rotate(45f);
            currentTransformation.peek().postRotate(45f);
            RectF rectangle3Rect = CacheForIPhoneBtnFretlightStatus.rectangle3Rect;
            rectangle3Rect.set(-1.17f, -1.17f, 1.17f, 1.17f);
            Path rectangle3Path = CacheForIPhoneBtnFretlightStatus.rectangle3Path;
            rectangle3Path.reset();
            rectangle3Path.moveTo(rectangle3Rect.left, rectangle3Rect.top);
            rectangle3Path.lineTo(rectangle3Rect.right, rectangle3Rect.top);
            rectangle3Path.lineTo(rectangle3Rect.right, rectangle3Rect.bottom);
            rectangle3Path.lineTo(rectangle3Rect.left, rectangle3Rect.bottom);
            rectangle3Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(foregroundColorAlt);
            canvas.drawPath(rectangle3Path, paint);
            canvas.restore();
            canvas.restore();
        }
    }
    
    private static class CacheForMarkerLineiPhone {
        private static Paint paint = new Paint();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    
    public static void drawMarkerLineiPhone(Canvas canvas) {
        // General Declarations
        Paint paint = CacheForMarkerLineiPhone.paint;
        
        // Local Colors
        int upColor = Color.argb(255, 76, 142, 162);
        
        // Bezier
        RectF bezierRect = CacheForMarkerLineiPhone.bezierRect;
        bezierRect.set(1.5f, -0.5f, 1.5f, 7.5f);
        Path bezierPath = CacheForMarkerLineiPhone.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(1.5f, 7.5f);
        bezierPath.lineTo(1.5f, -0.5f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(1.5f);
        paint.setStrokeJoin(Paint.Join.BEVEL);
        paint.setStrokeCap(Paint.Cap.ROUND);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(upColor);
        canvas.drawPath(bezierPath, paint);
        canvas.restore();
    }
    
    private static class CacheForFormField {
        private static Paint paint = new Paint();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    
    public static void drawFormField(Canvas canvas, RectF frame) {
        // General Declarations
        Paint paint = CacheForFormField.paint;
        
        // Local Colors
        int upColor = Color.argb(255, 76, 142, 162);
        
        // Bezier
        RectF bezierRect = CacheForFormField.bezierRect;
        bezierRect.set(frame.left + 0.46f,
            frame.top + 30.5f,
            frame.left + 102.61f,
            frame.top + 30.5f);
        Path bezierPath = CacheForFormField.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(frame.left + frame.width() * 0.00446f, frame.top + frame.height() * 0.89706f);
        bezierPath.lineTo(frame.left + frame.width() * 0.98661f, frame.top + frame.height() * 0.89706f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(1f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(upColor);
        canvas.drawPath(bezierPath, paint);
        canvas.restore();
    }
    
    private static class CacheForIPhoneBtnTempo {
        private static Paint paint = new Paint();
        private static RectF ovalRect = new RectF();
        private static Path ovalPath = new Path();
        private static RectF oval2Rect = new RectF();
        private static Path oval2Path = new Path();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
        private static RectF bezier4Rect = new RectF();
        private static Path bezier4Path = new Path();
        private static RectF bezier5Rect = new RectF();
        private static Path bezier5Path = new Path();
        private static RectF bezier6Rect = new RectF();
        private static Path bezier6Path = new Path();
        private static RectF bezier7Rect = new RectF();
        private static Path bezier7Path = new Path();
        private static RectF bezier8Rect = new RectF();
        private static Path bezier8Path = new Path();
        private static RectF bezier9Rect = new RectF();
        private static Path bezier9Path = new Path();
        private static RectF bezier10Rect = new RectF();
        private static Path bezier10Path = new Path();
        private static RectF bezier11Rect = new RectF();
        private static Path bezier11Path = new Path();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
        private static RectF label2Rect = new RectF();
        private static TextPaint label2TextPaint = new TextPaint();
        private static PaintCodeStaticLayout label2StaticLayout = new PaintCodeStaticLayout();
        private static RectF textRect = new RectF();
        private static TextPaint textTextPaint = new TextPaint();
        private static PaintCodeStaticLayout textStaticLayout = new PaintCodeStaticLayout();
        private static RectF text2Rect = new RectF();
        private static TextPaint text2TextPaint = new TextPaint();
        private static PaintCodeStaticLayout text2StaticLayout = new PaintCodeStaticLayout();
        private static RectF text3Rect = new RectF();
        private static TextPaint text3TextPaint = new TextPaint();
        private static PaintCodeStaticLayout text3StaticLayout = new PaintCodeStaticLayout();
    }
    
    
    public static void drawIPhoneBtnTempo(Canvas canvas, Context context, boolean isPressed, boolean isAlt, float rate) {
        // General Declarations
        Paint paint = CacheForIPhoneBtnTempo.paint;
        
        // Local Colors
        int upControls = Color.argb(255, 0, 0, 0);
        int downControls = Color.argb(255, 132, 132, 132);
        int white = Color.argb(255, 255, 255, 255);
        
        // Local Variables
        boolean isStep = rate < 30f;
        boolean isNotStep = !isStep;
        String rateString = String.valueOf((int) Math.round(rate)) + "%";
        int btnColorBlackAltWhite = isAlt ? (isPressed ? downControls : white) : (isPressed ? downControls : upControls);
        
        // Group 2
        {
            // Oval
            RectF ovalRect = CacheForIPhoneBtnTempo.ovalRect;
            ovalRect.set(4f, 7.66f, 24f, 27.66f);
            Path ovalPath = CacheForIPhoneBtnTempo.ovalPath;
            ovalPath.reset();
            ovalPath.addOval(ovalRect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnColorBlackAltWhite);
            canvas.drawPath(ovalPath, paint);
            canvas.restore();
            
            // Oval 2
            RectF oval2Rect = CacheForIPhoneBtnTempo.oval2Rect;
            oval2Rect.set(13f, 16.66f, 15f, 18.66f);
            Path oval2Path = CacheForIPhoneBtnTempo.oval2Path;
            oval2Path.reset();
            oval2Path.addOval(oval2Rect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnColorBlackAltWhite);
            canvas.drawPath(oval2Path, paint);
            canvas.restore();
            
            // Bezier
            RectF bezierRect = CacheForIPhoneBtnTempo.bezierRect;
            bezierRect.set(14.92f, 12.43f, 19.23f, 16.73f);
            Path bezierPath = CacheForIPhoneBtnTempo.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(14.92f, 16.73f);
            bezierPath.lineTo(19.23f, 12.43f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnColorBlackAltWhite);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
            
            // Bezier 2
            RectF bezier2Rect = CacheForIPhoneBtnTempo.bezier2Rect;
            bezier2Rect.set(5.69f, 17.22f, 7.43f, 17.22f);
            Path bezier2Path = CacheForIPhoneBtnTempo.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(5.69f, 17.22f);
            bezier2Path.lineTo(7.43f, 17.22f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnColorBlackAltWhite);
            canvas.drawPath(bezier2Path, paint);
            canvas.restore();
            
            // Bezier 3
            RectF bezier3Rect = CacheForIPhoneBtnTempo.bezier3Rect;
            bezier3Rect.set(6.37f, 20.15f, 7.97f, 20.82f);
            Path bezier3Path = CacheForIPhoneBtnTempo.bezier3Path;
            bezier3Path.reset();
            bezier3Path.moveTo(6.37f, 20.82f);
            bezier3Path.lineTo(7.97f, 20.15f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnColorBlackAltWhite);
            canvas.drawPath(bezier3Path, paint);
            canvas.restore();
            
            // Bezier 4
            RectF bezier4Rect = CacheForIPhoneBtnTempo.bezier4Rect;
            bezier4Rect.set(20.02f, 20.15f, 21.63f, 20.82f);
            Path bezier4Path = CacheForIPhoneBtnTempo.bezier4Path;
            bezier4Path.reset();
            bezier4Path.moveTo(21.63f, 20.82f);
            bezier4Path.lineTo(20.02f, 20.15f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnColorBlackAltWhite);
            canvas.drawPath(bezier4Path, paint);
            canvas.restore();
            
            // Bezier 5
            RectF bezier5Rect = CacheForIPhoneBtnTempo.bezier5Rect;
            bezier5Rect.set(20.52f, 17.22f, 22.26f, 17.22f);
            Path bezier5Path = CacheForIPhoneBtnTempo.bezier5Path;
            bezier5Path.reset();
            bezier5Path.moveTo(22.26f, 17.22f);
            bezier5Path.lineTo(20.52f, 17.22f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnColorBlackAltWhite);
            canvas.drawPath(bezier5Path, paint);
            canvas.restore();
            
            // Bezier 6
            RectF bezier6Rect = CacheForIPhoneBtnTempo.bezier6Rect;
            bezier6Rect.set(20.02f, 14.49f, 21.63f, 15.16f);
            Path bezier6Path = CacheForIPhoneBtnTempo.bezier6Path;
            bezier6Path.reset();
            bezier6Path.moveTo(21.63f, 14.49f);
            bezier6Path.lineTo(20.02f, 15.16f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnColorBlackAltWhite);
            canvas.drawPath(bezier6Path, paint);
            canvas.restore();
            
            // Bezier 7
            RectF bezier7Rect = CacheForIPhoneBtnTempo.bezier7Rect;
            bezier7Rect.set(17.04f, 10.02f, 17.71f, 11.63f);
            Path bezier7Path = CacheForIPhoneBtnTempo.bezier7Path;
            bezier7Path.reset();
            bezier7Path.moveTo(17.71f, 10.02f);
            bezier7Path.lineTo(17.04f, 11.63f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnColorBlackAltWhite);
            canvas.drawPath(bezier7Path, paint);
            canvas.restore();
            
            // Bezier 8
            RectF bezier8Rect = CacheForIPhoneBtnTempo.bezier8Rect;
            bezier8Rect.set(14.43f, 9.56f, 14.44f, 11.29f);
            Path bezier8Path = CacheForIPhoneBtnTempo.bezier8Path;
            bezier8Path.reset();
            bezier8Path.moveTo(14.43f, 9.56f);
            bezier8Path.lineTo(14.43f, 11.29f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnColorBlackAltWhite);
            canvas.drawPath(bezier8Path, paint);
            canvas.restore();
            
            // Bezier 9
            RectF bezier9Rect = CacheForIPhoneBtnTempo.bezier9Rect;
            bezier9Rect.set(10.84f, 10.02f, 11.5f, 11.63f);
            Path bezier9Path = CacheForIPhoneBtnTempo.bezier9Path;
            bezier9Path.reset();
            bezier9Path.moveTo(10.84f, 10.02f);
            bezier9Path.lineTo(11.5f, 11.63f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnColorBlackAltWhite);
            canvas.drawPath(bezier9Path, paint);
            canvas.restore();
            
            // Bezier 10
            RectF bezier10Rect = CacheForIPhoneBtnTempo.bezier10Rect;
            bezier10Rect.set(8.16f, 11.81f, 9.39f, 13.04f);
            Path bezier10Path = CacheForIPhoneBtnTempo.bezier10Path;
            bezier10Path.reset();
            bezier10Path.moveTo(8.16f, 11.81f);
            bezier10Path.lineTo(9.39f, 13.04f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnColorBlackAltWhite);
            canvas.drawPath(bezier10Path, paint);
            canvas.restore();
            
            // Bezier 11
            RectF bezier11Rect = CacheForIPhoneBtnTempo.bezier11Rect;
            bezier11Rect.set(6.37f, 14.49f, 7.97f, 15.16f);
            Path bezier11Path = CacheForIPhoneBtnTempo.bezier11Path;
            bezier11Path.reset();
            bezier11Path.moveTo(6.37f, 14.49f);
            bezier11Path.lineTo(7.97f, 15.16f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnColorBlackAltWhite);
            canvas.drawPath(bezier11Path, paint);
            canvas.restore();
            
            // Rectangle
            RectF rectangleRect = CacheForIPhoneBtnTempo.rectangleRect;
            rectangleRect.set(10f, 21.66f, 18f, 24.66f);
            Path rectanglePath = CacheForIPhoneBtnTempo.rectanglePath;
            rectanglePath.reset();
            rectanglePath.moveTo(rectangleRect.left, rectangleRect.top);
            rectanglePath.lineTo(rectangleRect.right, rectangleRect.top);
            rectanglePath.lineTo(rectangleRect.right, rectangleRect.bottom);
            rectanglePath.lineTo(rectangleRect.left, rectangleRect.bottom);
            rectanglePath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnColorBlackAltWhite);
            canvas.drawPath(rectanglePath, paint);
            canvas.restore();
        }
        
        // Label 2
        if (isNotStep) {
            RectF label2Rect = CacheForIPhoneBtnTempo.label2Rect;
            label2Rect.set(23.88f, 5.48f, 57f, 29.6f);
            TextPaint label2TextPaint = CacheForIPhoneBtnTempo.label2TextPaint;
            label2TextPaint.reset();
            label2TextPaint.setFlags(Paint.ANTI_ALIAS_FLAG);
            label2TextPaint.setColor(btnColorBlackAltWhite);
            label2TextPaint.setTypeface(Typeface.createFromAsset(context.getAssets(), "HelveticaNeue.dfont"));
            label2TextPaint.setTextSize(12f);
            StaticLayout label2StaticLayout = CacheForIPhoneBtnTempo.label2StaticLayout.get((int) label2Rect.width(), Layout.Alignment.ALIGN_OPPOSITE, rateString, label2TextPaint);
            canvas.save();
            canvas.clipRect(label2Rect);
            canvas.translate(label2Rect.left, label2Rect.top + (label2Rect.height() - label2StaticLayout.getHeight()) / 2f);
            label2StaticLayout.draw(canvas);
            canvas.restore();
        }
        
        // STEP
        if (isStep) {
            // Text
            RectF textRect = CacheForIPhoneBtnTempo.textRect;
            textRect.set(26.71f, 9.9f, 61.94f, 26.37f);
            TextPaint textTextPaint = CacheForIPhoneBtnTempo.textTextPaint;
            textTextPaint.reset();
            textTextPaint.setFlags(Paint.ANTI_ALIAS_FLAG);
            textTextPaint.setColor(btnColorBlackAltWhite);
            textTextPaint.setTypeface(Typeface.createFromAsset(context.getAssets(), "SF-UI-Text-Bold.otf"));
            textTextPaint.setTextSize(12f);
            StaticLayout textStaticLayout = CacheForIPhoneBtnTempo.textStaticLayout.get((int) textRect.width(), Layout.Alignment.ALIGN_NORMAL, "NOTE", textTextPaint);
            canvas.save();
            canvas.clipRect(textRect);
            canvas.translate(textRect.left, textRect.top + (textRect.height() - textStaticLayout.getHeight()) / 2f);
            textStaticLayout.draw(canvas);
            canvas.restore();
            
            // Text 2
            RectF text2Rect = CacheForIPhoneBtnTempo.text2Rect;
            text2Rect.set(60.67f, 9.62f, 95.89f, 26.08f);
            TextPaint text2TextPaint = CacheForIPhoneBtnTempo.text2TextPaint;
            text2TextPaint.reset();
            text2TextPaint.setFlags(Paint.ANTI_ALIAS_FLAG);
            text2TextPaint.setColor(btnColorBlackAltWhite);
            text2TextPaint.setTypeface(Typeface.createFromAsset(context.getAssets(), "SF-UI-Text-Regular.otf"));
            text2TextPaint.setTextSize(12f);
            StaticLayout text2StaticLayout = CacheForIPhoneBtnTempo.text2StaticLayout.get((int) text2Rect.width(), Layout.Alignment.ALIGN_NORMAL, "Step", text2TextPaint);
            canvas.save();
            canvas.clipRect(text2Rect);
            canvas.translate(text2Rect.left, text2Rect.top + (text2Rect.height() - text2StaticLayout.getHeight()) / 2f);
            text2StaticLayout.draw(canvas);
            canvas.restore();
            
            // Text 3
            RectF text3Rect = CacheForIPhoneBtnTempo.text3Rect;
            text3Rect.set(85.42f, 9.27f, 96.27f, 22.97f);
            TextPaint text3TextPaint = CacheForIPhoneBtnTempo.text3TextPaint;
            text3TextPaint.reset();
            text3TextPaint.setFlags(Paint.ANTI_ALIAS_FLAG);
            text3TextPaint.setColor(btnColorBlackAltWhite);
            text3TextPaint.setTypeface(Typeface.createFromAsset(context.getAssets(), "SF-UI-Text-Regular.otf"));
            text3TextPaint.setTextSize(9f);
            StaticLayout text3StaticLayout = CacheForIPhoneBtnTempo.text3StaticLayout.get((int) text3Rect.width(), Layout.Alignment.ALIGN_NORMAL, "â¢", text3TextPaint);
            canvas.save();
            canvas.clipRect(text3Rect);
            canvas.translate(text3Rect.left, text3Rect.top + (text3Rect.height() - text3StaticLayout.getHeight()) / 2f);
            text3StaticLayout.draw(canvas);
            canvas.restore();
        }
    }
    
    private static class CacheForIPhoneVolumeIcon {
        private static Paint paint = new Paint();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
        private static RectF bezier4Rect = new RectF();
        private static Path bezier4Path = new Path();
    }
    
    
    public static void drawIPhoneVolumeIcon(Canvas canvas) {
        // General Declarations
        Paint paint = CacheForIPhoneVolumeIcon.paint;
        
        // Local Colors
        int upColor = Color.argb(255, 76, 142, 162);
        
        // Group 2
        {
            // Bezier
            RectF bezierRect = CacheForIPhoneVolumeIcon.bezierRect;
            bezierRect.set(2.08f, 1.76f, 10.43f, 17.76f);
            Path bezierPath = CacheForIPhoneVolumeIcon.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(5.56f, 7.36f);
            bezierPath.lineTo(3.13f, 7.36f);
            bezierPath.cubicTo(2.55f, 7.36f, 2.08f, 7.9f, 2.08f, 8.56f);
            bezierPath.lineTo(2.08f, 10.96f);
            bezierPath.cubicTo(2.08f, 11.62f, 2.55f, 12.16f, 3.13f, 12.16f);
            bezierPath.lineTo(5.56f, 12.16f);
            bezierPath.lineTo(10.43f, 17.76f);
            bezierPath.lineTo(10.43f, 1.76f);
            bezierPath.lineTo(5.56f, 7.36f);
            bezierPath.lineTo(5.56f, 7.36f);
            bezierPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(upColor);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
            
            // Bezier 2
            RectF bezier2Rect = CacheForIPhoneVolumeIcon.bezier2Rect;
            bezier2Rect.set(15.65f, 3.36f, 18.08f, 16.16f);
            Path bezier2Path = CacheForIPhoneVolumeIcon.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(15.65f, 3.36f);
            bezier2Path.cubicTo(18.9f, 6.63f, 18.89f, 12.9f, 15.65f, 16.16f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(upColor);
            canvas.drawPath(bezier2Path, paint);
            canvas.restore();
            
            // Bezier 3
            RectF bezier3Rect = CacheForIPhoneVolumeIcon.bezier3Rect;
            bezier3Rect.set(13.91f, 4.96f, 15.98f, 14.56f);
            Path bezier3Path = CacheForIPhoneVolumeIcon.bezier3Path;
            bezier3Path.reset();
            bezier3Path.moveTo(13.91f, 4.96f);
            bezier3Path.cubicTo(16.66f, 7.58f, 16.68f, 11.93f, 13.91f, 14.56f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(upColor);
            canvas.drawPath(bezier3Path, paint);
            canvas.restore();
            
            // Bezier 4
            RectF bezier4Rect = CacheForIPhoneVolumeIcon.bezier4Rect;
            bezier4Rect.set(12.52f, 6.96f, 13.91f, 12.56f);
            Path bezier4Path = CacheForIPhoneVolumeIcon.bezier4Path;
            bezier4Path.reset();
            bezier4Path.moveTo(12.52f, 6.96f);
            bezier4Path.cubicTo(14.38f, 8.52f, 14.38f, 11.01f, 12.52f, 12.56f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(upColor);
            canvas.drawPath(bezier4Path, paint);
            canvas.restore();
        }
    }
    
    private static class CacheForIPhoneBtnLoopToggle {
        private static Paint paint = new Paint();
        private static RectF stroke67Rect = new RectF();
        private static Path stroke67Path = new Path();
        private static RectF stroke68Rect = new RectF();
        private static Path stroke68Path = new Path();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    
    public static void drawIPhoneBtnLoopToggle(Canvas canvas, boolean isPressed, boolean isAlt, boolean loopsEnabled) {
        // General Declarations
        Paint paint = CacheForIPhoneBtnLoopToggle.paint;
        
        // Local Colors
        int downControls = Color.argb(255, 132, 132, 132);
        int connectedColor = Color.argb(255, 255, 0, 0);
        int white = Color.argb(255, 255, 255, 255);
        int upControls = Color.argb(255, 0, 0, 0);
        
        // Local Variables
        int btnColorBlackAltWhite = isAlt ? (isPressed ? downControls : white) : (isPressed ? downControls : upControls);
        boolean loopsDisabled = !loopsEnabled;
        
        // Group
        {
            // Stroke-67
            RectF stroke67Rect = CacheForIPhoneBtnLoopToggle.stroke67Rect;
            stroke67Rect.set(8.5f, 11.52f, 22f, 28.52f);
            Path stroke67Path = CacheForIPhoneBtnLoopToggle.stroke67Path;
            stroke67Path.reset();
            stroke67Path.moveTo(15f, 11.52f);
            stroke67Path.lineTo(14.5f, 11.52f);
            stroke67Path.cubicTo(11.19f, 11.52f, 8.5f, 14.21f, 8.5f, 17.52f);
            stroke67Path.cubicTo(8.5f, 20.84f, 11.19f, 23.52f, 14.5f, 23.52f);
            stroke67Path.lineTo(22f, 23.52f);
            stroke67Path.lineTo(15.5f, 28.52f);
            stroke67Path.lineTo(15.5f, 23.52f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnColorBlackAltWhite);
            canvas.drawPath(stroke67Path, paint);
            canvas.restore();
            
            // Stroke-68
            RectF stroke68Rect = CacheForIPhoneBtnLoopToggle.stroke68Rect;
            stroke68Rect.set(18f, 6.57f, 31.5f, 23.52f);
            Path stroke68Path = CacheForIPhoneBtnLoopToggle.stroke68Path;
            stroke68Path.reset();
            stroke68Path.moveTo(25f, 23.52f);
            stroke68Path.lineTo(25.5f, 23.52f);
            stroke68Path.cubicTo(28.81f, 23.52f, 31.5f, 20.84f, 31.5f, 17.52f);
            stroke68Path.cubicTo(31.5f, 14.21f, 28.81f, 11.52f, 25.5f, 11.52f);
            stroke68Path.lineTo(18f, 11.52f);
            stroke68Path.lineTo(24.5f, 6.57f);
            stroke68Path.lineTo(24.5f, 11.52f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnColorBlackAltWhite);
            canvas.drawPath(stroke68Path, paint);
            canvas.restore();
            
            // Bezier
            if (loopsDisabled) {
                RectF bezierRect = CacheForIPhoneBtnLoopToggle.bezierRect;
                bezierRect.set(9.5f, 2.5f, 33.5f, 31.5f);
                Path bezierPath = CacheForIPhoneBtnLoopToggle.bezierPath;
                bezierPath.reset();
                bezierPath.moveTo(9.5f, 31.5f);
                bezierPath.lineTo(33.5f, 2.5f);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(1f);
                paint.setStrokeMiter(10f);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(connectedColor);
                canvas.drawPath(bezierPath, paint);
                canvas.restore();
            }
        }
    }
    
    private static class CacheForIPhoneBtnLoopSave {
        private static Paint paint = new Paint();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
    }
    
    
    public static void drawIPhoneBtnLoopSave(Canvas canvas, boolean isPressed, boolean isAlt) {
        // General Declarations
        Paint paint = CacheForIPhoneBtnLoopSave.paint;
        
        // Local Colors
        int downControls = Color.argb(255, 132, 132, 132);
        int white = Color.argb(255, 255, 255, 255);
        int upControls = Color.argb(255, 0, 0, 0);
        
        // Local Variables
        int btnColorBlackAltWhite = isAlt ? (isPressed ? downControls : white) : (isPressed ? downControls : upControls);
        
        // Group 2
        {
            // Bezier
            RectF bezierRect = CacheForIPhoneBtnLoopSave.bezierRect;
            bezierRect.set(9.66f, 11.47f, 23.16f, 28.47f);
            Path bezierPath = CacheForIPhoneBtnLoopSave.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(16.16f, 11.47f);
            bezierPath.lineTo(15.66f, 11.47f);
            bezierPath.cubicTo(12.35f, 11.47f, 9.66f, 14.15f, 9.66f, 17.47f);
            bezierPath.cubicTo(9.66f, 20.78f, 12.35f, 23.47f, 15.66f, 23.47f);
            bezierPath.lineTo(23.16f, 23.47f);
            bezierPath.lineTo(16.66f, 28.47f);
            bezierPath.lineTo(16.66f, 23.47f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnColorBlackAltWhite);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
            
            // Bezier 2
            RectF bezier2Rect = CacheForIPhoneBtnLoopSave.bezier2Rect;
            bezier2Rect.set(19.16f, 6.51f, 32.66f, 23.47f);
            Path bezier2Path = CacheForIPhoneBtnLoopSave.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(26.16f, 23.47f);
            bezier2Path.lineTo(26.66f, 23.47f);
            bezier2Path.cubicTo(29.98f, 23.47f, 32.66f, 20.78f, 32.66f, 17.47f);
            bezier2Path.cubicTo(32.66f, 14.15f, 29.98f, 11.47f, 26.66f, 11.47f);
            bezier2Path.lineTo(19.16f, 11.47f);
            bezier2Path.lineTo(25.66f, 6.51f);
            bezier2Path.lineTo(25.66f, 11.47f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnColorBlackAltWhite);
            canvas.drawPath(bezier2Path, paint);
            canvas.restore();
            
            // Bezier 3
            RectF bezier3Rect = CacheForIPhoneBtnLoopSave.bezier3Rect;
            bezier3Rect.set(18.16f, 13.97f, 25.74f, 20.96f);
            Path bezier3Path = CacheForIPhoneBtnLoopSave.bezier3Path;
            bezier3Path.reset();
            bezier3Path.moveTo(25.74f, 13.97f);
            bezier3Path.lineTo(20.11f, 20.96f);
            bezier3Path.lineTo(18.16f, 19.02f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnColorBlackAltWhite);
            canvas.drawPath(bezier3Path, paint);
            canvas.restore();
        }
    }
    
    private static class CacheForIPhoneBtnMyLoops {
        private static Paint paint = new Paint();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF textRect = new RectF();
        private static Path textPath = new Path();
    }
    
    
    public static void drawIPhoneBtnMyLoops(Canvas canvas, boolean isPressed, boolean isAlt) {
        // General Declarations
        Paint paint = CacheForIPhoneBtnMyLoops.paint;
        
        // Local Colors
        int upControls = Color.argb(255, 0, 0, 0);
        int downControls = Color.argb(255, 132, 132, 132);
        int white = Color.argb(255, 255, 255, 255);
        
        // Local Variables
        int btnColorBlackAltWhite = isAlt ? (isPressed ? downControls : white) : (isPressed ? downControls : upControls);
        
        // Group 3
        {
            // Bezier
            RectF bezierRect = CacheForIPhoneBtnMyLoops.bezierRect;
            bezierRect.set(8.66f, 11.35f, 22.16f, 28.35f);
            Path bezierPath = CacheForIPhoneBtnMyLoops.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(15.16f, 11.35f);
            bezierPath.lineTo(14.66f, 11.35f);
            bezierPath.cubicTo(11.35f, 11.35f, 8.66f, 14.04f, 8.66f, 17.35f);
            bezierPath.cubicTo(8.66f, 20.67f, 11.35f, 23.35f, 14.66f, 23.35f);
            bezierPath.lineTo(22.16f, 23.35f);
            bezierPath.lineTo(15.66f, 28.35f);
            bezierPath.lineTo(15.66f, 23.35f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnColorBlackAltWhite);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
            
            // Bezier 2
            RectF bezier2Rect = CacheForIPhoneBtnMyLoops.bezier2Rect;
            bezier2Rect.set(18.16f, 6.39f, 31.66f, 23.35f);
            Path bezier2Path = CacheForIPhoneBtnMyLoops.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(25.16f, 23.35f);
            bezier2Path.lineTo(25.66f, 23.35f);
            bezier2Path.cubicTo(28.98f, 23.35f, 31.66f, 20.67f, 31.66f, 17.35f);
            bezier2Path.cubicTo(31.66f, 14.04f, 28.98f, 11.35f, 25.66f, 11.35f);
            bezier2Path.lineTo(18.16f, 11.35f);
            bezier2Path.lineTo(24.66f, 6.39f);
            bezier2Path.lineTo(24.66f, 11.35f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnColorBlackAltWhite);
            canvas.drawPath(bezier2Path, paint);
            canvas.restore();
            
            // Text
            RectF textRect = CacheForIPhoneBtnMyLoops.textRect;
            textRect.set(15.6f, 15f, 24.04f, 19.23f);
            Path textPath = CacheForIPhoneBtnMyLoops.textPath;
            textPath.reset();
            textPath.moveTo(16.09f, 19.23f);
            textPath.lineTo(16.09f, 16f);
            textPath.lineTo(16.13f, 16f);
            textPath.lineTo(17.46f, 19.2f);
            textPath.lineTo(17.91f, 19.2f);
            textPath.lineTo(19.24f, 16f);
            textPath.lineTo(19.27f, 16f);
            textPath.lineTo(19.27f, 19.23f);
            textPath.lineTo(19.77f, 19.23f);
            textPath.lineTo(19.77f, 15f);
            textPath.lineTo(19.15f, 15f);
            textPath.lineTo(17.71f, 18.5f);
            textPath.lineTo(17.66f, 18.5f);
            textPath.lineTo(16.21f, 15f);
            textPath.lineTo(15.6f, 15f);
            textPath.lineTo(15.6f, 19.23f);
            textPath.lineTo(16.09f, 19.23f);
            textPath.close();
            textPath.moveTo(22.54f, 19.23f);
            textPath.lineTo(22.54f, 17.41f);
            textPath.lineTo(24.04f, 15f);
            textPath.lineTo(23.44f, 15f);
            textPath.lineTo(22.3f, 16.88f);
            textPath.lineTo(22.25f, 16.88f);
            textPath.lineTo(21.11f, 15f);
            textPath.lineTo(20.51f, 15f);
            textPath.lineTo(22.01f, 17.41f);
            textPath.lineTo(22.01f, 19.23f);
            textPath.lineTo(22.54f, 19.23f);
            textPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(btnColorBlackAltWhite);
            canvas.drawPath(textPath, paint);
        }
    }
    
    private static class CacheForBtnIphoneItunes {
        private static Paint paint = new Paint();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF rectangle2Rect = new RectF();
        private static Path rectangle2Path = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
        private static RectF bezier4Rect = new RectF();
        private static Path bezier4Path = new Path();
        private static RectF bezier5Rect = new RectF();
        private static Path bezier5Path = new Path();
        private static RectF bezier6Rect = new RectF();
        private static Path bezier6Path = new Path();
        private static RectF bezier7Rect = new RectF();
        private static Path bezier7Path = new Path();
    }
    
    
    public static void drawBtnIphoneItunes(Canvas canvas) {
        // General Declarations
        Paint paint = CacheForBtnIphoneItunes.paint;
        
        // Local Colors
        int fillColor3 = Color.argb(255, 255, 255, 255);
        int fillColor2 = Color.argb(255, 0, 0, 0);
        int fillColor = Color.argb(255, 149, 149, 149);
        
        // Group 2
        {
            // Rectangle
            RectF rectangleRect = CacheForBtnIphoneItunes.rectangleRect;
            rectangleRect.set(0.33f, 29.33f, 43.68f, 43.68f);
            Path rectanglePath = CacheForBtnIphoneItunes.rectanglePath;
            rectanglePath.reset();
            rectanglePath.addRoundRect(rectangleRect, 1.4f, 1.4f, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(fillColor3);
            canvas.drawPath(rectanglePath, paint);
            
            // Bezier
            RectF bezierRect = CacheForBtnIphoneItunes.bezierRect;
            bezierRect.set(0f, 29f, 44f, 44f);
            Path bezierPath = CacheForBtnIphoneItunes.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(42.23f, 44f);
            bezierPath.lineTo(1.77f, 44f);
            bezierPath.cubicTo(0.8f, 44f, 0f, 43.2f, 0f, 42.23f);
            bezierPath.lineTo(0f, 30.77f);
            bezierPath.cubicTo(0f, 29.79f, 0.8f, 29f, 1.77f, 29f);
            bezierPath.lineTo(42.23f, 29f);
            bezierPath.cubicTo(43.2f, 29f, 44f, 29.79f, 44f, 30.77f);
            bezierPath.lineTo(44f, 42.23f);
            bezierPath.cubicTo(44f, 43.2f, 43.2f, 44f, 42.23f, 44f);
            bezierPath.lineTo(42.23f, 44f);
            bezierPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(fillColor);
            canvas.drawPath(bezierPath, paint);
            
            // Rectangle 2
            RectF rectangle2Rect = CacheForBtnIphoneItunes.rectangle2Rect;
            rectangle2Rect.set(0.33f, 29.33f, 43.68f, 43.68f);
            Path rectangle2Path = CacheForBtnIphoneItunes.rectangle2Path;
            rectangle2Path.reset();
            rectangle2Path.addRoundRect(rectangle2Rect, 1.4f, 1.4f, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(fillColor2);
            canvas.drawPath(rectangle2Path, paint);
            
            // Group 3
            {
                // Bezier 2
                RectF bezier2Rect = CacheForBtnIphoneItunes.bezier2Rect;
                bezier2Rect.set(7.31f, 32.24f, 8.76f, 39.89f);
                Path bezier2Path = CacheForBtnIphoneItunes.bezier2Path;
                bezier2Path.reset();
                bezier2Path.moveTo(8.76f, 32.95f);
                bezier2Path.cubicTo(8.76f, 33.16f, 8.69f, 33.33f, 8.55f, 33.46f);
                bezier2Path.cubicTo(8.41f, 33.6f, 8.23f, 33.66f, 8.01f, 33.66f);
                bezier2Path.cubicTo(7.82f, 33.66f, 7.65f, 33.59f, 7.51f, 33.46f);
                bezier2Path.cubicTo(7.38f, 33.32f, 7.31f, 33.15f, 7.31f, 32.95f);
                bezier2Path.cubicTo(7.31f, 32.74f, 7.38f, 32.57f, 7.52f, 32.44f);
                bezier2Path.cubicTo(7.66f, 32.31f, 7.83f, 32.24f, 8.04f, 32.24f);
                bezier2Path.cubicTo(8.24f, 32.24f, 8.41f, 32.31f, 8.55f, 32.44f);
                bezier2Path.cubicTo(8.69f, 32.57f, 8.76f, 32.74f, 8.76f, 32.95f);
                bezier2Path.close();
                bezier2Path.moveTo(8.63f, 39.89f);
                bezier2Path.lineTo(7.44f, 39.89f);
                bezier2Path.lineTo(7.44f, 34.54f);
                bezier2Path.lineTo(8.63f, 34.54f);
                bezier2Path.lineTo(8.63f, 39.89f);
                bezier2Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(fillColor3);
                canvas.drawPath(bezier2Path, paint);
                
                // Bezier 3
                RectF bezier3Rect = CacheForBtnIphoneItunes.bezier3Rect;
                bezier3Rect.set(9.61f, 32.47f, 15.04f, 39.89f);
                Path bezier3Path = CacheForBtnIphoneItunes.bezier3Path;
                bezier3Path.reset();
                bezier3Path.moveTo(15.04f, 33.47f);
                bezier3Path.lineTo(12.91f, 33.47f);
                bezier3Path.lineTo(12.91f, 39.89f);
                bezier3Path.lineTo(11.72f, 39.89f);
                bezier3Path.lineTo(11.72f, 33.47f);
                bezier3Path.lineTo(9.61f, 33.47f);
                bezier3Path.lineTo(9.61f, 32.47f);
                bezier3Path.lineTo(15.04f, 32.47f);
                bezier3Path.lineTo(15.04f, 33.47f);
                bezier3Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(fillColor3);
                canvas.drawPath(bezier3Path, paint);
                
                // Bezier 4
                RectF bezier4Rect = CacheForBtnIphoneItunes.bezier4Rect;
                bezier4Rect.set(15.32f, 34.54f, 19.97f, 40.01f);
                Path bezier4Path = CacheForBtnIphoneItunes.bezier4Path;
                bezier4Path.reset();
                bezier4Path.moveTo(19.97f, 39.89f);
                bezier4Path.lineTo(18.93f, 39.89f);
                bezier4Path.lineTo(18.86f, 39.07f);
                bezier4Path.lineTo(18.84f, 39.07f);
                bezier4Path.cubicTo(18.47f, 39.7f, 17.9f, 40.01f, 17.15f, 40.01f);
                bezier4Path.cubicTo(16.62f, 40.01f, 16.2f, 39.85f, 15.88f, 39.52f);
                bezier4Path.cubicTo(15.51f, 39.11f, 15.32f, 38.5f, 15.32f, 37.69f);
                bezier4Path.lineTo(15.32f, 34.54f);
                bezier4Path.lineTo(16.51f, 34.54f);
                bezier4Path.lineTo(16.51f, 37.49f);
                bezier4Path.cubicTo(16.51f, 38.52f, 16.86f, 39.03f, 17.56f, 39.03f);
                bezier4Path.cubicTo(18.09f, 39.03f, 18.46f, 38.77f, 18.66f, 38.26f);
                bezier4Path.cubicTo(18.71f, 38.13f, 18.74f, 37.98f, 18.74f, 37.81f);
                bezier4Path.lineTo(18.74f, 34.54f);
                bezier4Path.lineTo(19.93f, 34.54f);
                bezier4Path.lineTo(19.93f, 38.35f);
                bezier4Path.cubicTo(19.93f, 38.85f, 19.94f, 39.37f, 19.97f, 39.89f);
                bezier4Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(fillColor3);
                canvas.drawPath(bezier4Path, paint);
                
                // Bezier 5
                RectF bezier5Rect = CacheForBtnIphoneItunes.bezier5Rect;
                bezier5Rect.set(21.56f, 34.43f, 26.24f, 39.89f);
                Path bezier5Path = CacheForBtnIphoneItunes.bezier5Path;
                bezier5Path.reset();
                bezier5Path.moveTo(26.24f, 39.89f);
                bezier5Path.lineTo(25.05f, 39.89f);
                bezier5Path.lineTo(25.05f, 36.82f);
                bezier5Path.cubicTo(25.05f, 35.87f, 24.69f, 35.4f, 23.97f, 35.4f);
                bezier5Path.cubicTo(23.62f, 35.4f, 23.34f, 35.53f, 23.12f, 35.79f);
                bezier5Path.cubicTo(22.9f, 36.05f, 22.79f, 36.36f, 22.79f, 36.71f);
                bezier5Path.lineTo(22.79f, 39.89f);
                bezier5Path.lineTo(21.6f, 39.89f);
                bezier5Path.lineTo(21.6f, 36.07f);
                bezier5Path.cubicTo(21.6f, 35.6f, 21.59f, 35.09f, 21.56f, 34.54f);
                bezier5Path.lineTo(22.6f, 34.54f);
                bezier5Path.lineTo(22.66f, 35.37f);
                bezier5Path.lineTo(22.69f, 35.37f);
                bezier5Path.cubicTo(22.83f, 35.11f, 23.03f, 34.9f, 23.31f, 34.73f);
                bezier5Path.cubicTo(23.63f, 34.53f, 23.99f, 34.43f, 24.38f, 34.43f);
                bezier5Path.cubicTo(24.88f, 34.43f, 25.29f, 34.59f, 25.63f, 34.92f);
                bezier5Path.cubicTo(26.04f, 35.31f, 26.24f, 35.9f, 26.24f, 36.69f);
                bezier5Path.lineTo(26.24f, 39.89f);
                bezier5Path.lineTo(26.24f, 39.89f);
                bezier5Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(fillColor3);
                canvas.drawPath(bezier5Path, paint);
                
                // Bezier 6
                RectF bezier6Rect = CacheForBtnIphoneItunes.bezier6Rect;
                bezier6Rect.set(27.54f, 34.42f, 32.29f, 39.99f);
                Path bezier6Path = CacheForBtnIphoneItunes.bezier6Path;
                bezier6Path.reset();
                bezier6Path.moveTo(32.29f, 36.96f);
                bezier6Path.cubicTo(32.29f, 37.17f, 32.27f, 37.35f, 32.24f, 37.5f);
                bezier6Path.lineTo(28.68f, 37.5f);
                bezier6Path.cubicTo(28.7f, 38.03f, 28.87f, 38.43f, 29.2f, 38.71f);
                bezier6Path.cubicTo(29.5f, 38.96f, 29.89f, 39.08f, 30.37f, 39.08f);
                bezier6Path.cubicTo(30.89f, 39.08f, 31.38f, 39f, 31.81f, 38.83f);
                bezier6Path.lineTo(31.99f, 39.66f);
                bezier6Path.cubicTo(31.49f, 39.88f, 30.89f, 39.99f, 30.2f, 39.99f);
                bezier6Path.cubicTo(29.37f, 39.99f, 28.72f, 39.74f, 28.25f, 39.26f);
                bezier6Path.cubicTo(27.78f, 38.77f, 27.54f, 38.11f, 27.54f, 37.29f);
                bezier6Path.cubicTo(27.54f, 36.48f, 27.76f, 35.81f, 28.2f, 35.28f);
                bezier6Path.cubicTo(28.66f, 34.71f, 29.29f, 34.42f, 30.07f, 34.42f);
                bezier6Path.cubicTo(30.84f, 34.42f, 31.42f, 34.71f, 31.82f, 35.28f);
                bezier6Path.cubicTo(32.13f, 35.73f, 32.29f, 36.29f, 32.29f, 36.96f);
                bezier6Path.close();
                bezier6Path.moveTo(31.16f, 36.65f);
                bezier6Path.cubicTo(31.16f, 36.3f, 31.09f, 36f, 30.93f, 35.74f);
                bezier6Path.cubicTo(30.72f, 35.41f, 30.41f, 35.24f, 29.98f, 35.24f);
                bezier6Path.cubicTo(29.59f, 35.24f, 29.28f, 35.41f, 29.04f, 35.73f);
                bezier6Path.cubicTo(28.84f, 35.99f, 28.72f, 36.29f, 28.68f, 36.65f);
                bezier6Path.lineTo(31.16f, 36.65f);
                bezier6Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(fillColor3);
                canvas.drawPath(bezier6Path, paint);
                
                // Bezier 7
                RectF bezier7Rect = CacheForBtnIphoneItunes.bezier7Rect;
                bezier7Rect.set(33.28f, 34.43f, 36.9f, 40f);
                Path bezier7Path = CacheForBtnIphoneItunes.bezier7Path;
                bezier7Path.reset();
                bezier7Path.moveTo(36.9f, 38.35f);
                bezier7Path.cubicTo(36.9f, 38.85f, 36.71f, 39.25f, 36.35f, 39.55f);
                bezier7Path.cubicTo(35.98f, 39.85f, 35.47f, 40f, 34.83f, 40f);
                bezier7Path.cubicTo(34.22f, 40f, 33.7f, 39.88f, 33.28f, 39.63f);
                bezier7Path.lineTo(33.53f, 38.75f);
                bezier7Path.cubicTo(33.94f, 39f, 34.38f, 39.13f, 34.84f, 39.13f);
                bezier7Path.cubicTo(35.45f, 39.13f, 35.75f, 38.9f, 35.75f, 38.46f);
                bezier7Path.cubicTo(35.75f, 38.26f, 35.69f, 38.1f, 35.56f, 37.97f);
                bezier7Path.cubicTo(35.42f, 37.84f, 35.19f, 37.71f, 34.85f, 37.59f);
                bezier7Path.cubicTo(33.9f, 37.24f, 33.42f, 36.72f, 33.42f, 36.05f);
                bezier7Path.cubicTo(33.42f, 35.59f, 33.6f, 35.2f, 33.95f, 34.89f);
                bezier7Path.cubicTo(34.3f, 34.59f, 34.77f, 34.43f, 35.35f, 34.43f);
                bezier7Path.cubicTo(35.87f, 34.43f, 36.32f, 34.54f, 36.7f, 34.75f);
                bezier7Path.lineTo(36.45f, 35.6f);
                bezier7Path.cubicTo(36.1f, 35.39f, 35.74f, 35.29f, 35.36f, 35.29f);
                bezier7Path.cubicTo(35.11f, 35.29f, 34.91f, 35.35f, 34.77f, 35.46f);
                bezier7Path.cubicTo(34.63f, 35.58f, 34.56f, 35.73f, 34.56f, 35.92f);
                bezier7Path.cubicTo(34.56f, 36.1f, 34.64f, 36.25f, 34.78f, 36.37f);
                bezier7Path.cubicTo(34.91f, 36.48f, 35.15f, 36.6f, 35.51f, 36.73f);
                bezier7Path.cubicTo(36.44f, 37.08f, 36.9f, 37.62f, 36.9f, 38.35f);
                bezier7Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(fillColor3);
                canvas.drawPath(bezier7Path, paint);
            }
        }
    }
    
    private static class CacheForDownloadProgress {
        private static Paint paint = new Paint();
        private static RectF rectangle2Rect = new RectF();
        private static Path rectangle2Path = new Path();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
    }
    
    
    public static void drawDownloadProgress(Canvas canvas, boolean isPressed, float redValue, float greenValue, float blueValue, PointF scrollSize, float progress) {
        // General Declarations
        Paint paint = CacheForDownloadProgress.paint;
        
        // Local Colors
        int downControls = Color.argb(255, 132, 132, 132);
        
        // Local Variables
        float progressWidth = progress * scrollSize.x;
        int backgroundColor = isPressed ? downControls : Color.argb(255, (int) (redValue * 255f), (int) (greenValue * 255f), (int) (blueValue * 255f));
        
        // Rectangle 2
        RectF rectangle2Rect = CacheForDownloadProgress.rectangle2Rect;
        rectangle2Rect.set(2.92f, 19.75f, 2.92f + progressWidth, 19.75f + scrollSize.y);
        Path rectangle2Path = CacheForDownloadProgress.rectangle2Path;
        rectangle2Path.reset();
        rectangle2Path.addRoundRect(rectangle2Rect, 2f, 2f, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(backgroundColor);
        canvas.drawPath(rectangle2Path, paint);
        
        // Rectangle
        RectF rectangleRect = CacheForDownloadProgress.rectangleRect;
        rectangleRect.set(2.92f, 19.75f, 2.92f + scrollSize.x, 19.75f + scrollSize.y);
        Path rectanglePath = CacheForDownloadProgress.rectanglePath;
        rectanglePath.reset();
        rectanglePath.addRoundRect(rectangleRect, 2f, 2f, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(1.5f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(backgroundColor);
        canvas.drawPath(rectanglePath, paint);
        canvas.restore();
    }
    
    private static class CacheForBtnLibraryIntro {
        private static Paint paint = new Paint();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
    }
    
    
    public static void drawBtnLibraryIntro(Canvas canvas, boolean isPressed) {
        // General Declarations
        Paint paint = CacheForBtnLibraryIntro.paint;
        
        // Local Colors
        int upColor = Color.argb(255, 76, 142, 162);
        int downColor = Color.argb(255, 63, 113, 129);
        
        // Local Variables
        int btnColor = isPressed ? downColor : upColor;
        
        // Group 2
        {
            // Bezier
            RectF bezierRect = CacheForBtnLibraryIntro.bezierRect;
            bezierRect.set(9.5f, 9.5f, 50.5f, 48.5f);
            Path bezierPath = CacheForBtnLibraryIntro.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(30f, 16.33f);
            bezierPath.cubicTo(30f, 12.55f, 39.59f, 9.5f, 50.5f, 9.5f);
            bezierPath.lineTo(50.5f, 41.68f);
            bezierPath.cubicTo(39.59f, 41.68f, 30f, 44.73f, 30f, 48.5f);
            bezierPath.cubicTo(30f, 44.73f, 20.4f, 41.68f, 9.5f, 41.68f);
            bezierPath.lineTo(9.5f, 9.5f);
            bezierPath.cubicTo(20.4f, 9.5f, 30f, 12.55f, 30f, 16.33f);
            bezierPath.lineTo(30f, 16.33f);
            bezierPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnColor);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
            
            // Bezier 2
            RectF bezier2Rect = CacheForBtnLibraryIntro.bezier2Rect;
            bezier2Rect.set(30f, 16.33f, 30f, 48.26f);
            Path bezier2Path = CacheForBtnLibraryIntro.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(30f, 16.33f);
            bezier2Path.lineTo(30f, 48.26f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnColor);
            canvas.drawPath(bezier2Path, paint);
            canvas.restore();
        }
    }
    
    private static class CacheForBtnTwitter {
        private static Paint paint = new Paint();
        private static RectF ovalRect = new RectF();
        private static Path ovalPath = new Path();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    
    public static void drawBtnTwitter(Canvas canvas, boolean isPressed) {
        // General Declarations
        Paint paint = CacheForBtnTwitter.paint;
        
        // Local Colors
        int navColorDown = Color.argb(255, 205, 205, 205);
        int navColorUp = Color.argb(255, 255, 255, 255);
        
        // Local Variables
        int btnNavColor = isPressed ? navColorDown : navColorUp;
        
        // Group 2
        {
            // Oval
            RectF ovalRect = CacheForBtnTwitter.ovalRect;
            ovalRect.set(8f, 6f, 36f, 34f);
            Path ovalPath = CacheForBtnTwitter.ovalPath;
            ovalPath.reset();
            ovalPath.addOval(ovalRect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnNavColor);
            canvas.drawPath(ovalPath, paint);
            canvas.restore();
            
            // Bezier
            RectF bezierRect = CacheForBtnTwitter.bezierRect;
            bezierRect.set(14.39f, 13.65f, 29.91f, 26.35f);
            Path bezierPath = CacheForBtnTwitter.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(29.91f, 14.34f);
            bezierPath.cubicTo(29.91f, 14.34f, 28.27f, 14.52f, 27.54f, 14.67f);
            bezierPath.cubicTo(26.95f, 14.04f, 26.12f, 13.65f, 25.2f, 13.65f);
            bezierPath.cubicTo(23.43f, 13.65f, 22f, 15.09f, 22f, 16.86f);
            bezierPath.cubicTo(22f, 17.11f, 22.02f, 17.36f, 22.08f, 17.59f);
            bezierPath.cubicTo(19.42f, 17.46f, 17.05f, 16.18f, 15.47f, 14.24f);
            bezierPath.cubicTo(15.2f, 14.72f, 15.04f, 15.26f, 15.04f, 15.85f);
            bezierPath.cubicTo(15.04f, 16.96f, 15.61f, 17.94f, 16.47f, 18.52f);
            bezierPath.cubicTo(15.94f, 18.5f, 15.45f, 18.36f, 15.01f, 18.12f);
            bezierPath.lineTo(15.01f, 18.16f);
            bezierPath.cubicTo(15.01f, 19.71f, 16.12f, 21.01f, 17.58f, 21.3f);
            bezierPath.cubicTo(17.11f, 21.43f, 16.62f, 21.45f, 16.14f, 21.36f);
            bezierPath.cubicTo(16.54f, 22.63f, 17.73f, 23.55f, 19.13f, 23.58f);
            bezierPath.cubicTo(17.76f, 24.66f, 16.06f, 25.1f, 14.39f, 24.91f);
            bezierPath.cubicTo(15.8f, 25.82f, 17.49f, 26.35f, 19.3f, 26.35f);
            bezierPath.cubicTo(25.19f, 26.35f, 28.41f, 21.46f, 28.41f, 17.23f);
            bezierPath.cubicTo(28.41f, 17.09f, 28.41f, 16.95f, 28.41f, 16.82f);
            bezierPath.cubicTo(29.03f, 16.36f, 29.48f, 14.99f, 29.91f, 14.34f);
            bezierPath.lineTo(29.91f, 14.34f);
            bezierPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnNavColor);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
        }
    }
    
    private static class CacheForBtnFacebook {
        private static Paint paint = new Paint();
        private static RectF ovalRect = new RectF();
        private static Path ovalPath = new Path();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    
    public static void drawBtnFacebook(Canvas canvas, boolean isPressed) {
        // General Declarations
        Paint paint = CacheForBtnFacebook.paint;
        
        // Local Colors
        int navColorDown = Color.argb(255, 205, 205, 205);
        int navColorUp = Color.argb(255, 255, 255, 255);
        
        // Local Variables
        int btnNavColor = isPressed ? navColorDown : navColorUp;
        
        // Group 2
        {
            // Oval
            RectF ovalRect = CacheForBtnFacebook.ovalRect;
            ovalRect.set(8f, 6f, 36f, 34f);
            Path ovalPath = CacheForBtnFacebook.ovalPath;
            ovalPath.reset();
            ovalPath.addOval(ovalRect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnNavColor);
            canvas.drawPath(ovalPath, paint);
            canvas.restore();
            
            // Bezier
            RectF bezierRect = CacheForBtnFacebook.bezierRect;
            bezierRect.set(17.74f, 12.11f, 26.67f, 27.91f);
            Path bezierPath = CacheForBtnFacebook.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(26.67f, 16.96f);
            bezierPath.lineTo(23.83f, 16.96f);
            bezierPath.lineTo(23.83f, 15.71f);
            bezierPath.cubicTo(23.83f, 15.07f, 24.25f, 14.92f, 24.55f, 14.92f);
            bezierPath.lineTo(26.26f, 14.92f);
            bezierPath.lineTo(26.26f, 12.12f);
            bezierPath.lineTo(23.4f, 12.11f);
            bezierPath.cubicTo(20.6f, 12.11f, 20.17f, 14.2f, 20.17f, 15.54f);
            bezierPath.lineTo(20.17f, 16.96f);
            bezierPath.lineTo(17.74f, 16.96f);
            bezierPath.lineTo(17.74f, 19.39f);
            bezierPath.lineTo(20.17f, 19.39f);
            bezierPath.lineTo(20.17f, 27.91f);
            bezierPath.lineTo(23.83f, 27.91f);
            bezierPath.lineTo(23.83f, 19.39f);
            bezierPath.lineTo(26.38f, 19.39f);
            bezierPath.lineTo(26.67f, 16.96f);
            bezierPath.lineTo(26.67f, 16.96f);
            bezierPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnNavColor);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
        }
    }
    
    private static class CacheForBtnMail {
        private static Paint paint = new Paint();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
    }
    
    
    public static void drawBtnMail(Canvas canvas, boolean isPressed) {
        // General Declarations
        Paint paint = CacheForBtnMail.paint;
        
        // Local Colors
        int downControls = Color.argb(255, 132, 132, 132);
        int upControls = Color.argb(255, 0, 0, 0);
        
        // Local Variables
        int btnDarkColor = isPressed ? downControls : upControls;
        
        // Group 2
        {
            // Bezier
            RectF bezierRect = CacheForBtnMail.bezierRect;
            bezierRect.set(8.5f, 10.5f, 34.07f, 27.3f);
            Path bezierPath = CacheForBtnMail.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(17.63f, 27.3f);
            bezierPath.lineTo(10.33f, 27.3f);
            bezierPath.cubicTo(9.32f, 27.3f, 8.5f, 26.49f, 8.5f, 25.5f);
            bezierPath.lineTo(8.5f, 12.3f);
            bezierPath.cubicTo(8.5f, 11.31f, 9.32f, 10.5f, 10.33f, 10.5f);
            bezierPath.lineTo(32.24f, 10.5f);
            bezierPath.cubicTo(33.25f, 10.5f, 34.07f, 11.31f, 34.07f, 12.3f);
            bezierPath.lineTo(34.07f, 19.58f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnDarkColor);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
            
            // Bezier 2
            RectF bezier2Rect = CacheForBtnMail.bezier2Rect;
            bezier2Rect.set(9.11f, 11.1f, 33.46f, 20.7f);
            Path bezier2Path = CacheForBtnMail.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(33.46f, 11.1f);
            bezier2Path.lineTo(21.28f, 20.7f);
            bezier2Path.lineTo(9.11f, 11.1f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnDarkColor);
            canvas.drawPath(bezier2Path, paint);
            canvas.restore();
            
            // Bezier 3
            RectF bezier3Rect = CacheForBtnMail.bezier3Rect;
            bezier3Rect.set(20.67f, 21.3f, 36.5f, 34.5f);
            Path bezier3Path = CacheForBtnMail.bezier3Path;
            bezier3Path.reset();
            bezier3Path.moveTo(29.2f, 30.9f);
            bezier3Path.lineTo(29.2f, 34.5f);
            bezier3Path.lineTo(36.5f, 27.9f);
            bezier3Path.lineTo(29.2f, 21.3f);
            bezier3Path.lineTo(29.2f, 24.9f);
            bezier3Path.lineTo(20.67f, 24.9f);
            bezier3Path.lineTo(20.67f, 30.9f);
            bezier3Path.lineTo(29.2f, 30.9f);
            bezier3Path.lineTo(29.2f, 30.9f);
            bezier3Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnDarkColor);
            canvas.drawPath(bezier3Path, paint);
            canvas.restore();
        }
    }
    
    private static class CacheForBtnFacebookDark {
        private static Paint paint = new Paint();
        private static RectF ovalRect = new RectF();
        private static Path ovalPath = new Path();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    
    public static void drawBtnFacebookDark(Canvas canvas, boolean isPressed) {
        // General Declarations
        Paint paint = CacheForBtnFacebookDark.paint;
        
        // Local Colors
        int downControls = Color.argb(255, 132, 132, 132);
        int upControls = Color.argb(255, 0, 0, 0);
        
        // Local Variables
        int btnDarkColor = isPressed ? downControls : upControls;
        
        // Group 2
        {
            // Oval
            RectF ovalRect = CacheForBtnFacebookDark.ovalRect;
            ovalRect.set(8f, 6f, 36f, 34f);
            Path ovalPath = CacheForBtnFacebookDark.ovalPath;
            ovalPath.reset();
            ovalPath.addOval(ovalRect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnDarkColor);
            canvas.drawPath(ovalPath, paint);
            canvas.restore();
            
            // Bezier
            RectF bezierRect = CacheForBtnFacebookDark.bezierRect;
            bezierRect.set(17.74f, 12.11f, 26.67f, 27.91f);
            Path bezierPath = CacheForBtnFacebookDark.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(26.67f, 16.96f);
            bezierPath.lineTo(23.83f, 16.96f);
            bezierPath.lineTo(23.83f, 15.71f);
            bezierPath.cubicTo(23.83f, 15.07f, 24.25f, 14.92f, 24.55f, 14.92f);
            bezierPath.lineTo(26.26f, 14.92f);
            bezierPath.lineTo(26.26f, 12.12f);
            bezierPath.lineTo(23.4f, 12.11f);
            bezierPath.cubicTo(20.6f, 12.11f, 20.17f, 14.2f, 20.17f, 15.54f);
            bezierPath.lineTo(20.17f, 16.96f);
            bezierPath.lineTo(17.74f, 16.96f);
            bezierPath.lineTo(17.74f, 19.39f);
            bezierPath.lineTo(20.17f, 19.39f);
            bezierPath.lineTo(20.17f, 27.91f);
            bezierPath.lineTo(23.83f, 27.91f);
            bezierPath.lineTo(23.83f, 19.39f);
            bezierPath.lineTo(26.38f, 19.39f);
            bezierPath.lineTo(26.67f, 16.96f);
            bezierPath.lineTo(26.67f, 16.96f);
            bezierPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnDarkColor);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
        }
    }
    
    private static class CacheForBtnTwitterDark {
        private static Paint paint = new Paint();
        private static RectF ovalRect = new RectF();
        private static Path ovalPath = new Path();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    
    public static void drawBtnTwitterDark(Canvas canvas, boolean isPressed) {
        // General Declarations
        Paint paint = CacheForBtnTwitterDark.paint;
        
        // Local Colors
        int downControls = Color.argb(255, 132, 132, 132);
        int upControls = Color.argb(255, 0, 0, 0);
        
        // Local Variables
        int btnDarkColor = isPressed ? downControls : upControls;
        
        // Group 2
        {
            // Oval
            RectF ovalRect = CacheForBtnTwitterDark.ovalRect;
            ovalRect.set(8f, 6f, 36f, 34f);
            Path ovalPath = CacheForBtnTwitterDark.ovalPath;
            ovalPath.reset();
            ovalPath.addOval(ovalRect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnDarkColor);
            canvas.drawPath(ovalPath, paint);
            canvas.restore();
            
            // Bezier
            RectF bezierRect = CacheForBtnTwitterDark.bezierRect;
            bezierRect.set(14.39f, 13.65f, 29.91f, 26.35f);
            Path bezierPath = CacheForBtnTwitterDark.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(29.91f, 14.34f);
            bezierPath.cubicTo(29.91f, 14.34f, 28.27f, 14.52f, 27.54f, 14.67f);
            bezierPath.cubicTo(26.95f, 14.04f, 26.12f, 13.65f, 25.2f, 13.65f);
            bezierPath.cubicTo(23.43f, 13.65f, 22f, 15.09f, 22f, 16.86f);
            bezierPath.cubicTo(22f, 17.11f, 22.02f, 17.36f, 22.08f, 17.59f);
            bezierPath.cubicTo(19.42f, 17.46f, 17.05f, 16.18f, 15.47f, 14.24f);
            bezierPath.cubicTo(15.2f, 14.72f, 15.04f, 15.26f, 15.04f, 15.85f);
            bezierPath.cubicTo(15.04f, 16.96f, 15.61f, 17.94f, 16.47f, 18.52f);
            bezierPath.cubicTo(15.94f, 18.5f, 15.45f, 18.36f, 15.01f, 18.12f);
            bezierPath.lineTo(15.01f, 18.16f);
            bezierPath.cubicTo(15.01f, 19.71f, 16.12f, 21.01f, 17.58f, 21.3f);
            bezierPath.cubicTo(17.11f, 21.43f, 16.62f, 21.45f, 16.14f, 21.36f);
            bezierPath.cubicTo(16.54f, 22.63f, 17.73f, 23.55f, 19.13f, 23.58f);
            bezierPath.cubicTo(17.76f, 24.66f, 16.06f, 25.1f, 14.39f, 24.91f);
            bezierPath.cubicTo(15.8f, 25.82f, 17.49f, 26.35f, 19.3f, 26.35f);
            bezierPath.cubicTo(25.19f, 26.35f, 28.41f, 21.46f, 28.41f, 17.23f);
            bezierPath.cubicTo(28.41f, 17.09f, 28.41f, 16.95f, 28.41f, 16.82f);
            bezierPath.cubicTo(29.03f, 16.36f, 29.48f, 14.99f, 29.91f, 14.34f);
            bezierPath.lineTo(29.91f, 14.34f);
            bezierPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnDarkColor);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
        }
    }
    
    private static class CacheForBtnLibraryIntroiPhone {
        private static Paint paint = new Paint();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
    }
    
    
    public static void drawBtnLibraryIntroiPhone(Canvas canvas, boolean isPressed) {
        // General Declarations
        Paint paint = CacheForBtnLibraryIntroiPhone.paint;
        
        // Local Colors
        int upColor = Color.argb(255, 76, 142, 162);
        int downColor = Color.argb(255, 63, 113, 129);
        
        // Local Variables
        int btnColor = isPressed ? downColor : upColor;
        
        // Group 2
        {
            // Bezier
            RectF bezierRect = CacheForBtnLibraryIntroiPhone.bezierRect;
            bezierRect.set(6.5f, 7.5f, 38.5f, 38.5f);
            Path bezierPath = CacheForBtnLibraryIntroiPhone.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(22.5f, 12.92f);
            bezierPath.cubicTo(22.5f, 9.93f, 29.99f, 7.5f, 38.5f, 7.5f);
            bezierPath.lineTo(38.5f, 33.08f);
            bezierPath.cubicTo(29.99f, 33.08f, 22.5f, 35.5f, 22.5f, 38.5f);
            bezierPath.cubicTo(22.5f, 35.5f, 15.01f, 33.08f, 6.5f, 33.08f);
            bezierPath.lineTo(6.5f, 7.5f);
            bezierPath.cubicTo(15.01f, 7.5f, 22.5f, 9.93f, 22.5f, 12.92f);
            bezierPath.lineTo(22.5f, 12.92f);
            bezierPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1.5f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnColor);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
            
            // Bezier 2
            RectF bezier2Rect = CacheForBtnLibraryIntroiPhone.bezier2Rect;
            bezier2Rect.set(22.5f, 12.92f, 22.5f, 38.31f);
            Path bezier2Path = CacheForBtnLibraryIntroiPhone.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(22.5f, 12.92f);
            bezier2Path.lineTo(22.5f, 38.31f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1.5f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnColor);
            canvas.drawPath(bezier2Path, paint);
            canvas.restore();
        }
    }
    
    private static class CacheForBtnStepNext {
        private static Paint paint = new Paint();
        private static RectF group = new RectF();
        private static RectF ovalRect = new RectF();
        private static Path ovalPath = new Path();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    
    public static void drawBtnStepNext(Canvas canvas, RectF frame, boolean isPressed) {
        // General Declarations
        Paint paint = CacheForBtnStepNext.paint;
        
        // Local Colors
        int downColor = Color.argb(255, 63, 113, 129);
        int upColor = Color.argb(255, 76, 142, 162);
        
        // Local Variables
        int btnColor = isPressed ? downColor : upColor;
        
        // Group
        {
            RectF group = CacheForBtnStepNext.group;
            group.set(frame.left + (float) Math.floor(frame.width() * 0.15909f + 0.5f),
                frame.top + (float) Math.floor(frame.height() * 0.15909f + 0.5f),
                frame.left + (float) Math.floor(frame.width() * 0.84091f + 0.5f),
                frame.top + (float) Math.floor(frame.height() * 0.84091f + 0.5f));
            
            // Oval
            RectF ovalRect = CacheForBtnStepNext.ovalRect;
            ovalRect.set(group.left,
                group.top,
                group.left + (float) Math.floor(group.width() + 0.5f),
                group.top + (float) Math.floor(group.height() + 0.5f));
            Path ovalPath = CacheForBtnStepNext.ovalPath;
            ovalPath.reset();
            ovalPath.addOval(ovalRect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(btnColor);
            canvas.drawPath(ovalPath, paint);
            
            // Bezier
            RectF bezierRect = CacheForBtnStepNext.bezierRect;
            bezierRect.set(group.left + (float) Math.floor(group.width() * 0.39893f - 0.47f) + 0.97f,
                group.top + (float) Math.floor(group.height() * 0.22774f - 0.33f) + 0.83f,
                group.left + (float) Math.floor(group.width() * 0.73226f - 0.47f) + 0.97f,
                group.top + (float) Math.floor(group.height() * 0.76107f - 0.33f) + 0.83f);
            Path bezierPath = CacheForBtnStepNext.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(group.left + group.width() * 0.72781f, group.top + group.height() * 0.48472f);
            bezierPath.lineTo(group.left + group.width() * 0.4167f, group.top + group.height() * 0.23017f);
            bezierPath.cubicTo(group.left + group.width() * 0.41333f, group.top + group.height() * 0.22741f, group.left + group.width() * 0.40884f, group.top + group.height() * 0.22697f, group.left + group.width() * 0.40506f, group.top + group.height() * 0.22901f);
            bezierPath.cubicTo(group.left + group.width() * 0.4013f, group.top + group.height() * 0.23107f, group.left + group.width() * 0.39893f, group.top + group.height() * 0.23526f, group.left + group.width() * 0.39893f, group.top + group.height() * 0.23985f);
            bezierPath.lineTo(group.left + group.width() * 0.39893f, group.top + group.height() * 0.74894f);
            bezierPath.cubicTo(group.left + group.width() * 0.39893f, group.top + group.height() * 0.75355f, group.left + group.width() * 0.4013f, group.top + group.height() * 0.75774f, group.left + group.width() * 0.40506f, group.top + group.height() * 0.7598f);
            bezierPath.cubicTo(group.left + group.width() * 0.40884f, group.top + group.height() * 0.76184f, group.left + group.width() * 0.41333f, group.top + group.height() * 0.7614f, group.left + group.width() * 0.4167f, group.top + group.height() * 0.75867f);
            bezierPath.lineTo(group.left + group.width() * 0.72781f, group.top + group.height() * 0.50412f);
            bezierPath.cubicTo(group.left + group.width() * 0.73061f, group.top + group.height() * 0.50181f, group.left + group.width() * 0.73226f, group.top + group.height() * 0.49823f, group.left + group.width() * 0.73226f, group.top + group.height() * 0.49439f);
            bezierPath.cubicTo(group.left + group.width() * 0.73226f, group.top + group.height() * 0.49059f, group.left + group.width() * 0.73061f, group.top + group.height() * 0.487f, group.left + group.width() * 0.72781f, group.top + group.height() * 0.48472f);
            bezierPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            bezierPath.setFillType(Path.FillType.EVEN_ODD);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(GuitarTunesStyleKit.playbackBackground);
            canvas.drawPath(bezierPath, paint);
        }
    }
    
    private static class CacheForBtnStepPrev {
        private static Paint paint = new Paint();
        private static RectF group2 = new RectF();
        private static RectF oval2Rect = new RectF();
        private static Path oval2Path = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
    }
    
    
    public static void drawBtnStepPrev(Canvas canvas, RectF frame, boolean isPressed) {
        // General Declarations
        Paint paint = CacheForBtnStepPrev.paint;
        
        // Local Colors
        int downColor = Color.argb(255, 63, 113, 129);
        int upColor = Color.argb(255, 76, 142, 162);
        
        // Local Variables
        int btnColor = isPressed ? downColor : upColor;
        
        // Group 2
        {
            RectF group2 = CacheForBtnStepPrev.group2;
            group2.set(frame.left + (float) Math.floor(frame.width() * 0.15909f + 0.5f),
                frame.top + (float) Math.floor(frame.height() * 0.15822f - 0.46f) + 0.96f,
                frame.left + (float) Math.floor(frame.width() * 0.84091f + 0.5f),
                frame.top + (float) Math.floor(frame.height() * 0.84004f - 0.46f) + 0.96f);
            
            // Oval 2
            RectF oval2Rect = CacheForBtnStepPrev.oval2Rect;
            oval2Rect.set(group2.left,
                group2.top,
                group2.left + (float) Math.floor(group2.width() + 0.5f),
                group2.top + (float) Math.floor(group2.height() + 0.5f));
            Path oval2Path = CacheForBtnStepPrev.oval2Path;
            oval2Path.reset();
            oval2Path.addOval(oval2Rect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(btnColor);
            canvas.drawPath(oval2Path, paint);
            
            // Bezier 2
            RectF bezier2Rect = CacheForBtnStepPrev.bezier2Rect;
            bezier2Rect.set(group2.left + (float) Math.floor(group2.width() * 0.27469f + 0.26f) + 0.24f,
                group2.top + (float) Math.floor(group2.height() * 0.24061f + 0.28f) + 0.22f,
                group2.left + (float) Math.floor(group2.width() * 0.60802f + 0.26f) + 0.24f,
                group2.top + (float) Math.floor(group2.height() * 0.77394f + 0.28f) + 0.22f);
            Path bezier2Path = CacheForBtnStepPrev.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(group2.left + group2.width() * 0.27913f, group2.top + group2.height() * 0.49759f);
            bezier2Path.lineTo(group2.left + group2.width() * 0.59024f, group2.top + group2.height() * 0.24304f);
            bezier2Path.cubicTo(group2.left + group2.width() * 0.59362f, group2.top + group2.height() * 0.24028f, group2.left + group2.width() * 0.59811f, group2.top + group2.height() * 0.23984f, group2.left + group2.width() * 0.60189f, group2.top + group2.height() * 0.24188f);
            bezier2Path.cubicTo(group2.left + group2.width() * 0.60564f, group2.top + group2.height() * 0.24394f, group2.left + group2.width() * 0.60802f, group2.top + group2.height() * 0.24813f, group2.left + group2.width() * 0.60802f, group2.top + group2.height() * 0.25271f);
            bezier2Path.lineTo(group2.left + group2.width() * 0.60802f, group2.top + group2.height() * 0.76181f);
            bezier2Path.cubicTo(group2.left + group2.width() * 0.60802f, group2.top + group2.height() * 0.76642f, group2.left + group2.width() * 0.60564f, group2.top + group2.height() * 0.77061f, group2.left + group2.width() * 0.60189f, group2.top + group2.height() * 0.77267f);
            bezier2Path.cubicTo(group2.left + group2.width() * 0.59811f, group2.top + group2.height() * 0.77471f, group2.left + group2.width() * 0.59362f, group2.top + group2.height() * 0.77427f, group2.left + group2.width() * 0.59024f, group2.top + group2.height() * 0.77153f);
            bezier2Path.lineTo(group2.left + group2.width() * 0.27913f, group2.top + group2.height() * 0.51699f);
            bezier2Path.cubicTo(group2.left + group2.width() * 0.27633f, group2.top + group2.height() * 0.51468f, group2.left + group2.width() * 0.27469f, group2.top + group2.height() * 0.51109f, group2.left + group2.width() * 0.27469f, group2.top + group2.height() * 0.50726f);
            bezier2Path.cubicTo(group2.left + group2.width() * 0.27469f, group2.top + group2.height() * 0.50346f, group2.left + group2.width() * 0.27633f, group2.top + group2.height() * 0.49987f, group2.left + group2.width() * 0.27913f, group2.top + group2.height() * 0.49759f);
            bezier2Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            bezier2Path.setFillType(Path.FillType.EVEN_ODD);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(GuitarTunesStyleKit.playbackBackground);
            canvas.drawPath(bezier2Path, paint);
        }
    }
    
    private static class CacheForIPhoneBtnFullScreen {
        private static Paint paint = new Paint();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
        private static RectF bezier4Rect = new RectF();
        private static Path bezier4Path = new Path();
        private static RectF bezier5Rect = new RectF();
        private static Path bezier5Path = new Path();
        private static RectF bezier6Rect = new RectF();
        private static Path bezier6Path = new Path();
    }
    
    
    public static void drawIPhoneBtnFullScreen(Canvas canvas) {
        // General Declarations
        Paint paint = CacheForIPhoneBtnFullScreen.paint;
        
        // Local Colors
        int white = Color.argb(255, 255, 255, 255);
        
        // Group
        {
            // Bezier
            RectF bezierRect = CacheForIPhoneBtnFullScreen.bezierRect;
            bezierRect.set(11.56f, 9.13f, 18.77f, 16.33f);
            Path bezierPath = CacheForIPhoneBtnFullScreen.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(18.77f, 16.33f);
            bezierPath.cubicTo(18.77f, 16.33f, 11.56f, 9.13f, 11.56f, 9.13f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(white);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
            
            // Bezier 2
            RectF bezier2Rect = CacheForIPhoneBtnFullScreen.bezier2Rect;
            bezier2Rect.set(11.61f, 9.39f, 11.61f, 15.57f);
            Path bezier2Path = CacheForIPhoneBtnFullScreen.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(11.61f, 15.57f);
            bezier2Path.cubicTo(11.61f, 15.57f, 11.61f, 9.39f, 11.61f, 9.39f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(white);
            canvas.drawPath(bezier2Path, paint);
            canvas.restore();
            
            // Bezier 3
            RectF bezier3Rect = CacheForIPhoneBtnFullScreen.bezier3Rect;
            bezier3Rect.set(11.73f, 9.1f, 18.13f, 9.1f);
            Path bezier3Path = CacheForIPhoneBtnFullScreen.bezier3Path;
            bezier3Path.reset();
            bezier3Path.moveTo(18.13f, 9.1f);
            bezier3Path.cubicTo(18.13f, 9.1f, 11.73f, 9.1f, 11.73f, 9.1f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(white);
            canvas.drawPath(bezier3Path, paint);
            canvas.restore();
        }
        
        // Group 2
        {
            // Bezier 4
            RectF bezier4Rect = CacheForIPhoneBtnFullScreen.bezier4Rect;
            bezier4Rect.set(21.66f, 18.69f, 28.63f, 25.67f);
            Path bezier4Path = CacheForIPhoneBtnFullScreen.bezier4Path;
            bezier4Path.reset();
            bezier4Path.moveTo(21.66f, 18.69f);
            bezier4Path.cubicTo(21.66f, 18.69f, 28.63f, 25.67f, 28.63f, 25.67f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(white);
            canvas.drawPath(bezier4Path, paint);
            canvas.restore();
            
            // Bezier 5
            RectF bezier5Rect = CacheForIPhoneBtnFullScreen.bezier5Rect;
            bezier5Rect.set(28.57f, 19.24f, 28.57f, 25.41f);
            Path bezier5Path = CacheForIPhoneBtnFullScreen.bezier5Path;
            bezier5Path.reset();
            bezier5Path.moveTo(28.57f, 19.24f);
            bezier5Path.cubicTo(28.57f, 19.24f, 28.57f, 25.41f, 28.57f, 25.41f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(white);
            canvas.drawPath(bezier5Path, paint);
            canvas.restore();
            
            // Bezier 6
            RectF bezier6Rect = CacheForIPhoneBtnFullScreen.bezier6Rect;
            bezier6Rect.set(22.05f, 25.7f, 28.45f, 25.7f);
            Path bezier6Path = CacheForIPhoneBtnFullScreen.bezier6Path;
            bezier6Path.reset();
            bezier6Path.moveTo(22.05f, 25.7f);
            bezier6Path.cubicTo(22.05f, 25.7f, 28.45f, 25.7f, 28.45f, 25.7f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(white);
            canvas.drawPath(bezier6Path, paint);
            canvas.restore();
        }
    }
    
    private static class CacheForBtnFullscreen {
        private static Paint paint = new Paint();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
        private static RectF bezier4Rect = new RectF();
        private static Path bezier4Path = new Path();
        private static RectF bezier5Rect = new RectF();
        private static Path bezier5Path = new Path();
        private static RectF bezier6Rect = new RectF();
        private static Path bezier6Path = new Path();
    }
    
    
    public static void drawBtnFullscreen(Canvas canvas) {
        // General Declarations
        Paint paint = CacheForBtnFullscreen.paint;
        
        // Local Colors
        int white = Color.argb(255, 255, 255, 255);
        
        // Group 3
        {
            // Bezier
            RectF bezierRect = CacheForBtnFullscreen.bezierRect;
            bezierRect.set(12.56f, 12.15f, 22.77f, 22.33f);
            Path bezierPath = CacheForBtnFullscreen.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(22.77f, 22.33f);
            bezierPath.cubicTo(22.77f, 22.33f, 12.56f, 12.15f, 12.56f, 12.15f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2f);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(white);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
            
            // Bezier 2
            RectF bezier2Rect = CacheForBtnFullscreen.bezier2Rect;
            bezier2Rect.set(12.63f, 12.52f, 12.63f, 21.25f);
            Path bezier2Path = CacheForBtnFullscreen.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(12.63f, 21.25f);
            bezier2Path.cubicTo(12.63f, 21.25f, 12.63f, 12.52f, 12.63f, 12.52f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2f);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(white);
            canvas.drawPath(bezier2Path, paint);
            canvas.restore();
            
            // Bezier 3
            RectF bezier3Rect = CacheForBtnFullscreen.bezier3Rect;
            bezier3Rect.set(12.81f, 12.1f, 21.87f, 12.1f);
            Path bezier3Path = CacheForBtnFullscreen.bezier3Path;
            bezier3Path.reset();
            bezier3Path.moveTo(21.87f, 12.1f);
            bezier3Path.cubicTo(21.87f, 12.1f, 12.81f, 12.1f, 12.81f, 12.1f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2f);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(white);
            canvas.drawPath(bezier3Path, paint);
            canvas.restore();
            
            // Bezier 4
            RectF bezier4Rect = CacheForBtnFullscreen.bezier4Rect;
            bezier4Rect.set(26.66f, 26.69f, 35.63f, 36.66f);
            Path bezier4Path = CacheForBtnFullscreen.bezier4Path;
            bezier4Path.reset();
            bezier4Path.moveTo(26.66f, 26.69f);
            bezier4Path.cubicTo(26.66f, 26.69f, 35.63f, 36.66f, 35.63f, 36.66f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2f);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(white);
            canvas.drawPath(bezier4Path, paint);
            canvas.restore();
            
            // Bezier 5
            RectF bezier5Rect = CacheForBtnFullscreen.bezier5Rect;
            bezier5Rect.set(35.56f, 27.47f, 35.56f, 36.29f);
            Path bezier5Path = CacheForBtnFullscreen.bezier5Path;
            bezier5Path.reset();
            bezier5Path.moveTo(35.56f, 27.47f);
            bezier5Path.cubicTo(35.56f, 27.47f, 35.56f, 36.29f, 35.56f, 36.29f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2f);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(white);
            canvas.drawPath(bezier5Path, paint);
            canvas.restore();
            
            // Bezier 6
            RectF bezier6Rect = CacheForBtnFullscreen.bezier6Rect;
            bezier6Rect.set(27.17f, 36.7f, 35.4f, 36.7f);
            Path bezier6Path = CacheForBtnFullscreen.bezier6Path;
            bezier6Path.reset();
            bezier6Path.moveTo(27.17f, 36.7f);
            bezier6Path.cubicTo(27.17f, 36.7f, 35.4f, 36.7f, 35.4f, 36.7f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2f);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(white);
            canvas.drawPath(bezier6Path, paint);
            canvas.restore();
        }
    }
    
    private static class CacheForBtnFretboard {
        private static Paint paint = new Paint();
        private static RectF oval4Rect = new RectF();
        private static Path oval4Path = new Path();
        private static RectF ovalRect = new RectF();
        private static Path ovalPath = new Path();
        private static RectF oval2Rect = new RectF();
        private static Path oval2Path = new Path();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
        private static RectF rectangle2Rect = new RectF();
        private static Path rectangle2Path = new Path();
        private static RectF oval3Rect = new RectF();
        private static Path oval3Path = new Path();
        private static RectF rectangle3Rect = new RectF();
        private static Path rectangle3Path = new Path();
        private static RectF rectangle4Rect = new RectF();
        private static Path rectangle4Path = new Path();
    }
    
    
    public static void drawBtnFretboard(Canvas canvas, boolean isPressed) {
        // General Declarations
        Paint paint = CacheForBtnFretboard.paint;
        
        // Local Colors
        int fillColor11 = Color.argb(255, 23, 163, 227);
        int fillColor10 = Color.argb(255, 255, 255, 255);
        int fretIconDown = Color.argb(255, 75, 75, 75);
        int fretIconUp = Color.argb(255, 40, 40, 40);
        
        // Local Variables
        int fretIconColor = isPressed ? fretIconDown : fretIconUp;
        
        // Group
        {
            // Oval 4
            if (isPressed) {
                RectF oval4Rect = CacheForBtnFretboard.oval4Rect;
                oval4Rect.set(2.46f, 2.84f, 32.46f, 32.84f);
                Path oval4Path = CacheForBtnFretboard.oval4Path;
                oval4Path.reset();
                oval4Path.addOval(oval4Rect, Path.Direction.CW);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(fretIconColor);
                canvas.drawPath(oval4Path, paint);
            }
            
            // Oval
            RectF ovalRect = CacheForBtnFretboard.ovalRect;
            ovalRect.set(4.46f, 4.84f, 30.46f, 30.84f);
            Path ovalPath = CacheForBtnFretboard.ovalPath;
            ovalPath.reset();
            ovalPath.addOval(ovalRect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(fretIconColor);
            canvas.drawPath(ovalPath, paint);
            
            // Group 2
            {
                // Oval 2
                RectF oval2Rect = CacheForBtnFretboard.oval2Rect;
                oval2Rect.set(11.46f, 9.84f, 17.46f, 15.84f);
                Path oval2Path = CacheForBtnFretboard.oval2Path;
                oval2Path.reset();
                oval2Path.addOval(oval2Rect, Path.Direction.CW);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(fillColor11);
                canvas.drawPath(oval2Path, paint);
                
                // Rectangle
                RectF rectangleRect = CacheForBtnFretboard.rectangleRect;
                rectangleRect.set(7.46f, 12.84f, 10.46f, 13.84f);
                Path rectanglePath = CacheForBtnFretboard.rectanglePath;
                rectanglePath.reset();
                rectanglePath.moveTo(rectangleRect.left, rectangleRect.top);
                rectanglePath.lineTo(rectangleRect.right, rectangleRect.top);
                rectanglePath.lineTo(rectangleRect.right, rectangleRect.bottom);
                rectanglePath.lineTo(rectangleRect.left, rectangleRect.bottom);
                rectanglePath.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(fillColor10);
                canvas.drawPath(rectanglePath, paint);
                
                // Rectangle 2
                RectF rectangle2Rect = CacheForBtnFretboard.rectangle2Rect;
                rectangle2Rect.set(24.46f, 21.84f, 27.46f, 22.84f);
                Path rectangle2Path = CacheForBtnFretboard.rectangle2Path;
                rectangle2Path.reset();
                rectangle2Path.moveTo(rectangle2Rect.left, rectangle2Rect.top);
                rectangle2Path.lineTo(rectangle2Rect.right, rectangle2Rect.top);
                rectangle2Path.lineTo(rectangle2Rect.right, rectangle2Rect.bottom);
                rectangle2Path.lineTo(rectangle2Rect.left, rectangle2Rect.bottom);
                rectangle2Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(fillColor10);
                canvas.drawPath(rectangle2Path, paint);
                
                // Oval 3
                RectF oval3Rect = CacheForBtnFretboard.oval3Rect;
                oval3Rect.set(17.46f, 19.84f, 23.46f, 25.84f);
                Path oval3Path = CacheForBtnFretboard.oval3Path;
                oval3Path.reset();
                oval3Path.addOval(oval3Rect, Path.Direction.CW);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(fillColor11);
                canvas.drawPath(oval3Path, paint);
                
                // Rectangle 3
                RectF rectangle3Rect = CacheForBtnFretboard.rectangle3Rect;
                rectangle3Rect.set(7.46f, 21.84f, 16.46f, 22.84f);
                Path rectangle3Path = CacheForBtnFretboard.rectangle3Path;
                rectangle3Path.reset();
                rectangle3Path.moveTo(rectangle3Rect.left, rectangle3Rect.top);
                rectangle3Path.lineTo(rectangle3Rect.right, rectangle3Rect.top);
                rectangle3Path.lineTo(rectangle3Rect.right, rectangle3Rect.bottom);
                rectangle3Path.lineTo(rectangle3Rect.left, rectangle3Rect.bottom);
                rectangle3Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(fillColor10);
                canvas.drawPath(rectangle3Path, paint);
                
                // Rectangle 4
                RectF rectangle4Rect = CacheForBtnFretboard.rectangle4Rect;
                rectangle4Rect.set(18.46f, 12.84f, 27.46f, 13.84f);
                Path rectangle4Path = CacheForBtnFretboard.rectangle4Path;
                rectangle4Path.reset();
                rectangle4Path.moveTo(rectangle4Rect.left, rectangle4Rect.top);
                rectangle4Path.lineTo(rectangle4Rect.right, rectangle4Rect.top);
                rectangle4Path.lineTo(rectangle4Rect.right, rectangle4Rect.bottom);
                rectangle4Path.lineTo(rectangle4Rect.left, rectangle4Rect.bottom);
                rectangle4Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(fillColor10);
                canvas.drawPath(rectangle4Path, paint);
            }
        }
    }
    
    private static class CacheForBtnChordsAndScales {
        private static Paint paint = new Paint();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
        private static RectF bezier4Rect = new RectF();
        private static Path bezier4Path = new Path();
        private static RectF bezier5Rect = new RectF();
        private static Path bezier5Path = new Path();
        private static RectF bezier6Rect = new RectF();
        private static Path bezier6Path = new Path();
        private static RectF bezier7Rect = new RectF();
        private static Path bezier7Path = new Path();
        private static RectF bezier8Rect = new RectF();
        private static Path bezier8Path = new Path();
        private static RectF ovalRect = new RectF();
        private static Path ovalPath = new Path();
        private static RectF oval2Rect = new RectF();
        private static Path oval2Path = new Path();
        private static RectF oval3Rect = new RectF();
        private static Path oval3Path = new Path();
    }
    
    
    public static void drawBtnChordsAndScales(Canvas canvas, boolean isChordsAndScales) {
        // General Declarations
        Paint paint = CacheForBtnChordsAndScales.paint;
        
        // Local Colors
        int white = Color.argb(255, 255, 255, 255);
        int gold = Color.argb(255, 158, 136, 68);
        
        // Local Variables
        int chordsAndScalesIconColor = isChordsAndScales ? gold : white;
        
        // Group 2
        {
            // Rectangle
            RectF rectangleRect = CacheForBtnChordsAndScales.rectangleRect;
            rectangleRect.set(8.95f, 6.95f, 35.95f, 33.95f);
            Path rectanglePath = CacheForBtnChordsAndScales.rectanglePath;
            rectanglePath.reset();
            rectanglePath.addRoundRect(rectangleRect, 2f, 2f, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(chordsAndScalesIconColor);
            canvas.drawPath(rectanglePath, paint);
            canvas.restore();
            
            // Bezier 2
            RectF bezier2Rect = CacheForBtnChordsAndScales.bezier2Rect;
            bezier2Rect.set(14.7f, 7.4f, 14.7f, 33.79f);
            Path bezier2Path = CacheForBtnChordsAndScales.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(14.7f, 7.4f);
            bezier2Path.lineTo(14.7f, 33.79f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(chordsAndScalesIconColor);
            canvas.drawPath(bezier2Path, paint);
            canvas.restore();
            
            // Bezier
            RectF bezierRect = CacheForBtnChordsAndScales.bezierRect;
            bezierRect.set(20.1f, 7.4f, 20.1f, 33.79f);
            Path bezierPath = CacheForBtnChordsAndScales.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(20.1f, 7.4f);
            bezierPath.lineTo(20.1f, 33.79f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(chordsAndScalesIconColor);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
            
            // Bezier 3
            RectF bezier3Rect = CacheForBtnChordsAndScales.bezier3Rect;
            bezier3Rect.set(25.5f, 7.4f, 25.5f, 33.79f);
            Path bezier3Path = CacheForBtnChordsAndScales.bezier3Path;
            bezier3Path.reset();
            bezier3Path.moveTo(25.5f, 7.4f);
            bezier3Path.lineTo(25.5f, 33.79f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(chordsAndScalesIconColor);
            canvas.drawPath(bezier3Path, paint);
            canvas.restore();
            
            // Bezier 4
            RectF bezier4Rect = CacheForBtnChordsAndScales.bezier4Rect;
            bezier4Rect.set(30.9f, 7.4f, 30.9f, 33.79f);
            Path bezier4Path = CacheForBtnChordsAndScales.bezier4Path;
            bezier4Path.reset();
            bezier4Path.moveTo(30.9f, 7.4f);
            bezier4Path.lineTo(30.9f, 33.79f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(chordsAndScalesIconColor);
            canvas.drawPath(bezier4Path, paint);
            canvas.restore();
            
            // Bezier 5
            RectF bezier5Rect = CacheForBtnChordsAndScales.bezier5Rect;
            bezier5Rect.set(9.36f, 11.76f, 35.62f, 11.76f);
            Path bezier5Path = CacheForBtnChordsAndScales.bezier5Path;
            bezier5Path.reset();
            bezier5Path.moveTo(9.36f, 11.76f);
            bezier5Path.lineTo(35.62f, 11.76f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(chordsAndScalesIconColor);
            canvas.drawPath(bezier5Path, paint);
            canvas.restore();
            
            // Bezier 6
            RectF bezier6Rect = CacheForBtnChordsAndScales.bezier6Rect;
            bezier6Rect.set(9.36f, 17.16f, 35.62f, 17.16f);
            Path bezier6Path = CacheForBtnChordsAndScales.bezier6Path;
            bezier6Path.reset();
            bezier6Path.moveTo(9.36f, 17.16f);
            bezier6Path.lineTo(35.62f, 17.16f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(chordsAndScalesIconColor);
            canvas.drawPath(bezier6Path, paint);
            canvas.restore();
            
            // Bezier 7
            RectF bezier7Rect = CacheForBtnChordsAndScales.bezier7Rect;
            bezier7Rect.set(9.36f, 23.46f, 35.62f, 23.46f);
            Path bezier7Path = CacheForBtnChordsAndScales.bezier7Path;
            bezier7Path.reset();
            bezier7Path.moveTo(9.36f, 23.46f);
            bezier7Path.lineTo(35.62f, 23.46f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(chordsAndScalesIconColor);
            canvas.drawPath(bezier7Path, paint);
            canvas.restore();
            
            // Bezier 8
            RectF bezier8Rect = CacheForBtnChordsAndScales.bezier8Rect;
            bezier8Rect.set(9.36f, 28.86f, 35.62f, 28.86f);
            Path bezier8Path = CacheForBtnChordsAndScales.bezier8Path;
            bezier8Path.reset();
            bezier8Path.moveTo(9.36f, 28.86f);
            bezier8Path.lineTo(35.62f, 28.86f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(chordsAndScalesIconColor);
            canvas.drawPath(bezier8Path, paint);
            canvas.restore();
            
            // Oval
            RectF ovalRect = CacheForBtnChordsAndScales.ovalRect;
            ovalRect.set(13.06f, 18.5f, 16.56f, 22f);
            Path ovalPath = CacheForBtnChordsAndScales.ovalPath;
            ovalPath.reset();
            ovalPath.addOval(ovalRect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(chordsAndScalesIconColor);
            canvas.drawPath(ovalPath, paint);
            
            // Oval 2
            RectF oval2Rect = CacheForBtnChordsAndScales.oval2Rect;
            oval2Rect.set(18.5f, 12.38f, 22f, 15.88f);
            Path oval2Path = CacheForBtnChordsAndScales.oval2Path;
            oval2Path.reset();
            oval2Path.addOval(oval2Rect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(chordsAndScalesIconColor);
            canvas.drawPath(oval2Path, paint);
            
            // Oval 3
            RectF oval3Rect = CacheForBtnChordsAndScales.oval3Rect;
            oval3Rect.set(29.06f, 7.44f, 32.56f, 10.94f);
            Path oval3Path = CacheForBtnChordsAndScales.oval3Path;
            oval3Path.reset();
            oval3Path.addOval(oval3Rect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(chordsAndScalesIconColor);
            canvas.drawPath(oval3Path, paint);
        }
    }
    
    private static class CacheForBtnStepNextCS {
        private static Paint paint = new Paint();
        private static RectF ovalRect = new RectF();
        private static Path ovalPath = new Path();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    
    public static void drawBtnStepNextCS(Canvas canvas, boolean isPressed) {
        // General Declarations
        Paint paint = CacheForBtnStepNextCS.paint;
        
        // Local Colors
        int downColor = Color.argb(255, 63, 113, 129);
        int upColor = Color.argb(255, 76, 142, 162);
        
        // Local Variables
        int btnColor = isPressed ? downColor : upColor;
        
        // Group
        {
            // Oval
            RectF ovalRect = CacheForBtnStepNextCS.ovalRect;
            ovalRect.set(1.58f, 0.35f, 34.58f, 33.35f);
            Path ovalPath = CacheForBtnStepNextCS.ovalPath;
            ovalPath.reset();
            ovalPath.addOval(ovalRect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(btnColor);
            canvas.drawPath(ovalPath, paint);
            
            // Bezier
            RectF bezierRect = CacheForBtnStepNextCS.bezierRect;
            bezierRect.set(14.74f, 7.87f, 25.74f, 25.47f);
            Path bezierPath = CacheForBtnStepNextCS.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(25.6f, 16.35f);
            bezierPath.lineTo(15.33f, 7.95f);
            bezierPath.cubicTo(15.22f, 7.85f, 15.07f, 7.84f, 14.95f, 7.91f);
            bezierPath.cubicTo(14.82f, 7.97f, 14.74f, 8.11f, 14.74f, 8.26f);
            bezierPath.lineTo(14.74f, 25.06f);
            bezierPath.cubicTo(14.74f, 25.22f, 14.82f, 25.36f, 14.95f, 25.42f);
            bezierPath.cubicTo(15.07f, 25.49f, 15.22f, 25.48f, 15.33f, 25.39f);
            bezierPath.lineTo(25.6f, 16.99f);
            bezierPath.cubicTo(25.69f, 16.91f, 25.74f, 16.79f, 25.74f, 16.66f);
            bezierPath.cubicTo(25.74f, 16.54f, 25.69f, 16.42f, 25.6f, 16.35f);
            bezierPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            bezierPath.setFillType(Path.FillType.EVEN_ODD);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(GuitarTunesStyleKit.playbackBackground);
            canvas.drawPath(bezierPath, paint);
        }
    }
    
    private static class CacheForBtnStepPrevCS {
        private static Paint paint = new Paint();
        private static RectF oval2Rect = new RectF();
        private static Path oval2Path = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
    }
    
    
    public static void drawBtnStepPrevCS(Canvas canvas, boolean isPressed) {
        // General Declarations
        Paint paint = CacheForBtnStepPrevCS.paint;
        
        // Local Colors
        int downColor = Color.argb(255, 63, 113, 129);
        int upColor = Color.argb(255, 76, 142, 162);
        
        // Local Variables
        int btnColor = isPressed ? downColor : upColor;
        
        // Group
        {
            // Oval 2
            RectF oval2Rect = CacheForBtnStepPrevCS.oval2Rect;
            oval2Rect.set(1.34f, 0.35f, 34.34f, 33.35f);
            Path oval2Path = CacheForBtnStepPrevCS.oval2Path;
            oval2Path.reset();
            oval2Path.addOval(oval2Rect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(btnColor);
            canvas.drawPath(oval2Path, paint);
            
            // Bezier 2
            RectF bezier2Rect = CacheForBtnStepPrevCS.bezier2Rect;
            bezier2Rect.set(10.28f, 8.29f, 21.28f, 25.89f);
            Path bezier2Path = CacheForBtnStepPrevCS.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(10.43f, 16.77f);
            bezier2Path.lineTo(20.69f, 8.37f);
            bezier2Path.cubicTo(20.81f, 8.27f, 20.95f, 8.26f, 21.08f, 8.33f);
            bezier2Path.cubicTo(21.2f, 8.4f, 21.28f, 8.53f, 21.28f, 8.68f);
            bezier2Path.lineTo(21.28f, 25.49f);
            bezier2Path.cubicTo(21.28f, 25.64f, 21.2f, 25.78f, 21.08f, 25.84f);
            bezier2Path.cubicTo(20.95f, 25.91f, 20.81f, 25.9f, 20.69f, 25.81f);
            bezier2Path.lineTo(10.43f, 17.41f);
            bezier2Path.cubicTo(10.34f, 17.33f, 10.28f, 17.21f, 10.28f, 17.09f);
            bezier2Path.cubicTo(10.28f, 16.96f, 10.34f, 16.84f, 10.43f, 16.77f);
            bezier2Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            bezier2Path.setFillType(Path.FillType.EVEN_ODD);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(GuitarTunesStyleKit.playbackBackground);
            canvas.drawPath(bezier2Path, paint);
        }
    }
    
    private static class CacheForJambarBG {
        private static Paint paint = new Paint();
        private static PaintCodeGradient jambarGradient = null;
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
        private static float[] rectangleCornerRadii = new float[8];
        private static RectF rectanglePathBounds = new RectF();
        private static PaintCodeLinearGradient rectanglePathGradient = new PaintCodeLinearGradient();
    }
    
    
    public static void drawJambarBG(Canvas canvas, RectF frame) {
        // General Declarations
        Paint paint = CacheForJambarBG.paint;
        
        // Local Colors
        int jambarGradientColor3 = Color.argb(255, 224, 233, 239);
        int jambarGradientColor5 = Color.argb(255, 230, 239, 243);
        int jambarGradientColor2 = Color.argb(255, 198, 219, 226);
        int jambarGradientColor4 = Color.argb(255, 233, 242, 246);
        int jambarGradientColor = Color.argb(255, 126, 178, 191);
        
        // Local Gradients
        if (CacheForJambarBG.jambarGradient == null)
            CacheForJambarBG.jambarGradient = new PaintCodeGradient(new int[]{jambarGradientColor, jambarGradientColor2, jambarGradientColor3, jambarGradientColor5, jambarGradientColor4}, new float[]{0f, 0.36f, 0.5f, 0.77f, 1f});
        PaintCodeGradient jambarGradient = CacheForJambarBG.jambarGradient;
        
        // Rectangle
        RectF rectangleRect = CacheForJambarBG.rectangleRect;
        rectangleRect.set(frame.left + 9f,
            frame.top + 1.09f,
            frame.left + 9f + (float) Math.floor((frame.width() - 9f) * 0.98851f + 0.5f),
            frame.top + 1.09f + (float) Math.floor((frame.height() - 1.09f) * 0.99876f - 0.26f) + 0.76f);
        Path rectanglePath = CacheForJambarBG.rectanglePath;
        rectanglePath.reset();
        float rectangleCornerRadius = Math.min(Math.min(rectangleRect.width(), rectangleRect.height()) / 2f, 6f);
        float[] rectangleCornerRadii = CacheForJambarBG.rectangleCornerRadii;
        rectangleCornerRadii[0] = rectangleCornerRadii[1] = rectangleCornerRadius;
        rectangleCornerRadii[2] = rectangleCornerRadii[3] = rectangleCornerRadius;
        rectangleCornerRadii[4] = rectangleCornerRadii[5] = 0f;
        rectangleCornerRadii[6] = rectangleCornerRadii[7] = 0f;
        rectanglePath.addRoundRect(rectangleRect, rectangleCornerRadii, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        RectF rectanglePathBounds = CacheForJambarBG.rectanglePathBounds;
        rectanglePath.computeBounds(rectanglePathBounds, true);
        paint.setStyle(Paint.Style.FILL);
        paint.setShader(CacheForJambarBG.rectanglePathGradient.get(jambarGradient, rectanglePathBounds.left, rectanglePathBounds.bottom, rectanglePathBounds.left, rectanglePathBounds.top));
        canvas.drawPath(rectanglePath, paint);
    }
    
    private static class CacheForJambarBGIphone {
        private static Paint paint = new Paint();
        private static PaintCodeGradient jambarGradient = null;
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
        private static RectF rectanglePathBounds = new RectF();
        private static PaintCodeLinearGradient rectanglePathGradient = new PaintCodeLinearGradient();
    }
    
    
    public static void drawJambarBGIphone(Canvas canvas, RectF frame) {
        // General Declarations
        Paint paint = CacheForJambarBGIphone.paint;
        
        // Local Colors
        int jambarGradientColor3 = Color.argb(255, 224, 233, 239);
        int jambarGradientColor5 = Color.argb(255, 230, 239, 243);
        int jambarGradientColor2 = Color.argb(255, 198, 219, 226);
        int jambarGradientColor4 = Color.argb(255, 233, 242, 246);
        int jambarGradientColor = Color.argb(255, 126, 178, 191);
        
        // Local Gradients
        if (CacheForJambarBGIphone.jambarGradient == null)
            CacheForJambarBGIphone.jambarGradient = new PaintCodeGradient(new int[]{jambarGradientColor, jambarGradientColor2, jambarGradientColor3, jambarGradientColor5, jambarGradientColor4}, new float[]{0f, 0.36f, 0.5f, 0.77f, 1f});
        PaintCodeGradient jambarGradient = CacheForJambarBGIphone.jambarGradient;
        
        // Rectangle
        RectF rectangleRect = CacheForJambarBGIphone.rectangleRect;
        rectangleRect.set(frame.left,
            frame.top,
            frame.left + (float) Math.floor(frame.width() + 0.5f),
            frame.top + (float) Math.floor(frame.height() + 0.5f));
        Path rectanglePath = CacheForJambarBGIphone.rectanglePath;
        rectanglePath.reset();
        rectanglePath.moveTo(rectangleRect.left, rectangleRect.top);
        rectanglePath.lineTo(rectangleRect.right, rectangleRect.top);
        rectanglePath.lineTo(rectangleRect.right, rectangleRect.bottom);
        rectanglePath.lineTo(rectangleRect.left, rectangleRect.bottom);
        rectanglePath.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        RectF rectanglePathBounds = CacheForJambarBGIphone.rectanglePathBounds;
        rectanglePath.computeBounds(rectanglePathBounds, true);
        paint.setStyle(Paint.Style.FILL);
        paint.setShader(CacheForJambarBGIphone.rectanglePathGradient.get(jambarGradient, rectanglePathBounds.left, rectanglePathBounds.bottom, rectanglePathBounds.left, rectanglePathBounds.top));
        canvas.drawPath(rectanglePath, paint);
    }
    
    private static class CacheForJambarLens {
        private static Paint paint = new Paint();
        private static PaintCodeGradient jambarLensGradient = null;
        private static RectF group = new RectF();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
        private static RectF rectanglePathBounds = new RectF();
        private static PaintCodeLinearGradient rectanglePathGradient = new PaintCodeLinearGradient();
        private static RectF bottomRect = new RectF();
        private static Path bottomPath = new Path();
        private static RectF topRect = new RectF();
        private static Path topPath = new Path();
    }
    
    
    public static void drawJambarLens(Canvas canvas, RectF frame) {
        // General Declarations
        Paint paint = CacheForJambarLens.paint;
        
        // Local Colors
        int jambarLensEdge = Color.argb(26, 255, 255, 255);
        int jambarLensMiddle = Color.argb(64, 195, 195, 195);
        int white = Color.argb(255, 255, 255, 255);
        int jambarLensInner = Color.argb(26, 195, 195, 195);
        int jambarLensOuter = Color.argb(0, 255, 255, 255);
        int color7 = Color.argb(51, 146, 146, 146);
        
        // Local Gradients
        if (CacheForJambarLens.jambarLensGradient == null)
            CacheForJambarLens.jambarLensGradient = new PaintCodeGradient(new int[]{jambarLensEdge, jambarLensOuter, jambarLensOuter, jambarLensInner, jambarLensMiddle, jambarLensInner, jambarLensOuter, jambarLensOuter, jambarLensEdge}, new float[]{0f, 0.1f, 0.2f, 0.32f, 0.48f, 0.63f, 0.76f, 0.86f, 1f});
        PaintCodeGradient jambarLensGradient = CacheForJambarLens.jambarLensGradient;
        
        // Group
        {
            RectF group = CacheForJambarLens.group;
            group.set(frame.left + (float) Math.floor(frame.width() * 0.00006f + 0.5f) + 0f,
                frame.top + (float) Math.floor(frame.height() * 0.00451f + 0.39f) + 0.11f,
                frame.left + (float) Math.floor(frame.width() * 1.00006f + 0.5f) + 0f,
                frame.top + (float) Math.floor(frame.height() * 1.00451f + 0.39f) + 0.11f);
            
            // Rectangle
            RectF rectangleRect = CacheForJambarLens.rectangleRect;
            rectangleRect.set(group.left,
                group.top,
                group.left + (float) Math.floor(group.width() + 0.5f),
                group.top + (float) Math.floor(group.height() + 0.5f));
            Path rectanglePath = CacheForJambarLens.rectanglePath;
            rectanglePath.reset();
            rectanglePath.moveTo(rectangleRect.left, rectangleRect.top);
            rectanglePath.lineTo(rectangleRect.right, rectangleRect.top);
            rectanglePath.lineTo(rectangleRect.right, rectangleRect.bottom);
            rectanglePath.lineTo(rectangleRect.left, rectangleRect.bottom);
            rectanglePath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            RectF rectanglePathBounds = CacheForJambarLens.rectanglePathBounds;
            rectanglePath.computeBounds(rectanglePathBounds, true);
            paint.setStyle(Paint.Style.FILL);
            paint.setShader(CacheForJambarLens.rectanglePathGradient.get(jambarLensGradient, rectanglePathBounds.right, rectanglePathBounds.top, rectanglePathBounds.left, rectanglePathBounds.top));
            canvas.drawPath(rectanglePath, paint);
            
            // bottom
            RectF bottomRect = CacheForJambarLens.bottomRect;
            bottomRect.set(group.left,
                group.top + (float) Math.floor(group.height() * 0.97549f + 0.11f) + 0.39f,
                group.left + (float) Math.floor(group.width() + 0.5f),
                group.top + (float) Math.floor(group.height() * 0.97553f + 0.11f) + 0.39f);
            Path bottomPath = CacheForJambarLens.bottomPath;
            bottomPath.reset();
            bottomPath.moveTo(group.left, group.top + group.height() * 0.97553f);
            bottomPath.cubicTo(group.left + group.width() * 0.73502f, group.top + group.height() * 0.97553f, group.left + group.width(), group.top + group.height() * 0.97553f, group.left + group.width(), group.top + group.height() * 0.97553f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(color7);
            canvas.drawPath(bottomPath, paint);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(white);
            canvas.drawPath(bottomPath, paint);
            canvas.restore();
            
            // top
            RectF topRect = CacheForJambarLens.topRect;
            topRect.set(group.left,
                group.top + (float) Math.floor(group.height() * 0.01549f + 0.11f) + 0.39f,
                group.left + (float) Math.floor(group.width() + 0.5f),
                group.top + (float) Math.floor(group.height() * 0.01553f + 0.11f) + 0.39f);
            Path topPath = CacheForJambarLens.topPath;
            topPath.reset();
            topPath.moveTo(group.left, group.top + group.height() * 0.01553f);
            topPath.cubicTo(group.left + group.width() * 0.73502f, group.top + group.height() * 0.01553f, group.left + group.width(), group.top + group.height() * 0.01553f, group.left + group.width(), group.top + group.height() * 0.01553f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(color7);
            canvas.drawPath(topPath, paint);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(white);
            canvas.drawPath(topPath, paint);
            canvas.restore();
        }
    }
    
    private static class CacheForJambarLensWide {
        private static Paint paint = new Paint();
        private static PaintCodeGradient jambarLensGradientWide = null;
        private static RectF group = new RectF();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
        private static RectF rectanglePathBounds = new RectF();
        private static PaintCodeLinearGradient rectanglePathGradient = new PaintCodeLinearGradient();
        private static RectF bottomRect = new RectF();
        private static Path bottomPath = new Path();
        private static RectF topRect = new RectF();
        private static Path topPath = new Path();
    }
    
    
    public static void drawJambarLensWide(Canvas canvas, RectF frame) {
        // General Declarations
        Paint paint = CacheForJambarLensWide.paint;
        
        // Local Colors
        int jambarLensEdge = Color.argb(26, 255, 255, 255);
        int jambarLensMiddle = Color.argb(64, 195, 195, 195);
        int white = Color.argb(255, 255, 255, 255);
        int jambarLensInner = Color.argb(26, 195, 195, 195);
        int jambarLensOuter = Color.argb(0, 255, 255, 255);
        int color7 = Color.argb(51, 146, 146, 146);
        
        // Local Gradients
        if (CacheForJambarLensWide.jambarLensGradientWide == null)
            CacheForJambarLensWide.jambarLensGradientWide = new PaintCodeGradient(new int[]{jambarLensEdge, jambarLensOuter, jambarLensOuter, jambarLensInner, jambarLensMiddle, jambarLensInner, jambarLensOuter, jambarLensOuter, jambarLensEdge}, new float[]{0f, 0.05f, 0.14f, 0.25f, 0.48f, 0.75f, 0.86f, 0.95f, 1f});
        PaintCodeGradient jambarLensGradientWide = CacheForJambarLensWide.jambarLensGradientWide;
        
        // Group
        {
            RectF group = CacheForJambarLensWide.group;
            group.set(frame.left + (float) Math.floor(frame.width() * -0.00455f - 0.27f) + 0.77f,
                frame.top + (float) Math.floor(frame.height() * 0.02122f - 0.03f) + 0.53f,
                frame.left + (float) Math.floor(frame.width() * 0.99545f - 0.27f) + 0.77f,
                frame.top + (float) Math.floor(frame.height() * 1.02122f - 0.03f) + 0.53f);
            
            // Rectangle
            RectF rectangleRect = CacheForJambarLensWide.rectangleRect;
            rectangleRect.set(group.left,
                group.top,
                group.left + (float) Math.floor(group.width() + 0.5f),
                group.top + (float) Math.floor(group.height() + 0.5f));
            Path rectanglePath = CacheForJambarLensWide.rectanglePath;
            rectanglePath.reset();
            rectanglePath.moveTo(rectangleRect.left, rectangleRect.top);
            rectanglePath.lineTo(rectangleRect.right, rectangleRect.top);
            rectanglePath.lineTo(rectangleRect.right, rectangleRect.bottom);
            rectanglePath.lineTo(rectangleRect.left, rectangleRect.bottom);
            rectanglePath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            RectF rectanglePathBounds = CacheForJambarLensWide.rectanglePathBounds;
            rectanglePath.computeBounds(rectanglePathBounds, true);
            paint.setStyle(Paint.Style.FILL);
            paint.setShader(CacheForJambarLensWide.rectanglePathGradient.get(jambarLensGradientWide, rectanglePathBounds.right, rectanglePathBounds.top, rectanglePathBounds.left, rectanglePathBounds.top));
            canvas.drawPath(rectanglePath, paint);
            
            // bottom
            RectF bottomRect = CacheForJambarLensWide.bottomRect;
            bottomRect.set(group.left,
                group.top + (float) Math.floor(group.height() * 0.97549f + 0.11f) + 0.39f,
                group.left + (float) Math.floor(group.width() + 0.5f),
                group.top + (float) Math.floor(group.height() * 0.97553f + 0.11f) + 0.39f);
            Path bottomPath = CacheForJambarLensWide.bottomPath;
            bottomPath.reset();
            bottomPath.moveTo(group.left, group.top + group.height() * 0.97553f);
            bottomPath.cubicTo(group.left + group.width() * 0.73502f, group.top + group.height() * 0.97553f, group.left + group.width(), group.top + group.height() * 0.97553f, group.left + group.width(), group.top + group.height() * 0.97553f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(color7);
            canvas.drawPath(bottomPath, paint);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(white);
            canvas.drawPath(bottomPath, paint);
            canvas.restore();
            
            // top
            RectF topRect = CacheForJambarLensWide.topRect;
            topRect.set(group.left,
                group.top + (float) Math.floor(group.height() * 0.01549f + 0.11f) + 0.39f,
                group.left + (float) Math.floor(group.width() + 0.5f),
                group.top + (float) Math.floor(group.height() * 0.01553f + 0.11f) + 0.39f);
            Path topPath = CacheForJambarLensWide.topPath;
            topPath.reset();
            topPath.moveTo(group.left, group.top + group.height() * 0.01553f);
            topPath.cubicTo(group.left + group.width() * 0.73502f, group.top + group.height() * 0.01553f, group.left + group.width(), group.top + group.height() * 0.01553f, group.left + group.width(), group.top + group.height() * 0.01553f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(color7);
            canvas.drawPath(topPath, paint);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(white);
            canvas.drawPath(topPath, paint);
            canvas.restore();
        }
    }
    
    private static class CacheForBtnWindowed {
        private static Paint paint = new Paint();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
        private static RectF bezier4Rect = new RectF();
        private static Path bezier4Path = new Path();
        private static RectF bezier5Rect = new RectF();
        private static Path bezier5Path = new Path();
        private static RectF bezier6Rect = new RectF();
        private static Path bezier6Path = new Path();
    }
    
    
    public static void drawBtnWindowed(Canvas canvas) {
        // General Declarations
        Paint paint = CacheForBtnWindowed.paint;
        
        // Local Colors
        int white = Color.argb(255, 255, 255, 255);
        
        // Group 3
        {
            // Group
            {
                // Bezier
                RectF bezierRect = CacheForBtnWindowed.bezierRect;
                bezierRect.set(26.74f, 28.03f, 36.94f, 37.48f);
                Path bezierPath = CacheForBtnWindowed.bezierPath;
                bezierPath.reset();
                bezierPath.moveTo(36.94f, 37.48f);
                bezierPath.cubicTo(36.94f, 37.48f, 26.74f, 28.03f, 26.74f, 28.03f);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(2f);
                paint.setStrokeCap(Paint.Cap.ROUND);
                paint.setStrokeMiter(10f);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(white);
                canvas.drawPath(bezierPath, paint);
                canvas.restore();
                
                // Bezier 2
                RectF bezier2Rect = CacheForBtnWindowed.bezier2Rect;
                bezier2Rect.set(26.82f, 28.4f, 26.82f, 37.14f);
                Path bezier2Path = CacheForBtnWindowed.bezier2Path;
                bezier2Path.reset();
                bezier2Path.moveTo(26.82f, 37.14f);
                bezier2Path.cubicTo(26.82f, 37.14f, 26.82f, 28.4f, 26.82f, 28.4f);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(2f);
                paint.setStrokeCap(Paint.Cap.ROUND);
                paint.setStrokeMiter(10f);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(white);
                canvas.drawPath(bezier2Path, paint);
                canvas.restore();
                
                // Bezier 3
                RectF bezier3Rect = CacheForBtnWindowed.bezier3Rect;
                bezier3Rect.set(26.99f, 27.99f, 36.05f, 27.99f);
                Path bezier3Path = CacheForBtnWindowed.bezier3Path;
                bezier3Path.reset();
                bezier3Path.moveTo(36.05f, 27.99f);
                bezier3Path.cubicTo(36.05f, 27.99f, 26.99f, 27.99f, 26.99f, 27.99f);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(2f);
                paint.setStrokeCap(Paint.Cap.ROUND);
                paint.setStrokeMiter(10f);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(white);
                canvas.drawPath(bezier3Path, paint);
                canvas.restore();
            }
            
            // Group 2
            {
                // Bezier 4
                RectF bezier4Rect = CacheForBtnWindowed.bezier4Rect;
                bezier4Rect.set(13.24f, 13.34f, 22.47f, 22.61f);
                Path bezier4Path = CacheForBtnWindowed.bezier4Path;
                bezier4Path.reset();
                bezier4Path.moveTo(13.24f, 13.34f);
                bezier4Path.cubicTo(13.24f, 13.34f, 22.47f, 22.61f, 22.47f, 22.61f);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(2f);
                paint.setStrokeCap(Paint.Cap.ROUND);
                paint.setStrokeMiter(10f);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(white);
                canvas.drawPath(bezier4Path, paint);
                canvas.restore();
                
                // Bezier 5
                RectF bezier5Rect = CacheForBtnWindowed.bezier5Rect;
                bezier5Rect.set(22.4f, 13.42f, 22.4f, 22.24f);
                Path bezier5Path = CacheForBtnWindowed.bezier5Path;
                bezier5Path.reset();
                bezier5Path.moveTo(22.4f, 13.42f);
                bezier5Path.cubicTo(22.4f, 13.42f, 22.4f, 22.24f, 22.4f, 22.24f);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(2f);
                paint.setStrokeCap(Paint.Cap.ROUND);
                paint.setStrokeMiter(10f);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(white);
                canvas.drawPath(bezier5Path, paint);
                canvas.restore();
                
                // Bezier 6
                RectF bezier6Rect = CacheForBtnWindowed.bezier6Rect;
                bezier6Rect.set(14.01f, 22.65f, 22.24f, 22.65f);
                Path bezier6Path = CacheForBtnWindowed.bezier6Path;
                bezier6Path.reset();
                bezier6Path.moveTo(14.01f, 22.65f);
                bezier6Path.cubicTo(14.01f, 22.65f, 22.24f, 22.65f, 22.24f, 22.65f);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(2f);
                paint.setStrokeCap(Paint.Cap.ROUND);
                paint.setStrokeMiter(10f);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(white);
                canvas.drawPath(bezier6Path, paint);
                canvas.restore();
            }
        }
    }
    
    private static class CacheForBtnMailSignup {
        private static Paint paint = new Paint();
        private static RectF bezier4Rect = new RectF();
        private static Path bezier4Path = new Path();
        private static RectF bezier5Rect = new RectF();
        private static Path bezier5Path = new Path();
        private static RectF bezier6Rect = new RectF();
        private static Path bezier6Path = new Path();
        private static RectF bezier7Rect = new RectF();
        private static Path bezier7Path = new Path();
        private static RectF bezier8Rect = new RectF();
        private static Path bezier8Path = new Path();
    }
    
    
    public static void drawBtnMailSignup(Canvas canvas, boolean isPressed) {
        // General Declarations
        Paint paint = CacheForBtnMailSignup.paint;
        
        // Local Colors
        int downControls = Color.argb(255, 132, 132, 132);
        int upControls = Color.argb(255, 0, 0, 0);
        
        // Local Variables
        int btnDarkColor = isPressed ? downControls : upControls;
        
        // Group 3
        {
            // Bezier 4
            RectF bezier4Rect = CacheForBtnMailSignup.bezier4Rect;
            bezier4Rect.set(24.09f, 22.46f, 37f, 35.66f);
            Path bezier4Path = CacheForBtnMailSignup.bezier4Path;
            bezier4Path.reset();
            bezier4Path.moveTo(28.2f, 34.46f);
            bezier4Path.lineTo(24.09f, 35.66f);
            bezier4Path.lineTo(25.26f, 31.46f);
            bezier4Path.lineTo(34.07f, 22.46f);
            bezier4Path.lineTo(37f, 25.46f);
            bezier4Path.lineTo(28.2f, 34.46f);
            bezier4Path.lineTo(28.2f, 34.46f);
            bezier4Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnDarkColor);
            canvas.drawPath(bezier4Path, paint);
            canvas.restore();
            
            // Bezier 5
            RectF bezier5Rect = CacheForBtnMailSignup.bezier5Rect;
            bezier5Rect.set(31.72f, 24.86f, 34.66f, 27.86f);
            Path bezier5Path = CacheForBtnMailSignup.bezier5Path;
            bezier5Path.reset();
            bezier5Path.moveTo(31.72f, 24.86f);
            bezier5Path.lineTo(34.66f, 27.86f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnDarkColor);
            canvas.drawPath(bezier5Path, paint);
            canvas.restore();
            
            // Bezier 6
            RectF bezier6Rect = CacheForBtnMailSignup.bezier6Rect;
            bezier6Rect.set(25.26f, 31.46f, 28.2f, 34.46f);
            Path bezier6Path = CacheForBtnMailSignup.bezier6Path;
            bezier6Path.reset();
            bezier6Path.moveTo(25.26f, 31.46f);
            bezier6Path.lineTo(28.2f, 34.46f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnDarkColor);
            canvas.drawPath(bezier6Path, paint);
            canvas.restore();
            
            // Bezier 7
            RectF bezier7Rect = CacheForBtnMailSignup.bezier7Rect;
            bezier7Rect.set(10f, 11.66f, 34.66f, 28.46f);
            Path bezier7Path = CacheForBtnMailSignup.bezier7Path;
            bezier7Path.reset();
            bezier7Path.moveTo(22.33f, 28.46f);
            bezier7Path.lineTo(11.76f, 28.46f);
            bezier7Path.cubicTo(10.79f, 28.46f, 10f, 27.66f, 10f, 26.66f);
            bezier7Path.lineTo(10f, 13.46f);
            bezier7Path.cubicTo(10f, 12.47f, 10.79f, 11.66f, 11.76f, 11.66f);
            bezier7Path.lineTo(32.89f, 11.66f);
            bezier7Path.cubicTo(33.87f, 11.66f, 34.66f, 12.47f, 34.66f, 13.46f);
            bezier7Path.lineTo(34.66f, 20.06f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnDarkColor);
            canvas.drawPath(bezier7Path, paint);
            canvas.restore();
            
            // Bezier 8
            RectF bezier8Rect = CacheForBtnMailSignup.bezier8Rect;
            bezier8Rect.set(10.59f, 12.26f, 34.07f, 21.86f);
            Path bezier8Path = CacheForBtnMailSignup.bezier8Path;
            bezier8Path.reset();
            bezier8Path.moveTo(34.07f, 12.26f);
            bezier8Path.lineTo(22.33f, 21.86f);
            bezier8Path.lineTo(10.59f, 12.26f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(btnDarkColor);
            canvas.drawPath(bezier8Path, paint);
            canvas.restore();
        }
    }
    
    private static class CacheForBtnHome {
        private static Paint paint = new Paint();
        private static RectF bezier4Rect = new RectF();
        private static Path bezier4Path = new Path();
        private static RectF bezier5Rect = new RectF();
        private static Path bezier5Path = new Path();
        private static RectF bezier6Rect = new RectF();
        private static Path bezier6Path = new Path();
    }
    
    
    public static void drawBtnHome(Canvas canvas, boolean isHome) {
        // General Declarations
        Paint paint = CacheForBtnHome.paint;
        
        // Local Colors
        int white = Color.argb(255, 255, 255, 255);
        int gold = Color.argb(255, 158, 136, 68);
        
        // Local Variables
        int btnHomeColor = isHome ? gold : white;
        
        // Group 2
        {
            // Bezier 4
            RectF bezier4Rect = CacheForBtnHome.bezier4Rect;
            bezier4Rect.set(11.43f, 21.45f, 33.18f, 35.42f);
            Path bezier4Path = CacheForBtnHome.bezier4Path;
            bezier4Path.reset();
            bezier4Path.moveTo(11.43f, 35.42f);
            bezier4Path.cubicTo(11.43f, 31.05f, 11.43f, 26.68f, 11.43f, 22.32f);
            bezier4Path.cubicTo(11.43f, 22.21f, 11.43f, 22.1f, 11.44f, 21.99f);
            bezier4Path.cubicTo(11.49f, 21.67f, 11.76f, 21.43f, 12.06f, 21.45f);
            bezier4Path.cubicTo(12.37f, 21.46f, 12.6f, 21.71f, 12.62f, 22.04f);
            bezier4Path.cubicTo(12.63f, 22.15f, 12.63f, 22.26f, 12.63f, 22.37f);
            bezier4Path.cubicTo(12.63f, 26.18f, 12.63f, 29.99f, 12.62f, 33.8f);
            bezier4Path.cubicTo(12.62f, 34.09f, 12.69f, 34.17f, 12.96f, 34.16f);
            bezier4Path.cubicTo(14.77f, 34.15f, 16.57f, 34.16f, 18.37f, 34.16f);
            bezier4Path.cubicTo(18.46f, 34.16f, 18.56f, 34.15f, 18.68f, 34.14f);
            bezier4Path.cubicTo(18.68f, 31.39f, 18.68f, 28.66f, 18.68f, 25.91f);
            bezier4Path.cubicTo(21.1f, 25.91f, 23.49f, 25.91f, 25.92f, 25.91f);
            bezier4Path.cubicTo(25.92f, 28.65f, 25.92f, 31.38f, 25.92f, 34.16f);
            bezier4Path.cubicTo(26.05f, 34.16f, 26.15f, 34.16f, 26.25f, 34.16f);
            bezier4Path.cubicTo(28.05f, 34.16f, 29.85f, 34.15f, 31.66f, 34.16f);
            bezier4Path.cubicTo(31.91f, 34.17f, 31.99f, 34.1f, 31.99f, 33.82f);
            bezier4Path.cubicTo(31.98f, 30.21f, 31.98f, 26.59f, 31.98f, 22.98f);
            bezier4Path.cubicTo(31.98f, 22.88f, 31.98f, 22.78f, 31.99f, 22.68f);
            bezier4Path.cubicTo(32.01f, 22.35f, 32.24f, 22.1f, 32.54f, 22.08f);
            bezier4Path.cubicTo(32.85f, 22.07f, 33.13f, 22.31f, 33.17f, 22.64f);
            bezier4Path.cubicTo(33.18f, 22.75f, 33.17f, 22.86f, 33.17f, 22.97f);
            bezier4Path.cubicTo(33.18f, 27.12f, 33.18f, 31.27f, 33.18f, 35.42f);
            bezier4Path.cubicTo(30.37f, 35.42f, 27.55f, 35.42f, 24.74f, 35.42f);
            bezier4Path.cubicTo(24.74f, 35.29f, 24.73f, 35.16f, 24.73f, 35.03f);
            bezier4Path.cubicTo(24.73f, 32.51f, 24.73f, 29.99f, 24.74f, 27.48f);
            bezier4Path.cubicTo(24.74f, 27.22f, 24.68f, 27.14f, 24.43f, 27.14f);
            bezier4Path.cubicTo(23.04f, 27.15f, 21.65f, 27.15f, 20.27f, 27.15f);
            bezier4Path.cubicTo(19.88f, 27.15f, 19.88f, 27.15f, 19.88f, 27.56f);
            bezier4Path.cubicTo(19.87f, 30.18f, 19.87f, 32.8f, 19.87f, 35.42f);
            bezier4Path.cubicTo(17.06f, 35.42f, 14.24f, 35.42f, 11.43f, 35.42f);
            bezier4Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(btnHomeColor);
            canvas.drawPath(bezier4Path, paint);
            
            // Bezier 5
            RectF bezier5Rect = CacheForBtnHome.bezier5Rect;
            bezier5Rect.set(7.8f, 6.61f, 36.8f, 22.08f);
            Path bezier5Path = CacheForBtnHome.bezier5Path;
            bezier5Path.reset();
            bezier5Path.moveTo(7.8f, 21.24f);
            bezier5Path.cubicTo(8.19f, 20.84f, 8.56f, 20.42f, 8.95f, 20.02f);
            bezier5Path.cubicTo(13.34f, 15.61f, 17.72f, 11.2f, 22.11f, 6.79f);
            bezier5Path.cubicTo(22.17f, 6.73f, 22.23f, 6.68f, 22.31f, 6.61f);
            bezier5Path.cubicTo(22.84f, 7.13f, 23.36f, 7.65f, 23.87f, 8.17f);
            bezier5Path.cubicTo(28.05f, 12.38f, 32.23f, 16.58f, 36.41f, 20.79f);
            bezier5Path.cubicTo(36.55f, 20.93f, 36.67f, 21.09f, 36.8f, 21.24f);
            bezier5Path.cubicTo(36.8f, 21.36f, 36.8f, 21.48f, 36.8f, 21.6f);
            bezier5Path.cubicTo(36.47f, 22.18f, 36.12f, 22.23f, 35.65f, 21.76f);
            bezier5Path.cubicTo(31.28f, 17.36f, 26.91f, 12.97f, 22.53f, 8.57f);
            bezier5Path.cubicTo(22.47f, 8.5f, 22.4f, 8.44f, 22.31f, 8.35f);
            bezier5Path.cubicTo(22.23f, 8.43f, 22.15f, 8.5f, 22.08f, 8.57f);
            bezier5Path.cubicTo(17.7f, 12.96f, 13.33f, 17.36f, 8.96f, 21.76f);
            bezier5Path.cubicTo(8.48f, 22.23f, 8.13f, 22.18f, 7.8f, 21.6f);
            bezier5Path.cubicTo(7.8f, 21.48f, 7.8f, 21.36f, 7.8f, 21.24f);
            bezier5Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(btnHomeColor);
            canvas.drawPath(bezier5Path, paint);
            
            // Bezier 6
            RectF bezier6Rect = CacheForBtnHome.bezier6Rect;
            bezier6Rect.set(26.55f, 8.74f, 31.97f, 14.45f);
            Path bezier6Path = CacheForBtnHome.bezier6Path;
            bezier6Path.reset();
            bezier6Path.moveTo(31.95f, 8.74f);
            bezier6Path.cubicTo(31.96f, 8.87f, 31.97f, 8.97f, 31.97f, 9.07f);
            bezier6Path.cubicTo(31.97f, 10.59f, 31.97f, 12.12f, 31.97f, 13.65f);
            bezier6Path.cubicTo(31.97f, 13.75f, 31.96f, 13.87f, 31.94f, 13.97f);
            bezier6Path.cubicTo(31.88f, 14.26f, 31.64f, 14.45f, 31.36f, 14.45f);
            bezier6Path.cubicTo(31.09f, 14.45f, 30.85f, 14.25f, 30.79f, 13.97f);
            bezier6Path.cubicTo(30.77f, 13.85f, 30.77f, 13.73f, 30.77f, 13.61f);
            bezier6Path.cubicTo(30.76f, 12.53f, 30.77f, 11.45f, 30.77f, 10.37f);
            bezier6Path.cubicTo(30.77f, 10.26f, 30.77f, 10.15f, 30.77f, 10f);
            bezier6Path.cubicTo(30.63f, 10f, 30.53f, 10f, 30.42f, 10f);
            bezier6Path.cubicTo(29.34f, 10f, 28.27f, 10f, 27.19f, 9.99f);
            bezier6Path.cubicTo(26.8f, 9.99f, 26.56f, 9.76f, 26.55f, 9.4f);
            bezier6Path.cubicTo(26.53f, 9.01f, 26.79f, 8.75f, 27.19f, 8.75f);
            bezier6Path.cubicTo(28.19f, 8.74f, 29.19f, 8.74f, 30.19f, 8.74f);
            bezier6Path.cubicTo(30.77f, 8.74f, 31.34f, 8.74f, 31.95f, 8.74f);
            bezier6Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(btnHomeColor);
            canvas.drawPath(bezier6Path, paint);
        }
    }
    
    // Library
    
    private static class CacheForBtnMediaAll {
        private static Paint paint = new Paint();
        private static RectF backgroundRect = new RectF();
        private static Path backgroundPath = new Path();
        private static RectF bottomBorderRect = new RectF();
        private static Path bottomBorderPath = new Path();
        private static RectF rightBorderRect = new RectF();
        private static Path rightBorderPath = new Path();
        private static RectF textRect = new RectF();
        private static Path textPath = new Path();
        private static TextPaint textTextPaint = new TextPaint();
        private static PaintCodeStaticLayout textStaticLayout = new PaintCodeStaticLayout();
        private static RectF text2Rect = new RectF();
        private static Path text2Path = new Path();
        private static TextPaint text2TextPaint = new TextPaint();
        private static PaintCodeStaticLayout text2StaticLayout = new PaintCodeStaticLayout();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
    }
    
    
    public static void drawBtnMediaAll(Canvas canvas, Context context, boolean isPressed) {
        // General Declarations
        Paint paint = CacheForBtnMediaAll.paint;
        
        // Local Colors
        int iconUpColor = Color.argb(255, 80, 80, 79);
        int iconDownColor = Color.argb(255, 255, 255, 255);
        int lightGold = Color.argb(255, 249, 248, 244);
        int gold = Color.argb(255, 158, 136, 68);
        
        // Local Variables
        int iconColor = isPressed ? gold : lightGold;
        int iconTint = isPressed ? iconDownColor : iconUpColor;
        
        // background
        RectF backgroundRect = CacheForBtnMediaAll.backgroundRect;
        backgroundRect.set(0.04f, 0f, 100.04f, 80f);
        Path backgroundPath = CacheForBtnMediaAll.backgroundPath;
        backgroundPath.reset();
        backgroundPath.moveTo(backgroundRect.left, backgroundRect.top);
        backgroundPath.lineTo(backgroundRect.right, backgroundRect.top);
        backgroundPath.lineTo(backgroundRect.right, backgroundRect.bottom);
        backgroundPath.lineTo(backgroundRect.left, backgroundRect.bottom);
        backgroundPath.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(iconColor);
        canvas.drawPath(backgroundPath, paint);
        
        // bottomBorder
        RectF bottomBorderRect = CacheForBtnMediaAll.bottomBorderRect;
        bottomBorderRect.set(-0.5f, 79f, 100.5f, 79f);
        Path bottomBorderPath = CacheForBtnMediaAll.bottomBorderPath;
        bottomBorderPath.reset();
        bottomBorderPath.moveTo(-0.5f, 79f);
        bottomBorderPath.lineTo(100.5f, 79f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(1f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(gold);
        canvas.drawPath(bottomBorderPath, paint);
        canvas.restore();
        
        // rightBorder
        RectF rightBorderRect = CacheForBtnMediaAll.rightBorderRect;
        rightBorderRect.set(99.5f, -0.5f, 99.5f, 79.5f);
        Path rightBorderPath = CacheForBtnMediaAll.rightBorderPath;
        rightBorderPath.reset();
        rightBorderPath.moveTo(99.5f, -0.5f);
        rightBorderPath.lineTo(99.5f, 79.5f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(1f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(gold);
        canvas.drawPath(rightBorderPath, paint);
        canvas.restore();
        
        // Text
        RectF textRect = CacheForBtnMediaAll.textRect;
        textRect.set(13f, 22f, 14f, 23f);
        Path textPath = CacheForBtnMediaAll.textPath;
        textPath.reset();
        textPath.addRect(textRect, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(iconColor);
        canvas.drawPath(textPath, paint);
        TextPaint textTextPaint = CacheForBtnMediaAll.textTextPaint;
        textTextPaint.reset();
        textTextPaint.setFlags(Paint.ANTI_ALIAS_FLAG);
        textTextPaint.setColor(Color.BLACK);
        textTextPaint.setTypeface(Typeface.create((String) null, Typeface.NORMAL));
        textTextPaint.setTextSize(17f);
        StaticLayout textStaticLayout = CacheForBtnMediaAll.textStaticLayout.get((int) textRect.width(), Layout.Alignment.ALIGN_NORMAL, "Hello, World!", textTextPaint);
        canvas.save();
        canvas.clipRect(textRect);
        canvas.translate(textRect.left, textRect.top + (textRect.height() - textStaticLayout.getHeight()) / 2f);
        textStaticLayout.draw(canvas);
        canvas.restore();
        
        // Text 2
        RectF text2Rect = CacheForBtnMediaAll.text2Rect;
        text2Rect.set(21f, 50f, 79.43f, 70f);
        Path text2Path = CacheForBtnMediaAll.text2Path;
        text2Path.reset();
        text2Path.moveTo(text2Rect.left, text2Rect.top);
        text2Path.lineTo(text2Rect.right, text2Rect.top);
        text2Path.lineTo(text2Rect.right, text2Rect.bottom);
        text2Path.lineTo(text2Rect.left, text2Rect.bottom);
        text2Path.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(iconColor);
        canvas.drawPath(text2Path, paint);
        TextPaint text2TextPaint = CacheForBtnMediaAll.text2TextPaint;
        text2TextPaint.reset();
        text2TextPaint.setFlags(Paint.ANTI_ALIAS_FLAG);
        text2TextPaint.setColor(iconTint);
        text2TextPaint.setTypeface(Typeface.createFromAsset(context.getAssets(), "SF-UI-Text-Regular.otf"));
        text2TextPaint.setTextSize(12f);
        StaticLayout text2StaticLayout = CacheForBtnMediaAll.text2StaticLayout.get((int) text2Rect.width(), Layout.Alignment.ALIGN_CENTER, "All", text2TextPaint);
        canvas.save();
        canvas.clipRect(text2Rect);
        canvas.translate(text2Rect.left, text2Rect.top + (text2Rect.height() - text2StaticLayout.getHeight()) / 2f);
        text2StaticLayout.draw(canvas);
        canvas.restore();
        
        // Group
        {
            // Bezier
            RectF bezierRect = CacheForBtnMediaAll.bezierRect;
            bezierRect.set(36.5f, 15.72f, 64.58f, 30.55f);
            Path bezierPath = CacheForBtnMediaAll.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(36.5f, 30.55f);
            bezierPath.lineTo(50.62f, 15.72f);
            bezierPath.lineTo(64.58f, 30.41f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(iconTint);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
            
            // Bezier 2
            RectF bezier2Rect = CacheForBtnMediaAll.bezier2Rect;
            bezier2Rect.set(55.11f, 17.71f, 59.42f, 22.27f);
            Path bezier2Path = CacheForBtnMediaAll.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(55.11f, 17.74f);
            bezier2Path.lineTo(59.39f, 17.71f);
            bezier2Path.lineTo(59.42f, 22.27f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(iconTint);
            canvas.drawPath(bezier2Path, paint);
            canvas.restore();
            
            // Bezier 3
            RectF bezier3Rect = CacheForBtnMediaAll.bezier3Rect;
            bezier3Rect.set(40.02f, 30.54f, 60.74f, 43.78f);
            Path bezier3Path = CacheForBtnMediaAll.bezier3Path;
            bezier3Path.reset();
            bezier3Path.moveTo(40.02f, 30.54f);
            bezier3Path.cubicTo(40.02f, 30.51f, 40.07f, 43.78f, 40.07f, 43.78f);
            bezier3Path.lineTo(47.31f, 43.78f);
            bezier3Path.lineTo(47.31f, 35.12f);
            bezier3Path.lineTo(53.47f, 35.12f);
            bezier3Path.lineTo(53.47f, 43.64f);
            bezier3Path.lineTo(60.74f, 43.64f);
            bezier3Path.cubicTo(60.74f, 43.64f, 60.74f, 31.07f, 60.74f, 31.07f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(iconTint);
            canvas.drawPath(bezier3Path, paint);
            canvas.restore();
        }
    }
    
    private static class CacheForBtnMediaFavorites {
        private static Paint paint = new Paint();
        private static RectF backgroundRect = new RectF();
        private static Path backgroundPath = new Path();
        private static RectF rightBorderRect = new RectF();
        private static Path rightBorderPath = new Path();
        private static RectF bottomBorderRect = new RectF();
        private static Path bottomBorderPath = new Path();
        private static RectF labelRect = new RectF();
        private static Path labelPath = new Path();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    
    public static void drawBtnMediaFavorites(Canvas canvas, boolean isPressed) {
        // General Declarations
        Paint paint = CacheForBtnMediaFavorites.paint;
        
        // Local Colors
        int iconUpColor = Color.argb(255, 80, 80, 79);
        int iconDownColor = Color.argb(255, 255, 255, 255);
        int gold = Color.argb(255, 158, 136, 68);
        int lightGold = Color.argb(255, 249, 248, 244);
        
        // Local Variables
        int iconColor = isPressed ? gold : lightGold;
        int iconTint = isPressed ? iconDownColor : iconUpColor;
        
        // background
        RectF backgroundRect = CacheForBtnMediaFavorites.backgroundRect;
        backgroundRect.set(0f, 0f, 100f, 80f);
        Path backgroundPath = CacheForBtnMediaFavorites.backgroundPath;
        backgroundPath.reset();
        backgroundPath.addRect(backgroundRect, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(iconColor);
        canvas.drawPath(backgroundPath, paint);
        
        // rightBorder
        RectF rightBorderRect = CacheForBtnMediaFavorites.rightBorderRect;
        rightBorderRect.set(99.5f, -0.5f, 99.5f, 79.5f);
        Path rightBorderPath = CacheForBtnMediaFavorites.rightBorderPath;
        rightBorderPath.reset();
        rightBorderPath.moveTo(99.5f, -0.5f);
        rightBorderPath.lineTo(99.5f, 79.5f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(1f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(gold);
        canvas.drawPath(rightBorderPath, paint);
        canvas.restore();
        
        // bottomBorder
        RectF bottomBorderRect = CacheForBtnMediaFavorites.bottomBorderRect;
        bottomBorderRect.set(-0.5f, 79f, 100.5f, 79f);
        Path bottomBorderPath = CacheForBtnMediaFavorites.bottomBorderPath;
        bottomBorderPath.reset();
        bottomBorderPath.moveTo(-0.5f, 79f);
        bottomBorderPath.lineTo(100.5f, 79f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(1f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(gold);
        canvas.drawPath(bottomBorderPath, paint);
        canvas.restore();
        
        // Label
        RectF labelRect = CacheForBtnMediaFavorites.labelRect;
        labelRect.set(15.26f, 53.99f, 85.19f, 65.29f);
        Path labelPath = CacheForBtnMediaFavorites.labelPath;
        labelPath.reset();
        labelPath.moveTo(16.24f, 63f);
        labelPath.lineTo(16.24f, 56.54f);
        labelPath.lineTo(16.31f, 56.54f);
        labelPath.lineTo(18.98f, 62.94f);
        labelPath.lineTo(19.87f, 62.94f);
        labelPath.lineTo(22.53f, 56.54f);
        labelPath.lineTo(22.6f, 56.54f);
        labelPath.lineTo(22.6f, 63f);
        labelPath.lineTo(23.59f, 63f);
        labelPath.lineTo(23.59f, 54.54f);
        labelPath.lineTo(22.36f, 54.54f);
        labelPath.lineTo(19.47f, 61.54f);
        labelPath.lineTo(19.38f, 61.54f);
        labelPath.lineTo(16.48f, 54.54f);
        labelPath.lineTo(15.26f, 54.54f);
        labelPath.lineTo(15.26f, 63f);
        labelPath.lineTo(16.24f, 63f);
        labelPath.close();
        labelPath.moveTo(26.16f, 65.29f);
        labelPath.cubicTo(27.27f, 65.29f, 27.78f, 64.85f, 28.32f, 63.39f);
        labelPath.lineTo(30.78f, 56.68f);
        labelPath.lineTo(29.71f, 56.68f);
        labelPath.lineTo(27.98f, 61.88f);
        labelPath.lineTo(27.89f, 61.88f);
        labelPath.lineTo(26.16f, 56.68f);
        labelPath.lineTo(25.07f, 56.68f);
        labelPath.lineTo(27.4f, 63.01f);
        labelPath.lineTo(27.29f, 63.38f);
        labelPath.cubicTo(27.02f, 64.14f, 26.71f, 64.42f, 26.13f, 64.42f);
        labelPath.cubicTo(25.99f, 64.42f, 25.83f, 64.41f, 25.7f, 64.39f);
        labelPath.lineTo(25.7f, 65.25f);
        labelPath.cubicTo(25.84f, 65.27f, 26.02f, 65.29f, 26.16f, 65.29f);
        labelPath.close();
        labelPath.moveTo(36.7f, 63f);
        labelPath.lineTo(36.7f, 59.34f);
        labelPath.lineTo(40.45f, 59.34f);
        labelPath.lineTo(40.45f, 58.4f);
        labelPath.lineTo(36.7f, 58.4f);
        labelPath.lineTo(36.7f, 55.49f);
        labelPath.lineTo(40.78f, 55.49f);
        labelPath.lineTo(40.78f, 54.54f);
        labelPath.lineTo(35.65f, 54.54f);
        labelPath.lineTo(35.65f, 63f);
        labelPath.lineTo(36.7f, 63f);
        labelPath.close();
        labelPath.moveTo(43.92f, 62.23f);
        labelPath.cubicTo(43.19f, 62.23f, 42.64f, 61.85f, 42.64f, 61.21f);
        labelPath.cubicTo(42.64f, 60.57f, 43.07f, 60.24f, 44.03f, 60.18f);
        labelPath.lineTo(45.73f, 60.06f);
        labelPath.lineTo(45.73f, 60.64f);
        labelPath.cubicTo(45.73f, 61.55f, 44.96f, 62.23f, 43.92f, 62.23f);
        labelPath.close();
        labelPath.moveTo(43.73f, 63.11f);
        labelPath.cubicTo(44.58f, 63.11f, 45.27f, 62.74f, 45.68f, 62.07f);
        labelPath.lineTo(45.77f, 62.07f);
        labelPath.lineTo(45.77f, 63f);
        labelPath.lineTo(46.73f, 63f);
        labelPath.lineTo(46.73f, 58.68f);
        labelPath.cubicTo(46.73f, 57.36f, 45.87f, 56.57f, 44.33f, 56.57f);
        labelPath.cubicTo(42.98f, 56.57f, 41.99f, 57.24f, 41.85f, 58.25f);
        labelPath.lineTo(42.87f, 58.25f);
        labelPath.cubicTo(43.01f, 57.76f, 43.54f, 57.47f, 44.3f, 57.47f);
        labelPath.cubicTo(45.24f, 57.47f, 45.73f, 57.9f, 45.73f, 58.68f);
        labelPath.lineTo(45.73f, 59.25f);
        labelPath.lineTo(43.9f, 59.36f);
        labelPath.cubicTo(42.43f, 59.45f, 41.6f, 60.1f, 41.6f, 61.23f);
        labelPath.cubicTo(41.6f, 62.38f, 42.51f, 63.11f, 43.73f, 63.11f);
        labelPath.close();
        labelPath.moveTo(47.81f, 56.68f);
        labelPath.lineTo(50.15f, 63f);
        labelPath.lineTo(51.18f, 63f);
        labelPath.lineTo(53.52f, 56.68f);
        labelPath.lineTo(52.44f, 56.68f);
        labelPath.lineTo(50.71f, 61.89f);
        labelPath.lineTo(50.62f, 61.89f);
        labelPath.lineTo(48.89f, 56.68f);
        labelPath.lineTo(47.81f, 56.68f);
        labelPath.close();
        labelPath.moveTo(57.23f, 62.2f);
        labelPath.cubicTo(56.03f, 62.2f, 55.36f, 61.34f, 55.36f, 59.84f);
        labelPath.cubicTo(55.36f, 58.34f, 56.03f, 57.48f, 57.23f, 57.48f);
        labelPath.cubicTo(58.42f, 57.48f, 59.1f, 58.34f, 59.1f, 59.84f);
        labelPath.cubicTo(59.1f, 61.34f, 58.42f, 62.2f, 57.23f, 62.2f);
        labelPath.close();
        labelPath.moveTo(57.23f, 63.11f);
        labelPath.cubicTo(59.03f, 63.11f, 60.14f, 61.87f, 60.14f, 59.84f);
        labelPath.cubicTo(60.14f, 57.81f, 59.03f, 56.57f, 57.23f, 56.57f);
        labelPath.cubicTo(55.43f, 56.57f, 54.32f, 57.81f, 54.32f, 59.84f);
        labelPath.cubicTo(54.32f, 61.87f, 55.43f, 63.11f, 57.23f, 63.11f);
        labelPath.close();
        labelPath.moveTo(61.72f, 63f);
        labelPath.lineTo(62.73f, 63f);
        labelPath.lineTo(62.73f, 59.09f);
        labelPath.cubicTo(62.73f, 58.2f, 63.43f, 57.55f, 64.39f, 57.55f);
        labelPath.cubicTo(64.59f, 57.55f, 64.95f, 57.59f, 65.03f, 57.61f);
        labelPath.lineTo(65.03f, 56.6f);
        labelPath.cubicTo(64.9f, 56.58f, 64.69f, 56.57f, 64.53f, 56.57f);
        labelPath.cubicTo(63.69f, 56.57f, 62.96f, 57.01f, 62.78f, 57.62f);
        labelPath.lineTo(62.68f, 57.62f);
        labelPath.lineTo(62.68f, 56.68f);
        labelPath.lineTo(61.72f, 56.68f);
        labelPath.lineTo(61.72f, 63f);
        labelPath.close();
        labelPath.moveTo(66.43f, 63f);
        labelPath.lineTo(67.44f, 63f);
        labelPath.lineTo(67.44f, 56.68f);
        labelPath.lineTo(66.43f, 56.68f);
        labelPath.lineTo(66.43f, 63f);
        labelPath.close();
        labelPath.moveTo(66.94f, 55.4f);
        labelPath.cubicTo(67.32f, 55.4f, 67.64f, 55.08f, 67.64f, 54.7f);
        labelPath.cubicTo(67.64f, 54.31f, 67.32f, 53.99f, 66.94f, 53.99f);
        labelPath.cubicTo(66.55f, 53.99f, 66.23f, 54.31f, 66.23f, 54.7f);
        labelPath.cubicTo(66.23f, 55.08f, 66.55f, 55.4f, 66.94f, 55.4f);
        labelPath.close();
        labelPath.moveTo(69.78f, 55.05f);
        labelPath.lineTo(69.78f, 56.68f);
        labelPath.lineTo(68.76f, 56.68f);
        labelPath.lineTo(68.76f, 57.53f);
        labelPath.lineTo(69.78f, 57.53f);
        labelPath.lineTo(69.78f, 61.36f);
        labelPath.cubicTo(69.78f, 62.57f, 70.31f, 63.05f, 71.61f, 63.05f);
        labelPath.cubicTo(71.81f, 63.05f, 72f, 63.02f, 72.2f, 62.99f);
        labelPath.lineTo(72.2f, 62.14f);
        labelPath.cubicTo(72.01f, 62.16f, 71.91f, 62.16f, 71.73f, 62.16f);
        labelPath.cubicTo(71.07f, 62.16f, 70.79f, 61.85f, 70.79f, 61.1f);
        labelPath.lineTo(70.79f, 57.53f);
        labelPath.lineTo(72.2f, 57.53f);
        labelPath.lineTo(72.2f, 56.68f);
        labelPath.lineTo(70.79f, 56.68f);
        labelPath.lineTo(70.79f, 55.05f);
        labelPath.lineTo(69.78f, 55.05f);
        labelPath.close();
        labelPath.moveTo(76.15f, 57.46f);
        labelPath.cubicTo(77.16f, 57.46f, 77.82f, 58.2f, 77.85f, 59.32f);
        labelPath.lineTo(74.37f, 59.32f);
        labelPath.cubicTo(74.44f, 58.2f, 75.15f, 57.46f, 76.15f, 57.46f);
        labelPath.close();
        labelPath.moveTo(77.82f, 61.37f);
        labelPath.cubicTo(77.55f, 61.92f, 77f, 62.22f, 76.19f, 62.22f);
        labelPath.cubicTo(75.12f, 62.22f, 74.42f, 61.43f, 74.37f, 60.18f);
        labelPath.lineTo(74.37f, 60.13f);
        labelPath.lineTo(78.91f, 60.13f);
        labelPath.lineTo(78.91f, 59.75f);
        labelPath.cubicTo(78.91f, 57.79f, 77.87f, 56.57f, 76.17f, 56.57f);
        labelPath.cubicTo(74.43f, 56.57f, 73.32f, 57.86f, 73.32f, 59.85f);
        labelPath.cubicTo(73.32f, 61.85f, 74.41f, 63.11f, 76.17f, 63.11f);
        labelPath.cubicTo(77.55f, 63.11f, 78.52f, 62.45f, 78.83f, 61.37f);
        labelPath.lineTo(77.82f, 61.37f);
        labelPath.close();
        labelPath.moveTo(80.34f, 58.41f);
        labelPath.cubicTo(80.34f, 59.33f, 80.88f, 59.84f, 82.07f, 60.12f);
        labelPath.lineTo(83.15f, 60.39f);
        labelPath.cubicTo(83.82f, 60.55f, 84.15f, 60.84f, 84.15f, 61.28f);
        labelPath.cubicTo(84.15f, 61.86f, 83.54f, 62.26f, 82.69f, 62.26f);
        labelPath.cubicTo(81.88f, 62.26f, 81.38f, 61.92f, 81.21f, 61.39f);
        labelPath.lineTo(80.17f, 61.39f);
        labelPath.cubicTo(80.28f, 62.44f, 81.25f, 63.11f, 82.66f, 63.11f);
        labelPath.cubicTo(84.09f, 63.11f, 85.19f, 62.33f, 85.19f, 61.2f);
        labelPath.cubicTo(85.19f, 60.29f, 84.61f, 59.78f, 83.42f, 59.49f);
        labelPath.lineTo(82.45f, 59.26f);
        labelPath.cubicTo(81.71f, 59.07f, 81.36f, 58.8f, 81.36f, 58.37f);
        labelPath.cubicTo(81.36f, 57.81f, 81.94f, 57.43f, 82.69f, 57.43f);
        labelPath.cubicTo(83.45f, 57.43f, 83.95f, 57.76f, 84.08f, 58.27f);
        labelPath.lineTo(85.08f, 58.27f);
        labelPath.cubicTo(84.94f, 57.23f, 84.02f, 56.57f, 82.7f, 56.57f);
        labelPath.cubicTo(81.36f, 56.57f, 80.34f, 57.36f, 80.34f, 58.41f);
        labelPath.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(iconTint);
        canvas.drawPath(labelPath, paint);
        
        // Bezier
        RectF bezierRect = CacheForBtnMediaFavorites.bezierRect;
        bezierRect.set(38.57f, 17.57f, 62.3f, 42.31f);
        Path bezierPath = CacheForBtnMediaFavorites.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(50.43f, 42.31f);
        bezierPath.cubicTo(50.43f, 42.31f, 62.3f, 33.13f, 62.3f, 24.43f);
        bezierPath.cubicTo(62.3f, 15.74f, 51.77f, 15.07f, 50.43f, 23.76f);
        bezierPath.cubicTo(49.1f, 15.07f, 38.57f, 15.74f, 38.57f, 25.1f);
        bezierPath.cubicTo(38.57f, 34.46f, 50.43f, 42.31f, 50.43f, 42.31f);
        bezierPath.lineTo(50.43f, 42.31f);
        bezierPath.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(1f);
        paint.setStrokeJoin(Paint.Join.ROUND);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(iconTint);
        canvas.drawPath(bezierPath, paint);
        canvas.restore();
    }
    
    private static class CacheForBtnMediaNew {
        private static Paint paint = new Paint();
        private static RectF backgroundRect = new RectF();
        private static Path backgroundPath = new Path();
        private static RectF bottomBorderRect = new RectF();
        private static Path bottomBorderPath = new Path();
        private static RectF rightBorderRect = new RectF();
        private static Path rightBorderPath = new Path();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF text2Rect = new RectF();
        private static Path text2Path = new Path();
        private static TextPaint text2TextPaint = new TextPaint();
        private static PaintCodeStaticLayout text2StaticLayout = new PaintCodeStaticLayout();
    }
    
    
    public static void drawBtnMediaNew(Canvas canvas, Context context, boolean isPressed) {
        // General Declarations
        Paint paint = CacheForBtnMediaNew.paint;
        
        // Local Colors
        int iconUpColor = Color.argb(255, 80, 80, 79);
        int iconDownColor = Color.argb(255, 255, 255, 255);
        int lightGold = Color.argb(255, 249, 248, 244);
        int gold = Color.argb(255, 158, 136, 68);
        
        // Local Variables
        int iconColor = isPressed ? gold : lightGold;
        int iconTint = isPressed ? iconDownColor : iconUpColor;
        
        // background
        RectF backgroundRect = CacheForBtnMediaNew.backgroundRect;
        backgroundRect.set(0f, 0f, 100f, 80f);
        Path backgroundPath = CacheForBtnMediaNew.backgroundPath;
        backgroundPath.reset();
        backgroundPath.addRect(backgroundRect, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(iconColor);
        canvas.drawPath(backgroundPath, paint);
        
        // bottomBorder
        RectF bottomBorderRect = CacheForBtnMediaNew.bottomBorderRect;
        bottomBorderRect.set(-0.5f, 79f, 100.5f, 79f);
        Path bottomBorderPath = CacheForBtnMediaNew.bottomBorderPath;
        bottomBorderPath.reset();
        bottomBorderPath.moveTo(-0.5f, 79f);
        bottomBorderPath.lineTo(100.5f, 79f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(1f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(gold);
        canvas.drawPath(bottomBorderPath, paint);
        canvas.restore();
        
        // rightBorder
        RectF rightBorderRect = CacheForBtnMediaNew.rightBorderRect;
        rightBorderRect.set(99.5f, -0.5f, 99.5f, 79.5f);
        Path rightBorderPath = CacheForBtnMediaNew.rightBorderPath;
        rightBorderPath.reset();
        rightBorderPath.moveTo(99.5f, -0.5f);
        rightBorderPath.lineTo(99.5f, 79.5f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(1f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(gold);
        canvas.drawPath(rightBorderPath, paint);
        canvas.restore();
        
        // Bezier
        RectF bezierRect = CacheForBtnMediaNew.bezierRect;
        bezierRect.set(38.5f, 17.5f, 61.5f, 40.5f);
        Path bezierPath = CacheForBtnMediaNew.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(50f, 17.5f);
        bezierPath.lineTo(53f, 25.5f);
        bezierPath.lineTo(61.5f, 25.5f);
        bezierPath.lineTo(54.5f, 31.5f);
        bezierPath.lineTo(57.5f, 40.5f);
        bezierPath.lineTo(50f, 35f);
        bezierPath.lineTo(42.5f, 40.5f);
        bezierPath.lineTo(45.5f, 31.5f);
        bezierPath.lineTo(38.5f, 25.5f);
        bezierPath.lineTo(47f, 25.5f);
        bezierPath.lineTo(50f, 17.5f);
        bezierPath.lineTo(50f, 17.5f);
        bezierPath.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(1f);
        paint.setStrokeJoin(Paint.Join.ROUND);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(iconTint);
        canvas.drawPath(bezierPath, paint);
        canvas.restore();
        
        // Text 2
        RectF text2Rect = CacheForBtnMediaNew.text2Rect;
        text2Rect.set(12.2f, 50f, 87.82f, 70f);
        Path text2Path = CacheForBtnMediaNew.text2Path;
        text2Path.reset();
        text2Path.moveTo(text2Rect.left, text2Rect.top);
        text2Path.lineTo(text2Rect.right, text2Rect.top);
        text2Path.lineTo(text2Rect.right, text2Rect.bottom);
        text2Path.lineTo(text2Rect.left, text2Rect.bottom);
        text2Path.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(iconColor);
        canvas.drawPath(text2Path, paint);
        TextPaint text2TextPaint = CacheForBtnMediaNew.text2TextPaint;
        text2TextPaint.reset();
        text2TextPaint.setFlags(Paint.ANTI_ALIAS_FLAG);
        text2TextPaint.setColor(iconTint);
        text2TextPaint.setTypeface(Typeface.createFromAsset(context.getAssets(), "SF-UI-Text-Regular.otf"));
        text2TextPaint.setTextSize(12f);
        StaticLayout text2StaticLayout = CacheForBtnMediaNew.text2StaticLayout.get((int) text2Rect.width(), Layout.Alignment.ALIGN_CENTER, "Newly Added", text2TextPaint);
        canvas.save();
        canvas.clipRect(text2Rect);
        canvas.translate(text2Rect.left, text2Rect.top + (text2Rect.height() - text2StaticLayout.getHeight()) / 2f);
        text2StaticLayout.draw(canvas);
        canvas.restore();
    }
    
    private static class CacheForBtnMediaArtists {
        private static Paint paint = new Paint();
        private static RectF backgroundRect = new RectF();
        private static Path backgroundPath = new Path();
        private static RectF bottomBorderRect = new RectF();
        private static Path bottomBorderPath = new Path();
        private static RectF rightBorderRect = new RectF();
        private static Path rightBorderPath = new Path();
        private static RectF labelRect = new RectF();
        private static Path labelPath = new Path();
        private static RectF ovalRect = new RectF();
        private static Path ovalPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
        private static RectF bezier4Rect = new RectF();
        private static Path bezier4Path = new Path();
        private static RectF bezier5Rect = new RectF();
        private static Path bezier5Path = new Path();
    }
    
    
    public static void drawBtnMediaArtists(Canvas canvas, boolean isPressed) {
        // General Declarations
        Paint paint = CacheForBtnMediaArtists.paint;
        
        // Local Colors
        int iconUpColor = Color.argb(255, 80, 80, 79);
        int iconDownColor = Color.argb(255, 255, 255, 255);
        int gold = Color.argb(255, 158, 136, 68);
        int lightGold = Color.argb(255, 249, 248, 244);
        
        // Local Variables
        int iconColor = isPressed ? gold : lightGold;
        int iconTint = isPressed ? iconDownColor : iconUpColor;
        
        // background
        RectF backgroundRect = CacheForBtnMediaArtists.backgroundRect;
        backgroundRect.set(0f, 0f, 100f, 80f);
        Path backgroundPath = CacheForBtnMediaArtists.backgroundPath;
        backgroundPath.reset();
        backgroundPath.addRect(backgroundRect, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(iconColor);
        canvas.drawPath(backgroundPath, paint);
        
        // bottomBorder
        RectF bottomBorderRect = CacheForBtnMediaArtists.bottomBorderRect;
        bottomBorderRect.set(-0.5f, 79f, 100.5f, 79f);
        Path bottomBorderPath = CacheForBtnMediaArtists.bottomBorderPath;
        bottomBorderPath.reset();
        bottomBorderPath.moveTo(-0.5f, 79f);
        bottomBorderPath.lineTo(100.5f, 79f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(1f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(gold);
        canvas.drawPath(bottomBorderPath, paint);
        canvas.restore();
        
        // rightBorder
        RectF rightBorderRect = CacheForBtnMediaArtists.rightBorderRect;
        rightBorderRect.set(99.5f, -0.5f, 99.5f, 79.5f);
        Path rightBorderPath = CacheForBtnMediaArtists.rightBorderPath;
        rightBorderPath.reset();
        rightBorderPath.moveTo(99.5f, -0.5f);
        rightBorderPath.lineTo(99.5f, 79.5f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(1f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(gold);
        canvas.drawPath(rightBorderPath, paint);
        canvas.restore();
        
        // Label
        RectF labelRect = CacheForBtnMediaArtists.labelRect;
        labelRect.set(33.3f, 53.99f, 69.33f, 63.11f);
        Path labelPath = CacheForBtnMediaArtists.labelPath;
        labelPath.reset();
        labelPath.moveTo(39.47f, 63f);
        labelPath.lineTo(40.57f, 63f);
        labelPath.lineTo(37.46f, 54.54f);
        labelPath.lineTo(36.41f, 54.54f);
        labelPath.lineTo(33.3f, 63f);
        labelPath.lineTo(34.4f, 63f);
        labelPath.lineTo(35.25f, 60.58f);
        labelPath.lineTo(38.62f, 60.58f);
        labelPath.lineTo(39.47f, 63f);
        labelPath.close();
        labelPath.moveTo(36.89f, 55.91f);
        labelPath.lineTo(36.98f, 55.91f);
        labelPath.lineTo(38.31f, 59.68f);
        labelPath.lineTo(35.56f, 59.68f);
        labelPath.lineTo(36.89f, 55.91f);
        labelPath.close();
        labelPath.moveTo(41.93f, 63f);
        labelPath.lineTo(42.94f, 63f);
        labelPath.lineTo(42.94f, 59.09f);
        labelPath.cubicTo(42.94f, 58.2f, 43.63f, 57.55f, 44.59f, 57.55f);
        labelPath.cubicTo(44.79f, 57.55f, 45.16f, 57.59f, 45.24f, 57.61f);
        labelPath.lineTo(45.24f, 56.6f);
        labelPath.cubicTo(45.11f, 56.58f, 44.9f, 56.57f, 44.73f, 56.57f);
        labelPath.cubicTo(43.9f, 56.57f, 43.17f, 57.01f, 42.98f, 57.62f);
        labelPath.lineTo(42.89f, 57.62f);
        labelPath.lineTo(42.89f, 56.68f);
        labelPath.lineTo(41.93f, 56.68f);
        labelPath.lineTo(41.93f, 63f);
        labelPath.close();
        labelPath.moveTo(47.27f, 55.05f);
        labelPath.lineTo(47.27f, 56.68f);
        labelPath.lineTo(46.25f, 56.68f);
        labelPath.lineTo(46.25f, 57.53f);
        labelPath.lineTo(47.27f, 57.53f);
        labelPath.lineTo(47.27f, 61.36f);
        labelPath.cubicTo(47.27f, 62.57f, 47.79f, 63.05f, 49.09f, 63.05f);
        labelPath.cubicTo(49.29f, 63.05f, 49.49f, 63.02f, 49.69f, 62.99f);
        labelPath.lineTo(49.69f, 62.14f);
        labelPath.cubicTo(49.5f, 62.16f, 49.4f, 62.16f, 49.22f, 62.16f);
        labelPath.cubicTo(48.56f, 62.16f, 48.28f, 61.85f, 48.28f, 61.1f);
        labelPath.lineTo(48.28f, 57.53f);
        labelPath.lineTo(49.69f, 57.53f);
        labelPath.lineTo(49.69f, 56.68f);
        labelPath.lineTo(48.28f, 56.68f);
        labelPath.lineTo(48.28f, 55.05f);
        labelPath.lineTo(47.27f, 55.05f);
        labelPath.close();
        labelPath.moveTo(51.23f, 63f);
        labelPath.lineTo(52.24f, 63f);
        labelPath.lineTo(52.24f, 56.68f);
        labelPath.lineTo(51.23f, 56.68f);
        labelPath.lineTo(51.23f, 63f);
        labelPath.close();
        labelPath.moveTo(51.74f, 55.4f);
        labelPath.cubicTo(52.12f, 55.4f, 52.44f, 55.08f, 52.44f, 54.7f);
        labelPath.cubicTo(52.44f, 54.31f, 52.12f, 53.99f, 51.74f, 53.99f);
        labelPath.cubicTo(51.35f, 53.99f, 51.03f, 54.31f, 51.03f, 54.7f);
        labelPath.cubicTo(51.03f, 55.08f, 51.35f, 55.4f, 51.74f, 55.4f);
        labelPath.close();
        labelPath.moveTo(54.02f, 58.41f);
        labelPath.cubicTo(54.02f, 59.33f, 54.55f, 59.84f, 55.74f, 60.12f);
        labelPath.lineTo(56.82f, 60.39f);
        labelPath.cubicTo(57.5f, 60.55f, 57.82f, 60.84f, 57.82f, 61.28f);
        labelPath.cubicTo(57.82f, 61.86f, 57.21f, 62.26f, 56.37f, 62.26f);
        labelPath.cubicTo(55.56f, 62.26f, 55.05f, 61.92f, 54.88f, 61.39f);
        labelPath.lineTo(53.85f, 61.39f);
        labelPath.cubicTo(53.96f, 62.44f, 54.92f, 63.11f, 56.33f, 63.11f);
        labelPath.cubicTo(57.77f, 63.11f, 58.86f, 62.33f, 58.86f, 61.2f);
        labelPath.cubicTo(58.86f, 60.29f, 58.29f, 59.78f, 57.1f, 59.49f);
        labelPath.lineTo(56.13f, 59.26f);
        labelPath.cubicTo(55.38f, 59.07f, 55.03f, 58.8f, 55.03f, 58.37f);
        labelPath.cubicTo(55.03f, 57.81f, 55.62f, 57.43f, 56.37f, 57.43f);
        labelPath.cubicTo(57.13f, 57.43f, 57.62f, 57.76f, 57.75f, 58.27f);
        labelPath.lineTo(58.75f, 58.27f);
        labelPath.cubicTo(58.62f, 57.23f, 57.7f, 56.57f, 56.37f, 56.57f);
        labelPath.cubicTo(55.03f, 56.57f, 54.02f, 57.36f, 54.02f, 58.41f);
        labelPath.close();
        labelPath.moveTo(60.81f, 55.05f);
        labelPath.lineTo(60.81f, 56.68f);
        labelPath.lineTo(59.79f, 56.68f);
        labelPath.lineTo(59.79f, 57.53f);
        labelPath.lineTo(60.81f, 57.53f);
        labelPath.lineTo(60.81f, 61.36f);
        labelPath.cubicTo(60.81f, 62.57f, 61.33f, 63.05f, 62.63f, 63.05f);
        labelPath.cubicTo(62.83f, 63.05f, 63.02f, 63.02f, 63.22f, 62.99f);
        labelPath.lineTo(63.22f, 62.14f);
        labelPath.cubicTo(63.03f, 62.16f, 62.93f, 62.16f, 62.75f, 62.16f);
        labelPath.cubicTo(62.1f, 62.16f, 61.81f, 61.85f, 61.81f, 61.1f);
        labelPath.lineTo(61.81f, 57.53f);
        labelPath.lineTo(63.22f, 57.53f);
        labelPath.lineTo(63.22f, 56.68f);
        labelPath.lineTo(61.81f, 56.68f);
        labelPath.lineTo(61.81f, 55.05f);
        labelPath.lineTo(60.81f, 55.05f);
        labelPath.close();
        labelPath.moveTo(64.48f, 58.41f);
        labelPath.cubicTo(64.48f, 59.33f, 65.02f, 59.84f, 66.2f, 60.12f);
        labelPath.lineTo(67.29f, 60.39f);
        labelPath.cubicTo(67.96f, 60.55f, 68.29f, 60.84f, 68.29f, 61.28f);
        labelPath.cubicTo(68.29f, 61.86f, 67.68f, 62.26f, 66.83f, 62.26f);
        labelPath.cubicTo(66.02f, 62.26f, 65.52f, 61.92f, 65.35f, 61.39f);
        labelPath.lineTo(64.31f, 61.39f);
        labelPath.cubicTo(64.42f, 62.44f, 65.39f, 63.11f, 66.79f, 63.11f);
        labelPath.cubicTo(68.23f, 63.11f, 69.33f, 62.33f, 69.33f, 61.2f);
        labelPath.cubicTo(69.33f, 60.29f, 68.75f, 59.78f, 67.56f, 59.49f);
        labelPath.lineTo(66.59f, 59.26f);
        labelPath.cubicTo(65.85f, 59.07f, 65.49f, 58.8f, 65.49f, 58.37f);
        labelPath.cubicTo(65.49f, 57.81f, 66.08f, 57.43f, 66.83f, 57.43f);
        labelPath.cubicTo(67.59f, 57.43f, 68.08f, 57.76f, 68.22f, 58.27f);
        labelPath.lineTo(69.21f, 58.27f);
        labelPath.cubicTo(69.08f, 57.23f, 68.16f, 56.57f, 66.84f, 56.57f);
        labelPath.cubicTo(65.49f, 56.57f, 64.48f, 57.36f, 64.48f, 58.41f);
        labelPath.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(iconTint);
        canvas.drawPath(labelPath, paint);
        
        // Oval
        RectF ovalRect = CacheForBtnMediaArtists.ovalRect;
        ovalRect.set(50.7f, 23.5f, 60.7f, 33.5f);
        Path ovalPath = CacheForBtnMediaArtists.ovalPath;
        ovalPath.reset();
        ovalPath.addOval(ovalRect, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(1f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(iconTint);
        canvas.drawPath(ovalPath, paint);
        canvas.restore();
        
        // Bezier 2
        RectF bezier2Rect = CacheForBtnMediaArtists.bezier2Rect;
        bezier2Rect.set(51.44f, 24.24f, 59.92f, 32.73f);
        Path bezier2Path = CacheForBtnMediaArtists.bezier2Path;
        bezier2Path.reset();
        bezier2Path.moveTo(51.44f, 24.24f);
        bezier2Path.lineTo(59.92f, 32.73f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(1f);
        paint.setStrokeJoin(Paint.Join.ROUND);
        paint.setStrokeCap(Paint.Cap.ROUND);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(iconTint);
        canvas.drawPath(bezier2Path, paint);
        canvas.restore();
        
        // Bezier 3
        RectF bezier3Rect = CacheForBtnMediaArtists.bezier3Rect;
        bezier3Rect.set(43.89f, 29.78f, 54.38f, 40.28f);
        Path bezier3Path = CacheForBtnMediaArtists.bezier3Path;
        bezier3Path.reset();
        bezier3Path.moveTo(54.38f, 33.31f);
        bezier3Path.lineTo(46.56f, 39.9f);
        bezier3Path.cubicTo(45.92f, 40.44f, 44.97f, 40.4f, 44.37f, 39.81f);
        bezier3Path.cubicTo(43.77f, 39.2f, 43.73f, 38.24f, 44.28f, 37.58f);
        bezier3Path.lineTo(50.85f, 29.78f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(1f);
        paint.setStrokeJoin(Paint.Join.ROUND);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(iconTint);
        canvas.drawPath(bezier3Path, paint);
        canvas.restore();
        
        // Bezier 4
        RectF bezier4Rect = CacheForBtnMediaArtists.bezier4Rect;
        bezier4Rect.set(42.95f, 39.8f, 44.36f, 41.21f);
        Path bezier4Path = CacheForBtnMediaArtists.bezier4Path;
        bezier4Path.reset();
        bezier4Path.moveTo(44.36f, 39.8f);
        bezier4Path.lineTo(42.95f, 41.21f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(1f);
        paint.setStrokeJoin(Paint.Join.ROUND);
        paint.setStrokeCap(Paint.Cap.ROUND);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(iconTint);
        canvas.drawPath(bezier4Path, paint);
        canvas.restore();
        
        // Bezier 5
        RectF bezier5Rect = CacheForBtnMediaArtists.bezier5Rect;
        bezier5Rect.set(48.61f, 34.14f, 50.02f, 35.56f);
        Path bezier5Path = CacheForBtnMediaArtists.bezier5Path;
        bezier5Path.reset();
        bezier5Path.moveTo(50.02f, 34.14f);
        bezier5Path.lineTo(48.61f, 35.56f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(1f);
        paint.setStrokeJoin(Paint.Join.ROUND);
        paint.setStrokeCap(Paint.Cap.ROUND);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(iconTint);
        canvas.drawPath(bezier5Path, paint);
        canvas.restore();
    }
    
    private static class CacheForBtnMediaGenres {
        private static Paint paint = new Paint();
        private static RectF backgroundRect = new RectF();
        private static Path backgroundPath = new Path();
        private static RectF bottomBorderRect = new RectF();
        private static Path bottomBorderPath = new Path();
        private static RectF rightBorderRect = new RectF();
        private static Path rightBorderPath = new Path();
        private static RectF labelRect = new RectF();
        private static Path labelPath = new Path();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    
    public static void drawBtnMediaGenres(Canvas canvas, boolean isPressed) {
        // General Declarations
        Paint paint = CacheForBtnMediaGenres.paint;
        
        // Local Colors
        int iconUpColor = Color.argb(255, 80, 80, 79);
        int iconDownColor = Color.argb(255, 255, 255, 255);
        int gold = Color.argb(255, 158, 136, 68);
        int lightGold = Color.argb(255, 249, 248, 244);
        
        // Local Variables
        int iconColor = isPressed ? gold : lightGold;
        int iconTint = isPressed ? iconDownColor : iconUpColor;
        
        // background
        RectF backgroundRect = CacheForBtnMediaGenres.backgroundRect;
        backgroundRect.set(0f, 0f, 100f, 80f);
        Path backgroundPath = CacheForBtnMediaGenres.backgroundPath;
        backgroundPath.reset();
        backgroundPath.addRect(backgroundRect, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(iconColor);
        canvas.drawPath(backgroundPath, paint);
        
        // bottomBorder
        RectF bottomBorderRect = CacheForBtnMediaGenres.bottomBorderRect;
        bottomBorderRect.set(-0.5f, 79f, 100.5f, 79f);
        Path bottomBorderPath = CacheForBtnMediaGenres.bottomBorderPath;
        bottomBorderPath.reset();
        bottomBorderPath.moveTo(-0.5f, 79f);
        bottomBorderPath.lineTo(100.5f, 79f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(1f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(gold);
        canvas.drawPath(bottomBorderPath, paint);
        canvas.restore();
        
        // rightBorder
        RectF rightBorderRect = CacheForBtnMediaGenres.rightBorderRect;
        rightBorderRect.set(99.5f, -0.5f, 99.5f, 79.5f);
        Path rightBorderPath = CacheForBtnMediaGenres.rightBorderPath;
        rightBorderPath.reset();
        rightBorderPath.moveTo(99.5f, -0.5f);
        rightBorderPath.lineTo(99.5f, 79.5f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(1f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(gold);
        canvas.drawPath(rightBorderPath, paint);
        canvas.restore();
        
        // Label
        RectF labelRect = CacheForBtnMediaGenres.labelRect;
        labelRect.set(32f, 54.35f, 70.97f, 63.2f);
        Path labelPath = CacheForBtnMediaGenres.labelPath;
        labelPath.reset();
        labelPath.moveTo(39.43f, 59.73f);
        labelPath.lineTo(39.43f, 58.7f);
        labelPath.lineTo(36f, 58.7f);
        labelPath.lineTo(36f, 59.63f);
        labelPath.lineTo(38.38f, 59.63f);
        labelPath.lineTo(38.38f, 59.83f);
        labelPath.cubicTo(38.38f, 61.26f, 37.35f, 62.23f, 35.84f, 62.23f);
        labelPath.cubicTo(34.14f, 62.23f, 33.09f, 60.9f, 33.09f, 58.77f);
        labelPath.cubicTo(33.09f, 56.67f, 34.16f, 55.32f, 35.83f, 55.32f);
        labelPath.cubicTo(37.09f, 55.32f, 37.94f, 55.92f, 38.3f, 57.06f);
        labelPath.lineTo(39.37f, 57.06f);
        labelPath.cubicTo(39.07f, 55.39f, 37.71f, 54.35f, 35.83f, 54.35f);
        labelPath.cubicTo(33.52f, 54.35f, 32f, 56.1f, 32f, 58.77f);
        labelPath.cubicTo(32f, 61.48f, 33.5f, 63.2f, 35.83f, 63.2f);
        labelPath.cubicTo(38f, 63.2f, 39.43f, 61.82f, 39.43f, 59.73f);
        labelPath.close();
        labelPath.moveTo(43.68f, 57.46f);
        labelPath.cubicTo(44.68f, 57.46f, 45.35f, 58.2f, 45.37f, 59.32f);
        labelPath.lineTo(41.89f, 59.32f);
        labelPath.cubicTo(41.97f, 58.2f, 42.67f, 57.46f, 43.68f, 57.46f);
        labelPath.close();
        labelPath.moveTo(45.34f, 61.37f);
        labelPath.cubicTo(45.08f, 61.92f, 44.53f, 62.22f, 43.71f, 62.22f);
        labelPath.cubicTo(42.64f, 62.22f, 41.95f, 61.43f, 41.89f, 60.18f);
        labelPath.lineTo(41.89f, 60.13f);
        labelPath.lineTo(46.43f, 60.13f);
        labelPath.lineTo(46.43f, 59.75f);
        labelPath.cubicTo(46.43f, 57.79f, 45.4f, 56.57f, 43.69f, 56.57f);
        labelPath.cubicTo(41.96f, 56.57f, 40.84f, 57.86f, 40.84f, 59.85f);
        labelPath.cubicTo(40.84f, 61.85f, 41.94f, 63.11f, 43.69f, 63.11f);
        labelPath.cubicTo(45.07f, 63.11f, 46.05f, 62.45f, 46.35f, 61.37f);
        labelPath.lineTo(45.34f, 61.37f);
        labelPath.close();
        labelPath.moveTo(48.02f, 63f);
        labelPath.lineTo(49.02f, 63f);
        labelPath.lineTo(49.02f, 59.26f);
        labelPath.cubicTo(49.02f, 58.15f, 49.67f, 57.48f, 50.68f, 57.48f);
        labelPath.cubicTo(51.69f, 57.48f, 52.17f, 58.02f, 52.17f, 59.16f);
        labelPath.lineTo(52.17f, 63f);
        labelPath.lineTo(53.18f, 63f);
        labelPath.lineTo(53.18f, 58.91f);
        labelPath.cubicTo(53.18f, 57.41f, 52.39f, 56.57f, 50.97f, 56.57f);
        labelPath.cubicTo(50f, 56.57f, 49.39f, 56.98f, 49.07f, 57.68f);
        labelPath.lineTo(48.98f, 57.68f);
        labelPath.lineTo(48.98f, 56.68f);
        labelPath.lineTo(48.02f, 56.68f);
        labelPath.lineTo(48.02f, 63f);
        labelPath.close();
        labelPath.moveTo(55.02f, 63f);
        labelPath.lineTo(56.03f, 63f);
        labelPath.lineTo(56.03f, 59.09f);
        labelPath.cubicTo(56.03f, 58.2f, 56.72f, 57.55f, 57.68f, 57.55f);
        labelPath.cubicTo(57.88f, 57.55f, 58.25f, 57.59f, 58.33f, 57.61f);
        labelPath.lineTo(58.33f, 56.6f);
        labelPath.cubicTo(58.2f, 56.58f, 57.99f, 56.57f, 57.82f, 56.57f);
        labelPath.cubicTo(56.99f, 56.57f, 56.26f, 57.01f, 56.07f, 57.62f);
        labelPath.lineTo(55.98f, 57.62f);
        labelPath.lineTo(55.98f, 56.68f);
        labelPath.lineTo(55.02f, 56.68f);
        labelPath.lineTo(55.02f, 63f);
        labelPath.close();
        labelPath.moveTo(61.93f, 57.46f);
        labelPath.cubicTo(62.93f, 57.46f, 63.6f, 58.2f, 63.63f, 59.32f);
        labelPath.lineTo(60.14f, 59.32f);
        labelPath.cubicTo(60.22f, 58.2f, 60.92f, 57.46f, 61.93f, 57.46f);
        labelPath.close();
        labelPath.moveTo(63.6f, 61.37f);
        labelPath.cubicTo(63.33f, 61.92f, 62.78f, 62.22f, 61.97f, 62.22f);
        labelPath.cubicTo(60.89f, 62.22f, 60.2f, 61.43f, 60.14f, 60.18f);
        labelPath.lineTo(60.14f, 60.13f);
        labelPath.lineTo(64.69f, 60.13f);
        labelPath.lineTo(64.69f, 59.75f);
        labelPath.cubicTo(64.69f, 57.79f, 63.65f, 56.57f, 61.94f, 56.57f);
        labelPath.cubicTo(60.21f, 56.57f, 59.1f, 57.86f, 59.1f, 59.85f);
        labelPath.cubicTo(59.1f, 61.85f, 60.19f, 63.11f, 61.94f, 63.11f);
        labelPath.cubicTo(63.33f, 63.11f, 64.3f, 62.45f, 64.6f, 61.37f);
        labelPath.lineTo(63.6f, 61.37f);
        labelPath.close();
        labelPath.moveTo(66.12f, 58.41f);
        labelPath.cubicTo(66.12f, 59.33f, 66.66f, 59.84f, 67.84f, 60.12f);
        labelPath.lineTo(68.93f, 60.39f);
        labelPath.cubicTo(69.6f, 60.55f, 69.93f, 60.84f, 69.93f, 61.28f);
        labelPath.cubicTo(69.93f, 61.86f, 69.32f, 62.26f, 68.47f, 62.26f);
        labelPath.cubicTo(67.66f, 62.26f, 67.16f, 61.92f, 66.99f, 61.39f);
        labelPath.lineTo(65.95f, 61.39f);
        labelPath.cubicTo(66.06f, 62.44f, 67.03f, 63.11f, 68.44f, 63.11f);
        labelPath.cubicTo(69.87f, 63.11f, 70.97f, 62.33f, 70.97f, 61.2f);
        labelPath.cubicTo(70.97f, 60.29f, 70.39f, 59.78f, 69.2f, 59.49f);
        labelPath.lineTo(68.23f, 59.26f);
        labelPath.cubicTo(67.49f, 59.07f, 67.13f, 58.8f, 67.13f, 58.37f);
        labelPath.cubicTo(67.13f, 57.81f, 67.72f, 57.43f, 68.47f, 57.43f);
        labelPath.cubicTo(69.23f, 57.43f, 69.72f, 57.76f, 69.86f, 58.27f);
        labelPath.lineTo(70.86f, 58.27f);
        labelPath.cubicTo(70.72f, 57.23f, 69.8f, 56.57f, 68.48f, 56.57f);
        labelPath.cubicTo(67.13f, 56.57f, 66.12f, 57.36f, 66.12f, 58.41f);
        labelPath.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(iconTint);
        canvas.drawPath(labelPath, paint);
        
        // Bezier
        RectF bezierRect = CacheForBtnMediaGenres.bezierRect;
        bezierRect.set(43f, 16f, 56f, 48f);
        Path bezierPath = CacheForBtnMediaGenres.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(53.32f, 18.77f);
        bezierPath.cubicTo(53.58f, 21.22f, 51.59f, 23.21f, 49.82f, 24.82f);
        bezierPath.cubicTo(49.02f, 25.52f, 49.69f, 24.93f, 49.27f, 25.28f);
        bezierPath.cubicTo(49.19f, 24.91f, 49.02f, 23.92f, 49.03f, 23.63f);
        bezierPath.cubicTo(49.15f, 21.51f, 51.02f, 18.45f, 52.66f, 17.33f);
        bezierPath.cubicTo(52.93f, 17.78f, 53.14f, 17.82f, 53.32f, 18.77f);
        bezierPath.lineTo(53.32f, 18.77f);
        bezierPath.close();
        bezierPath.moveTo(53.87f, 31.44f);
        bezierPath.cubicTo(52.82f, 30.73f, 51.43f, 30.54f, 50.16f, 30.75f);
        bezierPath.cubicTo(50f, 29.76f, 49.83f, 28.78f, 49.67f, 27.79f);
        bezierPath.cubicTo(51.68f, 25.96f, 53.87f, 23.84f, 53.99f, 21.09f);
        bezierPath.cubicTo(54.04f, 19.34f, 53.75f, 17.42f, 52.55f, 16f);
        bezierPath.cubicTo(51.09f, 16.1f, 50.07f, 17.69f, 49.29f, 18.68f);
        bezierPath.cubicTo(48.02f, 20.78f, 48.32f, 23.33f, 48.81f, 25.59f);
        bezierPath.cubicTo(48.11f, 26.33f, 47.15f, 26.95f, 46.47f, 27.73f);
        bezierPath.cubicTo(44.45f, 29.54f, 42.7f, 31.99f, 43.04f, 34.7f);
        bezierPath.cubicTo(43.2f, 37.32f, 45.26f, 39.75f, 48.07f, 40.37f);
        bezierPath.cubicTo(49.14f, 40.62f, 50.26f, 40.64f, 51.34f, 40.45f);
        bezierPath.cubicTo(51.53f, 42.22f, 52.22f, 44.08f, 51.42f, 45.8f);
        bezierPath.cubicTo(50.82f, 47.05f, 49.04f, 48.16f, 47.71f, 47.52f);
        bezierPath.cubicTo(47.2f, 47.27f, 47.62f, 47.48f, 47.3f, 47.32f);
        bezierPath.cubicTo(48.22f, 47.12f, 49.02f, 46.51f, 49.24f, 46.09f);
        bezierPath.cubicTo(49.96f, 44.94f, 48.9f, 43.24f, 47.39f, 43.46f);
        bezierPath.cubicTo(45.46f, 43.49f, 44.66f, 45.92f, 45.91f, 47.13f);
        bezierPath.cubicTo(47.06f, 48.33f, 49.19f, 48.16f, 50.56f, 47.38f);
        bezierPath.cubicTo(52.11f, 46.46f, 52.3f, 44.6f, 52.12f, 43.02f);
        bezierPath.cubicTo(52.07f, 42.49f, 51.78f, 40.92f, 51.74f, 40.36f);
        bezierPath.cubicTo(52.34f, 40.17f, 51.92f, 40.31f, 52.77f, 40.01f);
        bezierPath.cubicTo(55.04f, 39.18f, 56.5f, 36.67f, 55.84f, 34.42f);
        bezierPath.cubicTo(55.57f, 33.26f, 54.95f, 32.13f, 53.87f, 31.44f);
        bezierPath.lineTo(53.87f, 31.44f);
        bezierPath.close();
        bezierPath.moveTo(54.35f, 35.96f);
        bezierPath.cubicTo(54.54f, 37.52f, 53.45f, 39.35f, 51.72f, 39.85f);
        bezierPath.cubicTo(51.6f, 39.23f, 51.57f, 39.06f, 51.49f, 38.7f);
        bezierPath.cubicTo(51.08f, 36.76f, 50.85f, 34.78f, 50.54f, 32.82f);
        bezierPath.cubicTo(51.93f, 32.69f, 53.5f, 33.25f, 53.98f, 34.54f);
        bezierPath.cubicTo(54.19f, 34.99f, 54.27f, 35.48f, 54.35f, 35.96f);
        bezierPath.lineTo(54.35f, 35.96f);
        bezierPath.close();
        bezierPath.moveTo(49.94f, 40.04f);
        bezierPath.cubicTo(47.77f, 40.15f, 45.66f, 38.79f, 45.12f, 36.84f);
        bezierPath.cubicTo(44.48f, 35.15f, 44.67f, 33.2f, 45.82f, 31.73f);
        bezierPath.cubicTo(46.78f, 30.39f, 48.06f, 29.29f, 49.27f, 28.16f);
        bezierPath.cubicTo(49.43f, 29.05f, 49.59f, 29.93f, 49.74f, 30.82f);
        bezierPath.cubicTo(47.18f, 31.43f, 45.46f, 34.53f, 46.99f, 36.67f);
        bezierPath.cubicTo(47.45f, 37.27f, 48.68f, 38.41f, 49.36f, 37.95f);
        bezierPath.cubicTo(48.41f, 37.41f, 47.64f, 36.49f, 47.81f, 35.42f);
        bezierPath.cubicTo(47.74f, 34.41f, 48.98f, 33.13f, 50.08f, 32.91f);
        bezierPath.cubicTo(50.45f, 35.16f, 50.88f, 37.67f, 51.26f, 39.93f);
        bezierPath.cubicTo(50.83f, 40f, 50.39f, 40.04f, 49.94f, 40.04f);
        bezierPath.lineTo(49.94f, 40.04f);
        bezierPath.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezierPath.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(iconTint);
        canvas.drawPath(bezierPath, paint);
    }
    
    private static class CacheForBtnMediaBass {
        private static Paint paint = new Paint();
        private static RectF backgroundRect = new RectF();
        private static Path backgroundPath = new Path();
        private static RectF bottomBorderRect = new RectF();
        private static Path bottomBorderPath = new Path();
        private static RectF labelRect = new RectF();
        private static Path labelPath = new Path();
        private static RectF rightBorderRect = new RectF();
        private static Path rightBorderPath = new Path();
        private static RectF oval2Rect = new RectF();
        private static Path oval2Path = new Path();
        private static RectF bezier11Rect = new RectF();
        private static Path bezier11Path = new Path();
        private static RectF bezier12Rect = new RectF();
        private static Path bezier12Path = new Path();
        private static RectF bezier13Rect = new RectF();
        private static Path bezier13Path = new Path();
        private static RectF bezier14Rect = new RectF();
        private static Path bezier14Path = new Path();
        private static RectF bezier15Rect = new RectF();
        private static Path bezier15Path = new Path();
        private static RectF bezier16Rect = new RectF();
        private static Path bezier16Path = new Path();
    }
    
    
    public static void drawBtnMediaBass(Canvas canvas, boolean isPressed) {
        // General Declarations
        Paint paint = CacheForBtnMediaBass.paint;
        
        // Local Colors
        int iconUpColor = Color.argb(255, 80, 80, 79);
        int iconDownColor = Color.argb(255, 255, 255, 255);
        int gold = Color.argb(255, 158, 136, 68);
        int lightGold = Color.argb(255, 249, 248, 244);
        
        // Local Variables
        int iconColor = isPressed ? gold : lightGold;
        int iconTint = isPressed ? iconDownColor : iconUpColor;
        
        // background
        RectF backgroundRect = CacheForBtnMediaBass.backgroundRect;
        backgroundRect.set(0f, 0f, 100f, 80f);
        Path backgroundPath = CacheForBtnMediaBass.backgroundPath;
        backgroundPath.reset();
        backgroundPath.addRect(backgroundRect, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(iconColor);
        canvas.drawPath(backgroundPath, paint);
        
        // bottomBorder
        RectF bottomBorderRect = CacheForBtnMediaBass.bottomBorderRect;
        bottomBorderRect.set(-0.5f, 79f, 100.5f, 79f);
        Path bottomBorderPath = CacheForBtnMediaBass.bottomBorderPath;
        bottomBorderPath.reset();
        bottomBorderPath.moveTo(-0.5f, 79f);
        bottomBorderPath.lineTo(100.5f, 79f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(1f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(gold);
        canvas.drawPath(bottomBorderPath, paint);
        canvas.restore();
        
        // Label
        RectF labelRect = CacheForBtnMediaBass.labelRect;
        labelRect.set(39.03f, 54.54f, 64.27f, 63.11f);
        Path labelPath = CacheForBtnMediaBass.labelPath;
        labelPath.reset();
        labelPath.moveTo(42.33f, 63f);
        labelPath.cubicTo(44.13f, 63f, 45.19f, 62.12f, 45.19f, 60.63f);
        labelPath.cubicTo(45.19f, 59.51f, 44.46f, 58.72f, 43.3f, 58.57f);
        labelPath.lineTo(43.3f, 58.48f);
        labelPath.cubicTo(44.12f, 58.33f, 44.76f, 57.53f, 44.76f, 56.65f);
        labelPath.cubicTo(44.76f, 55.36f, 43.81f, 54.54f, 42.26f, 54.54f);
        labelPath.lineTo(39.03f, 54.54f);
        labelPath.lineTo(39.03f, 63f);
        labelPath.lineTo(42.33f, 63f);
        labelPath.close();
        labelPath.moveTo(40.08f, 55.48f);
        labelPath.lineTo(42.04f, 55.48f);
        labelPath.cubicTo(43.09f, 55.48f, 43.7f, 55.97f, 43.7f, 56.84f);
        labelPath.cubicTo(43.7f, 57.73f, 43.05f, 58.19f, 41.77f, 58.19f);
        labelPath.lineTo(40.08f, 58.19f);
        labelPath.lineTo(40.08f, 55.48f);
        labelPath.close();
        labelPath.moveTo(40.08f, 62.07f);
        labelPath.lineTo(40.08f, 59.1f);
        labelPath.lineTo(42.07f, 59.1f);
        labelPath.cubicTo(43.42f, 59.1f, 44.11f, 59.6f, 44.11f, 60.57f);
        labelPath.cubicTo(44.11f, 61.55f, 43.44f, 62.07f, 42.17f, 62.07f);
        labelPath.lineTo(40.08f, 62.07f);
        labelPath.close();
        labelPath.moveTo(48.73f, 62.23f);
        labelPath.cubicTo(48f, 62.23f, 47.45f, 61.85f, 47.45f, 61.21f);
        labelPath.cubicTo(47.45f, 60.57f, 47.88f, 60.24f, 48.84f, 60.18f);
        labelPath.lineTo(50.54f, 60.06f);
        labelPath.lineTo(50.54f, 60.64f);
        labelPath.cubicTo(50.54f, 61.55f, 49.77f, 62.23f, 48.73f, 62.23f);
        labelPath.close();
        labelPath.moveTo(48.54f, 63.11f);
        labelPath.cubicTo(49.39f, 63.11f, 50.08f, 62.74f, 50.49f, 62.07f);
        labelPath.lineTo(50.58f, 62.07f);
        labelPath.lineTo(50.58f, 63f);
        labelPath.lineTo(51.54f, 63f);
        labelPath.lineTo(51.54f, 58.68f);
        labelPath.cubicTo(51.54f, 57.36f, 50.68f, 56.57f, 49.14f, 56.57f);
        labelPath.cubicTo(47.79f, 56.57f, 46.8f, 57.24f, 46.66f, 58.25f);
        labelPath.lineTo(47.68f, 58.25f);
        labelPath.cubicTo(47.82f, 57.76f, 48.35f, 57.47f, 49.11f, 57.47f);
        labelPath.cubicTo(50.05f, 57.47f, 50.54f, 57.9f, 50.54f, 58.68f);
        labelPath.lineTo(50.54f, 59.25f);
        labelPath.lineTo(48.71f, 59.36f);
        labelPath.cubicTo(47.24f, 59.45f, 46.41f, 60.1f, 46.41f, 61.23f);
        labelPath.cubicTo(46.41f, 62.38f, 47.32f, 63.11f, 48.54f, 63.11f);
        labelPath.close();
        labelPath.moveTo(53.26f, 58.41f);
        labelPath.cubicTo(53.26f, 59.33f, 53.8f, 59.84f, 54.98f, 60.12f);
        labelPath.lineTo(56.07f, 60.39f);
        labelPath.cubicTo(56.74f, 60.55f, 57.07f, 60.84f, 57.07f, 61.28f);
        labelPath.cubicTo(57.07f, 61.86f, 56.46f, 62.26f, 55.61f, 62.26f);
        labelPath.cubicTo(54.8f, 62.26f, 54.3f, 61.92f, 54.13f, 61.39f);
        labelPath.lineTo(53.09f, 61.39f);
        labelPath.cubicTo(53.2f, 62.44f, 54.17f, 63.11f, 55.57f, 63.11f);
        labelPath.cubicTo(57.01f, 63.11f, 58.11f, 62.33f, 58.11f, 61.2f);
        labelPath.cubicTo(58.11f, 60.29f, 57.53f, 59.78f, 56.34f, 59.49f);
        labelPath.lineTo(55.37f, 59.26f);
        labelPath.cubicTo(54.63f, 59.07f, 54.27f, 58.8f, 54.27f, 58.37f);
        labelPath.cubicTo(54.27f, 57.81f, 54.86f, 57.43f, 55.61f, 57.43f);
        labelPath.cubicTo(56.37f, 57.43f, 56.86f, 57.76f, 57f, 58.27f);
        labelPath.lineTo(57.99f, 58.27f);
        labelPath.cubicTo(57.86f, 57.23f, 56.94f, 56.57f, 55.62f, 56.57f);
        labelPath.cubicTo(54.27f, 56.57f, 53.26f, 57.36f, 53.26f, 58.41f);
        labelPath.close();
        labelPath.moveTo(59.42f, 58.41f);
        labelPath.cubicTo(59.42f, 59.33f, 59.96f, 59.84f, 61.15f, 60.12f);
        labelPath.lineTo(62.23f, 60.39f);
        labelPath.cubicTo(62.9f, 60.55f, 63.23f, 60.84f, 63.23f, 61.28f);
        labelPath.cubicTo(63.23f, 61.86f, 62.62f, 62.26f, 61.77f, 62.26f);
        labelPath.cubicTo(60.96f, 62.26f, 60.46f, 61.92f, 60.29f, 61.39f);
        labelPath.lineTo(59.25f, 61.39f);
        labelPath.cubicTo(59.37f, 62.44f, 60.33f, 63.11f, 61.74f, 63.11f);
        labelPath.cubicTo(63.17f, 63.11f, 64.27f, 62.33f, 64.27f, 61.2f);
        labelPath.cubicTo(64.27f, 60.29f, 63.7f, 59.78f, 62.51f, 59.49f);
        labelPath.lineTo(61.53f, 59.26f);
        labelPath.cubicTo(60.79f, 59.07f, 60.44f, 58.8f, 60.44f, 58.37f);
        labelPath.cubicTo(60.44f, 57.81f, 61.02f, 57.43f, 61.77f, 57.43f);
        labelPath.cubicTo(62.54f, 57.43f, 63.03f, 57.76f, 63.16f, 58.27f);
        labelPath.lineTo(64.16f, 58.27f);
        labelPath.cubicTo(64.02f, 57.23f, 63.1f, 56.57f, 61.78f, 56.57f);
        labelPath.cubicTo(60.44f, 56.57f, 59.42f, 57.36f, 59.42f, 58.41f);
        labelPath.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(iconTint);
        canvas.drawPath(labelPath, paint);
        
        // rightBorder
        RectF rightBorderRect = CacheForBtnMediaBass.rightBorderRect;
        rightBorderRect.set(99.5f, -0.5f, 99.5f, 79.5f);
        Path rightBorderPath = CacheForBtnMediaBass.rightBorderPath;
        rightBorderPath.reset();
        rightBorderPath.moveTo(99.5f, -0.5f);
        rightBorderPath.lineTo(99.5f, 79.5f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(1f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(gold);
        canvas.drawPath(rightBorderPath, paint);
        canvas.restore();
        
        // Oval 2
        RectF oval2Rect = CacheForBtnMediaBass.oval2Rect;
        oval2Rect.set(47.4f, 30.2f, 51.4f, 34.2f);
        Path oval2Path = CacheForBtnMediaBass.oval2Path;
        oval2Path.reset();
        oval2Path.addOval(oval2Rect, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(1f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(iconTint);
        canvas.drawPath(oval2Path, paint);
        canvas.restore();
        
        // Bezier 11
        RectF bezier11Rect = CacheForBtnMediaBass.bezier11Rect;
        bezier11Rect.set(42.35f, 36.46f, 45.17f, 39.29f);
        Path bezier11Path = CacheForBtnMediaBass.bezier11Path;
        bezier11Path.reset();
        bezier11Path.moveTo(42.35f, 36.46f);
        bezier11Path.lineTo(45.17f, 39.29f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(1f);
        paint.setStrokeJoin(Paint.Join.ROUND);
        paint.setStrokeCap(Paint.Cap.ROUND);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(iconTint);
        canvas.drawPath(bezier11Path, paint);
        canvas.restore();
        
        // Bezier 12
        RectF bezier12Rect = CacheForBtnMediaBass.bezier12Rect;
        bezier12Rect.set(39.5f, 19.5f, 62.14f, 42.14f);
        Path bezier12Path = CacheForBtnMediaBass.bezier12Path;
        bezier12Path.reset();
        bezier12Path.moveTo(59.64f, 19.5f);
        bezier12Path.lineTo(55.64f, 23.5f);
        bezier12Path.lineTo(56.14f, 24f);
        bezier12Path.lineTo(52.14f, 28f);
        bezier12Path.cubicTo(49.31f, 26.03f, 45.98f, 27.45f, 45.64f, 30.5f);
        bezier12Path.cubicTo(39.48f, 29.18f, 37.6f, 35.96f, 41.64f, 40f);
        bezier12Path.cubicTo(45.7f, 44.06f, 52.45f, 42.13f, 51.14f, 36f);
        bezier12Path.cubicTo(54.18f, 35.66f, 55.62f, 32.35f, 53.64f, 29.5f);
        bezier12Path.lineTo(57.64f, 25.5f);
        bezier12Path.lineTo(58.14f, 26f);
        bezier12Path.lineTo(62.14f, 22f);
        bezier12Path.lineTo(59.64f, 19.5f);
        bezier12Path.lineTo(59.64f, 19.5f);
        bezier12Path.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(1f);
        paint.setStrokeJoin(Paint.Join.ROUND);
        paint.setStrokeCap(Paint.Cap.ROUND);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(iconTint);
        canvas.drawPath(bezier12Path, paint);
        canvas.restore();
        
        // Bezier 13
        RectF bezier13Rect = CacheForBtnMediaBass.bezier13Rect;
        bezier13Rect.set(57.64f, 19.5f, 58.64f, 20.5f);
        Path bezier13Path = CacheForBtnMediaBass.bezier13Path;
        bezier13Path.reset();
        bezier13Path.moveTo(57.64f, 19.5f);
        bezier13Path.lineTo(58.64f, 20.5f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(1f);
        paint.setStrokeJoin(Paint.Join.ROUND);
        paint.setStrokeCap(Paint.Cap.ROUND);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(iconTint);
        canvas.drawPath(bezier13Path, paint);
        canvas.restore();
        
        // Bezier 14
        RectF bezier14Rect = CacheForBtnMediaBass.bezier14Rect;
        bezier14Rect.set(56.14f, 21f, 57.14f, 22f);
        Path bezier14Path = CacheForBtnMediaBass.bezier14Path;
        bezier14Path.reset();
        bezier14Path.moveTo(56.14f, 21f);
        bezier14Path.lineTo(57.14f, 22f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(1f);
        paint.setStrokeJoin(Paint.Join.ROUND);
        paint.setStrokeCap(Paint.Cap.ROUND);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(iconTint);
        canvas.drawPath(bezier14Path, paint);
        canvas.restore();
        
        // Bezier 15
        RectF bezier15Rect = CacheForBtnMediaBass.bezier15Rect;
        bezier15Rect.set(61.14f, 23f, 62.14f, 24f);
        Path bezier15Path = CacheForBtnMediaBass.bezier15Path;
        bezier15Path.reset();
        bezier15Path.moveTo(62.14f, 24f);
        bezier15Path.lineTo(61.14f, 23f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(1f);
        paint.setStrokeJoin(Paint.Join.ROUND);
        paint.setStrokeCap(Paint.Cap.ROUND);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(iconTint);
        canvas.drawPath(bezier15Path, paint);
        canvas.restore();
        
        // Bezier 16
        RectF bezier16Rect = CacheForBtnMediaBass.bezier16Rect;
        bezier16Rect.set(59.64f, 24.5f, 60.64f, 25.5f);
        Path bezier16Path = CacheForBtnMediaBass.bezier16Path;
        bezier16Path.reset();
        bezier16Path.moveTo(60.64f, 25.5f);
        bezier16Path.lineTo(59.64f, 24.5f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(1f);
        paint.setStrokeJoin(Paint.Join.ROUND);
        paint.setStrokeCap(Paint.Cap.ROUND);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(iconTint);
        canvas.drawPath(bezier16Path, paint);
        canvas.restore();
    }
    
    private static class CacheForBtnMediasEasy {
        private static Paint paint = new Paint();
        private static RectF backgroundRect = new RectF();
        private static Path backgroundPath = new Path();
        private static RectF rightBorderRect = new RectF();
        private static Path rightBorderPath = new Path();
        private static RectF labelRect = new RectF();
        private static Path labelPath = new Path();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bottomBorderRect = new RectF();
        private static Path bottomBorderPath = new Path();
    }
    
    
    public static void drawBtnMediasEasy(Canvas canvas, boolean isPressed) {
        // General Declarations
        Paint paint = CacheForBtnMediasEasy.paint;
        
        // Local Colors
        int iconUpColor = Color.argb(255, 80, 80, 79);
        int gold = Color.argb(255, 158, 136, 68);
        int iconDownColor = Color.argb(255, 255, 255, 255);
        int lightGold = Color.argb(255, 249, 248, 244);
        
        // Local Variables
        int iconColor = isPressed ? gold : lightGold;
        int iconTint = isPressed ? iconDownColor : iconUpColor;
        
        // background
        RectF backgroundRect = CacheForBtnMediasEasy.backgroundRect;
        backgroundRect.set(0f, 0f, 100f, 80f);
        Path backgroundPath = CacheForBtnMediasEasy.backgroundPath;
        backgroundPath.reset();
        backgroundPath.addRect(backgroundRect, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(iconColor);
        canvas.drawPath(backgroundPath, paint);
        
        // rightBorder
        RectF rightBorderRect = CacheForBtnMediasEasy.rightBorderRect;
        rightBorderRect.set(99.5f, -0.5f, 99.5f, 79.5f);
        Path rightBorderPath = CacheForBtnMediasEasy.rightBorderPath;
        rightBorderPath.reset();
        rightBorderPath.moveTo(99.5f, -0.5f);
        rightBorderPath.lineTo(99.5f, 79.5f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(1f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(gold);
        canvas.drawPath(rightBorderPath, paint);
        canvas.restore();
        
        // Label
        RectF labelRect = CacheForBtnMediasEasy.labelRect;
        labelRect.set(15.76f, 54.18f, 84.68f, 65.29f);
        Path labelPath = CacheForBtnMediasEasy.labelPath;
        labelPath.reset();
        labelPath.moveTo(21f, 62.05f);
        labelPath.lineTo(16.82f, 62.05f);
        labelPath.lineTo(16.82f, 59.14f);
        labelPath.lineTo(20.79f, 59.14f);
        labelPath.lineTo(20.79f, 58.21f);
        labelPath.lineTo(16.82f, 58.21f);
        labelPath.lineTo(16.82f, 55.49f);
        labelPath.lineTo(21f, 55.49f);
        labelPath.lineTo(21f, 54.54f);
        labelPath.lineTo(15.76f, 54.54f);
        labelPath.lineTo(15.76f, 63f);
        labelPath.lineTo(21f, 63f);
        labelPath.lineTo(21f, 62.05f);
        labelPath.close();
        labelPath.moveTo(24.73f, 62.23f);
        labelPath.cubicTo(24f, 62.23f, 23.45f, 61.85f, 23.45f, 61.21f);
        labelPath.cubicTo(23.45f, 60.57f, 23.87f, 60.24f, 24.83f, 60.18f);
        labelPath.lineTo(26.53f, 60.06f);
        labelPath.lineTo(26.53f, 60.64f);
        labelPath.cubicTo(26.53f, 61.55f, 25.77f, 62.23f, 24.73f, 62.23f);
        labelPath.close();
        labelPath.moveTo(24.54f, 63.11f);
        labelPath.cubicTo(25.38f, 63.11f, 26.08f, 62.74f, 26.49f, 62.07f);
        labelPath.lineTo(26.58f, 62.07f);
        labelPath.lineTo(26.58f, 63f);
        labelPath.lineTo(27.54f, 63f);
        labelPath.lineTo(27.54f, 58.68f);
        labelPath.cubicTo(27.54f, 57.36f, 26.68f, 56.57f, 25.14f, 56.57f);
        labelPath.cubicTo(23.79f, 56.57f, 22.79f, 57.24f, 22.66f, 58.25f);
        labelPath.lineTo(23.68f, 58.25f);
        labelPath.cubicTo(23.82f, 57.76f, 24.35f, 57.47f, 25.1f, 57.47f);
        labelPath.cubicTo(26.05f, 57.47f, 26.53f, 57.9f, 26.53f, 58.68f);
        labelPath.lineTo(26.53f, 59.25f);
        labelPath.lineTo(24.71f, 59.36f);
        labelPath.cubicTo(23.24f, 59.45f, 22.41f, 60.1f, 22.41f, 61.23f);
        labelPath.cubicTo(22.41f, 62.38f, 23.32f, 63.11f, 24.54f, 63.11f);
        labelPath.close();
        labelPath.moveTo(29.26f, 58.41f);
        labelPath.cubicTo(29.26f, 59.33f, 29.8f, 59.84f, 30.98f, 60.12f);
        labelPath.lineTo(32.06f, 60.39f);
        labelPath.cubicTo(32.74f, 60.55f, 33.07f, 60.84f, 33.07f, 61.28f);
        labelPath.cubicTo(33.07f, 61.86f, 32.46f, 62.26f, 31.61f, 62.26f);
        labelPath.cubicTo(30.8f, 62.26f, 30.29f, 61.92f, 30.13f, 61.39f);
        labelPath.lineTo(29.09f, 61.39f);
        labelPath.cubicTo(29.2f, 62.44f, 30.17f, 63.11f, 31.57f, 63.11f);
        labelPath.cubicTo(33.01f, 63.11f, 34.1f, 62.33f, 34.1f, 61.2f);
        labelPath.cubicTo(34.1f, 60.29f, 33.53f, 59.78f, 32.34f, 59.49f);
        labelPath.lineTo(31.37f, 59.26f);
        labelPath.cubicTo(30.62f, 59.07f, 30.27f, 58.8f, 30.27f, 58.37f);
        labelPath.cubicTo(30.27f, 57.81f, 30.86f, 57.43f, 31.61f, 57.43f);
        labelPath.cubicTo(32.37f, 57.43f, 32.86f, 57.76f, 33f, 58.27f);
        labelPath.lineTo(33.99f, 58.27f);
        labelPath.cubicTo(33.86f, 57.23f, 32.94f, 56.57f, 31.61f, 56.57f);
        labelPath.cubicTo(30.27f, 56.57f, 29.26f, 57.36f, 29.26f, 58.41f);
        labelPath.close();
        labelPath.moveTo(36.05f, 65.29f);
        labelPath.cubicTo(37.17f, 65.29f, 37.67f, 64.85f, 38.21f, 63.39f);
        labelPath.lineTo(40.68f, 56.68f);
        labelPath.lineTo(39.61f, 56.68f);
        labelPath.lineTo(37.88f, 61.88f);
        labelPath.lineTo(37.78f, 61.88f);
        labelPath.lineTo(36.05f, 56.68f);
        labelPath.lineTo(34.96f, 56.68f);
        labelPath.lineTo(37.3f, 63.01f);
        labelPath.lineTo(37.18f, 63.38f);
        labelPath.cubicTo(36.92f, 64.14f, 36.6f, 64.42f, 36.02f, 64.42f);
        labelPath.cubicTo(35.88f, 64.42f, 35.72f, 64.41f, 35.6f, 64.39f);
        labelPath.lineTo(35.6f, 65.25f);
        labelPath.cubicTo(35.74f, 65.27f, 35.91f, 65.29f, 36.05f, 65.29f);
        labelPath.close();
        labelPath.moveTo(48.95f, 63.2f);
        labelPath.cubicTo(50.74f, 63.2f, 52.08f, 62.2f, 52.36f, 60.64f);
        labelPath.lineTo(51.29f, 60.64f);
        labelPath.cubicTo(51.02f, 61.62f, 50.12f, 62.23f, 48.95f, 62.23f);
        labelPath.cubicTo(47.32f, 62.23f, 46.3f, 60.9f, 46.3f, 58.78f);
        labelPath.cubicTo(46.3f, 56.65f, 47.32f, 55.32f, 48.94f, 55.32f);
        labelPath.cubicTo(50.11f, 55.32f, 51.01f, 56f, 51.29f, 57.09f);
        labelPath.lineTo(52.36f, 57.09f);
        labelPath.cubicTo(52.11f, 55.46f, 50.72f, 54.35f, 48.94f, 54.35f);
        labelPath.cubicTo(46.64f, 54.35f, 45.21f, 56.04f, 45.21f, 58.78f);
        labelPath.cubicTo(45.21f, 61.5f, 46.65f, 63.2f, 48.95f, 63.2f);
        labelPath.close();
        labelPath.moveTo(54.06f, 63f);
        labelPath.lineTo(55.07f, 63f);
        labelPath.lineTo(55.07f, 59.26f);
        labelPath.cubicTo(55.07f, 58.2f, 55.69f, 57.48f, 56.82f, 57.48f);
        labelPath.cubicTo(57.78f, 57.48f, 58.28f, 58.04f, 58.28f, 59.16f);
        labelPath.lineTo(58.28f, 63f);
        labelPath.lineTo(59.29f, 63f);
        labelPath.lineTo(59.29f, 58.91f);
        labelPath.cubicTo(59.29f, 57.43f, 58.44f, 56.57f, 57.11f, 56.57f);
        labelPath.cubicTo(56.14f, 56.57f, 55.48f, 56.98f, 55.16f, 57.68f);
        labelPath.lineTo(55.07f, 57.68f);
        labelPath.lineTo(55.07f, 54.18f);
        labelPath.lineTo(54.06f, 54.18f);
        labelPath.lineTo(54.06f, 63f);
        labelPath.close();
        labelPath.moveTo(63.72f, 62.2f);
        labelPath.cubicTo(62.53f, 62.2f, 61.85f, 61.34f, 61.85f, 59.84f);
        labelPath.cubicTo(61.85f, 58.34f, 62.53f, 57.48f, 63.72f, 57.48f);
        labelPath.cubicTo(64.92f, 57.48f, 65.59f, 58.34f, 65.59f, 59.84f);
        labelPath.cubicTo(65.59f, 61.34f, 64.92f, 62.2f, 63.72f, 62.2f);
        labelPath.close();
        labelPath.moveTo(63.72f, 63.11f);
        labelPath.cubicTo(65.52f, 63.11f, 66.63f, 61.87f, 66.63f, 59.84f);
        labelPath.cubicTo(66.63f, 57.81f, 65.52f, 56.57f, 63.72f, 56.57f);
        labelPath.cubicTo(61.92f, 56.57f, 60.81f, 57.81f, 60.81f, 59.84f);
        labelPath.cubicTo(60.81f, 61.87f, 61.92f, 63.11f, 63.72f, 63.11f);
        labelPath.close();
        labelPath.moveTo(68.22f, 63f);
        labelPath.lineTo(69.22f, 63f);
        labelPath.lineTo(69.22f, 59.09f);
        labelPath.cubicTo(69.22f, 58.2f, 69.92f, 57.55f, 70.88f, 57.55f);
        labelPath.cubicTo(71.08f, 57.55f, 71.45f, 57.59f, 71.53f, 57.61f);
        labelPath.lineTo(71.53f, 56.6f);
        labelPath.cubicTo(71.4f, 56.58f, 71.19f, 56.57f, 71.02f, 56.57f);
        labelPath.cubicTo(70.19f, 56.57f, 69.46f, 57.01f, 69.27f, 57.62f);
        labelPath.lineTo(69.18f, 57.62f);
        labelPath.lineTo(69.18f, 56.68f);
        labelPath.lineTo(68.22f, 56.68f);
        labelPath.lineTo(68.22f, 63f);
        labelPath.close();
        labelPath.moveTo(74.95f, 63.11f);
        labelPath.cubicTo(75.82f, 63.11f, 76.57f, 62.7f, 76.97f, 61.99f);
        labelPath.lineTo(77.06f, 61.99f);
        labelPath.lineTo(77.06f, 63f);
        labelPath.lineTo(78.03f, 63f);
        labelPath.lineTo(78.03f, 54.18f);
        labelPath.lineTo(77.02f, 54.18f);
        labelPath.lineTo(77.02f, 57.68f);
        labelPath.lineTo(76.93f, 57.68f);
        labelPath.cubicTo(76.57f, 56.99f, 75.83f, 56.57f, 74.95f, 56.57f);
        labelPath.cubicTo(73.34f, 56.57f, 72.29f, 57.86f, 72.29f, 59.84f);
        labelPath.cubicTo(72.29f, 61.83f, 73.33f, 63.11f, 74.95f, 63.11f);
        labelPath.close();
        labelPath.moveTo(75.18f, 57.48f);
        labelPath.cubicTo(76.33f, 57.48f, 77.04f, 58.39f, 77.04f, 59.84f);
        labelPath.cubicTo(77.04f, 61.3f, 76.33f, 62.2f, 75.18f, 62.2f);
        labelPath.cubicTo(74.03f, 62.2f, 73.34f, 61.32f, 73.34f, 59.84f);
        labelPath.cubicTo(73.34f, 58.37f, 74.04f, 57.48f, 75.18f, 57.48f);
        labelPath.close();
        labelPath.moveTo(79.84f, 58.41f);
        labelPath.cubicTo(79.84f, 59.33f, 80.38f, 59.84f, 81.56f, 60.12f);
        labelPath.lineTo(82.64f, 60.39f);
        labelPath.cubicTo(83.32f, 60.55f, 83.64f, 60.84f, 83.64f, 61.28f);
        labelPath.cubicTo(83.64f, 61.86f, 83.04f, 62.26f, 82.19f, 62.26f);
        labelPath.cubicTo(81.38f, 62.26f, 80.87f, 61.92f, 80.7f, 61.39f);
        labelPath.lineTo(79.67f, 61.39f);
        labelPath.cubicTo(79.78f, 62.44f, 80.74f, 63.11f, 82.15f, 63.11f);
        labelPath.cubicTo(83.59f, 63.11f, 84.68f, 62.33f, 84.68f, 61.2f);
        labelPath.cubicTo(84.68f, 60.29f, 84.11f, 59.78f, 82.92f, 59.49f);
        labelPath.lineTo(81.95f, 59.26f);
        labelPath.cubicTo(81.2f, 59.07f, 80.85f, 58.8f, 80.85f, 58.37f);
        labelPath.cubicTo(80.85f, 57.81f, 81.44f, 57.43f, 82.19f, 57.43f);
        labelPath.cubicTo(82.95f, 57.43f, 83.44f, 57.76f, 83.57f, 58.27f);
        labelPath.lineTo(84.57f, 58.27f);
        labelPath.cubicTo(84.44f, 57.23f, 83.52f, 56.57f, 82.19f, 56.57f);
        labelPath.cubicTo(80.85f, 56.57f, 79.84f, 57.36f, 79.84f, 58.41f);
        labelPath.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(iconTint);
        canvas.drawPath(labelPath, paint);
        
        // Bezier
        RectF bezierRect = CacheForBtnMediasEasy.bezierRect;
        bezierRect.set(36.63f, 10.5f, 63.99f, 44.5f);
        Path bezierPath = CacheForBtnMediasEasy.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(60.87f, 12.65f);
        bezierPath.cubicTo(58.9f, 11.21f, 55.7f, 10.22f, 50.53f, 10.57f);
        bezierPath.cubicTo(38f, 11.44f, 37.35f, 18.05f, 36.9f, 19.5f);
        bezierPath.cubicTo(36.44f, 20.95f, 36.37f, 28.47f, 38.33f, 34.74f);
        bezierPath.cubicTo(38.45f, 35.12f, 38.57f, 35.49f, 38.69f, 35.85f);
        bezierPath.cubicTo(46.48f, 35.34f, 50.21f, 30.78f, 50.06f, 27.31f);
        bezierPath.cubicTo(49.91f, 23.63f, 42.77f, 24.83f, 42.77f, 24.83f);
        bezierPath.lineTo(45.36f, 15.31f);
        bezierPath.lineTo(60.87f, 12.65f);
        bezierPath.close();
        bezierPath.moveTo(63.03f, 15.1f);
        bezierPath.cubicTo(63.86f, 16.62f, 63.99f, 18.13f, 63.99f, 18.96f);
        bezierPath.cubicTo(63.99f, 21.18f, 64.26f, 24.08f, 58.24f, 31.43f);
        bezierPath.cubicTo(52.22f, 38.78f, 46.05f, 45.19f, 44.51f, 44.44f);
        bezierPath.cubicTo(42.89f, 43.66f, 41.35f, 42.14f, 39.86f, 38.85f);
        bezierPath.cubicTo(48.44f, 37.24f, 55.17f, 33.96f, 56.66f, 27.55f);
        bezierPath.cubicTo(58.22f, 20.85f, 50.23f, 21.88f, 50.23f, 21.88f);
        bezierPath.lineTo(51.19f, 17f);
        bezierPath.lineTo(63.03f, 15.1f);
        bezierPath.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(1f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(iconTint);
        canvas.drawPath(bezierPath, paint);
        canvas.restore();
        
        // bottomBorder
        RectF bottomBorderRect = CacheForBtnMediasEasy.bottomBorderRect;
        bottomBorderRect.set(-0.5f, 79f, 100.5f, 79f);
        Path bottomBorderPath = CacheForBtnMediasEasy.bottomBorderPath;
        bottomBorderPath.reset();
        bottomBorderPath.moveTo(-0.5f, 79f);
        bottomBorderPath.lineTo(100.5f, 79f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(1f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(gold);
        canvas.drawPath(bottomBorderPath, paint);
        canvas.restore();
    }
    
    private static class CacheForBtnMediaSongs {
        private static Paint paint = new Paint();
        private static RectF backgroundRect = new RectF();
        private static Path backgroundPath = new Path();
        private static RectF rightBorderRect = new RectF();
        private static Path rightBorderPath = new Path();
        private static RectF bottomBorderRect = new RectF();
        private static Path bottomBorderPath = new Path();
        private static RectF text2Rect = new RectF();
        private static Path text2Path = new Path();
        private static TextPaint text2TextPaint = new TextPaint();
        private static PaintCodeStaticLayout text2StaticLayout = new PaintCodeStaticLayout();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
        private static RectF bezier4Rect = new RectF();
        private static Path bezier4Path = new Path();
    }
    
    
    public static void drawBtnMediaSongs(Canvas canvas, Context context, boolean isPressed) {
        // General Declarations
        Paint paint = CacheForBtnMediaSongs.paint;
        
        // Local Colors
        int iconUpColor = Color.argb(255, 80, 80, 79);
        int iconDownColor = Color.argb(255, 255, 255, 255);
        int lightGold = Color.argb(255, 249, 248, 244);
        int gold = Color.argb(255, 158, 136, 68);
        
        // Local Variables
        int iconColor = isPressed ? gold : lightGold;
        int iconTint = isPressed ? iconDownColor : iconUpColor;
        
        // background
        RectF backgroundRect = CacheForBtnMediaSongs.backgroundRect;
        backgroundRect.set(0f, 0f, 100f, 80f);
        Path backgroundPath = CacheForBtnMediaSongs.backgroundPath;
        backgroundPath.reset();
        backgroundPath.addRect(backgroundRect, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(iconColor);
        canvas.drawPath(backgroundPath, paint);
        
        // rightBorder
        RectF rightBorderRect = CacheForBtnMediaSongs.rightBorderRect;
        rightBorderRect.set(99.5f, -0.5f, 99.5f, 79.5f);
        Path rightBorderPath = CacheForBtnMediaSongs.rightBorderPath;
        rightBorderPath.reset();
        rightBorderPath.moveTo(99.5f, -0.5f);
        rightBorderPath.lineTo(99.5f, 79.5f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(1f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(gold);
        canvas.drawPath(rightBorderPath, paint);
        canvas.restore();
        
        // bottomBorder
        RectF bottomBorderRect = CacheForBtnMediaSongs.bottomBorderRect;
        bottomBorderRect.set(-0.5f, 79f, 100.5f, 79f);
        Path bottomBorderPath = CacheForBtnMediaSongs.bottomBorderPath;
        bottomBorderPath.reset();
        bottomBorderPath.moveTo(-0.5f, 79f);
        bottomBorderPath.lineTo(100.5f, 79f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(1f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(gold);
        canvas.drawPath(bottomBorderPath, paint);
        canvas.restore();
        
        // Text 2
        RectF text2Rect = CacheForBtnMediaSongs.text2Rect;
        text2Rect.set(20.98f, 50f, 79.41f, 70f);
        Path text2Path = CacheForBtnMediaSongs.text2Path;
        text2Path.reset();
        text2Path.moveTo(text2Rect.left, text2Rect.top);
        text2Path.lineTo(text2Rect.right, text2Rect.top);
        text2Path.lineTo(text2Rect.right, text2Rect.bottom);
        text2Path.lineTo(text2Rect.left, text2Rect.bottom);
        text2Path.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(iconColor);
        canvas.drawPath(text2Path, paint);
        TextPaint text2TextPaint = CacheForBtnMediaSongs.text2TextPaint;
        text2TextPaint.reset();
        text2TextPaint.setFlags(Paint.ANTI_ALIAS_FLAG);
        text2TextPaint.setColor(iconTint);
        text2TextPaint.setTypeface(Typeface.createFromAsset(context.getAssets(), "SF-UI-Text-Regular.otf"));
        text2TextPaint.setTextSize(12f);
        StaticLayout text2StaticLayout = CacheForBtnMediaSongs.text2StaticLayout.get((int) text2Rect.width(), Layout.Alignment.ALIGN_CENTER, "Songs", text2TextPaint);
        canvas.save();
        canvas.clipRect(text2Rect);
        canvas.translate(text2Rect.left, text2Rect.top + (text2Rect.height() - text2StaticLayout.getHeight()) / 2f);
        text2StaticLayout.draw(canvas);
        canvas.restore();
        
        // Group
        {
            // Bezier
            RectF bezierRect = CacheForBtnMediaSongs.bezierRect;
            bezierRect.set(40.5f, 35f, 46.5f, 41f);
            Path bezierPath = CacheForBtnMediaSongs.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(46.5f, 38f);
            bezierPath.cubicTo(46.5f, 39.5f, 45.16f, 41f, 43.5f, 41f);
            bezierPath.cubicTo(41.84f, 41f, 40.5f, 39.66f, 40.5f, 38f);
            bezierPath.cubicTo(40.5f, 36.34f, 41.84f, 35f, 43.5f, 35f);
            bezierPath.lineTo(46.5f, 35f);
            bezierPath.lineTo(46.5f, 38f);
            bezierPath.lineTo(46.5f, 38f);
            bezierPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(iconTint);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
            
            // Bezier 2
            RectF bezier2Rect = CacheForBtnMediaSongs.bezier2Rect;
            bezier2Rect.set(51.5f, 31f, 57.5f, 37f);
            Path bezier2Path = CacheForBtnMediaSongs.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(57.5f, 34f);
            bezier2Path.cubicTo(57.5f, 35.5f, 56.16f, 37f, 54.5f, 37f);
            bezier2Path.cubicTo(52.84f, 37f, 51.5f, 35.66f, 51.5f, 34f);
            bezier2Path.cubicTo(51.5f, 32.34f, 52.84f, 31f, 54.5f, 31f);
            bezier2Path.lineTo(57.5f, 31f);
            bezier2Path.lineTo(57.5f, 34f);
            bezier2Path.lineTo(57.5f, 34f);
            bezier2Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(iconTint);
            canvas.drawPath(bezier2Path, paint);
            canvas.restore();
            
            // Bezier 3
            RectF bezier3Rect = CacheForBtnMediaSongs.bezier3Rect;
            bezier3Rect.set(46.5f, 18.5f, 57.5f, 36f);
            Path bezier3Path = CacheForBtnMediaSongs.bezier3Path;
            bezier3Path.reset();
            bezier3Path.moveTo(46.5f, 36f);
            bezier3Path.lineTo(46.5f, 23f);
            bezier3Path.lineTo(57.5f, 18.5f);
            bezier3Path.lineTo(57.5f, 33f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(iconTint);
            canvas.drawPath(bezier3Path, paint);
            canvas.restore();
            
            // Bezier 4
            RectF bezier4Rect = CacheForBtnMediaSongs.bezier4Rect;
            bezier4Rect.set(46.5f, 22f, 57.5f, 26.5f);
            Path bezier4Path = CacheForBtnMediaSongs.bezier4Path;
            bezier4Path.reset();
            bezier4Path.moveTo(46.5f, 26.5f);
            bezier4Path.lineTo(57.5f, 22f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(iconTint);
            canvas.drawPath(bezier4Path, paint);
            canvas.restore();
        }
    }
    
    private static class CacheForBtnMediaJamAlongs {
        private static Paint paint = new Paint();
        private static RectF backgroundRect = new RectF();
        private static Path backgroundPath = new Path();
        private static RectF rightBorderRect = new RectF();
        private static Path rightBorderPath = new Path();
        private static RectF bottomBorderRect = new RectF();
        private static Path bottomBorderPath = new Path();
        private static RectF text2Rect = new RectF();
        private static Path text2Path = new Path();
        private static TextPaint text2TextPaint = new TextPaint();
        private static PaintCodeStaticLayout text2StaticLayout = new PaintCodeStaticLayout();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    
    public static void drawBtnMediaJamAlongs(Canvas canvas, Context context, boolean isPressed) {
        // General Declarations
        Paint paint = CacheForBtnMediaJamAlongs.paint;
        
        // Local Colors
        int iconUpColor = Color.argb(255, 80, 80, 79);
        int iconDownColor = Color.argb(255, 255, 255, 255);
        int lightGold = Color.argb(255, 249, 248, 244);
        int gold = Color.argb(255, 158, 136, 68);
        
        // Local Variables
        int iconColor = isPressed ? gold : lightGold;
        int iconTint = isPressed ? iconDownColor : iconUpColor;
        
        // background
        RectF backgroundRect = CacheForBtnMediaJamAlongs.backgroundRect;
        backgroundRect.set(0f, 0f, 100f, 80f);
        Path backgroundPath = CacheForBtnMediaJamAlongs.backgroundPath;
        backgroundPath.reset();
        backgroundPath.addRect(backgroundRect, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(iconColor);
        canvas.drawPath(backgroundPath, paint);
        
        // rightBorder
        RectF rightBorderRect = CacheForBtnMediaJamAlongs.rightBorderRect;
        rightBorderRect.set(99.5f, -0.5f, 99.5f, 79.5f);
        Path rightBorderPath = CacheForBtnMediaJamAlongs.rightBorderPath;
        rightBorderPath.reset();
        rightBorderPath.moveTo(99.5f, -0.5f);
        rightBorderPath.lineTo(99.5f, 79.5f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(1f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(gold);
        canvas.drawPath(rightBorderPath, paint);
        canvas.restore();
        
        // bottomBorder
        RectF bottomBorderRect = CacheForBtnMediaJamAlongs.bottomBorderRect;
        bottomBorderRect.set(-0.5f, 79f, 100.5f, 79f);
        Path bottomBorderPath = CacheForBtnMediaJamAlongs.bottomBorderPath;
        bottomBorderPath.reset();
        bottomBorderPath.moveTo(-0.5f, 79f);
        bottomBorderPath.lineTo(100.5f, 79f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(1f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(gold);
        canvas.drawPath(bottomBorderPath, paint);
        canvas.restore();
        
        // Text 2
        RectF text2Rect = CacheForBtnMediaJamAlongs.text2Rect;
        text2Rect.set(15.33f, 50.09f, 83.3f, 70.5f);
        Path text2Path = CacheForBtnMediaJamAlongs.text2Path;
        text2Path.reset();
        text2Path.moveTo(text2Rect.left, text2Rect.top);
        text2Path.lineTo(text2Rect.right, text2Rect.top);
        text2Path.lineTo(text2Rect.right, text2Rect.bottom);
        text2Path.lineTo(text2Rect.left, text2Rect.bottom);
        text2Path.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(iconColor);
        canvas.drawPath(text2Path, paint);
        TextPaint text2TextPaint = CacheForBtnMediaJamAlongs.text2TextPaint;
        text2TextPaint.reset();
        text2TextPaint.setFlags(Paint.ANTI_ALIAS_FLAG);
        text2TextPaint.setColor(iconTint);
        text2TextPaint.setTypeface(Typeface.createFromAsset(context.getAssets(), "SF-UI-Text-Regular.otf"));
        text2TextPaint.setTextSize(12f);
        StaticLayout text2StaticLayout = CacheForBtnMediaJamAlongs.text2StaticLayout.get((int) text2Rect.width(), Layout.Alignment.ALIGN_CENTER, "Jam Alongs", text2TextPaint);
        canvas.save();
        canvas.clipRect(text2Rect);
        canvas.translate(text2Rect.left, text2Rect.top + (text2Rect.height() - text2StaticLayout.getHeight()) / 2f);
        text2StaticLayout.draw(canvas);
        canvas.restore();
        
        // Group
        {
            // Bezier 2
            RectF bezier2Rect = CacheForBtnMediaJamAlongs.bezier2Rect;
            bezier2Rect.set(36.6f, 12.79f, 63.5f, 44.04f);
            Path bezier2Path = CacheForBtnMediaJamAlongs.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(47.27f, 42.78f);
            bezier2Path.cubicTo(42.35f, 38.27f, 36.73f, 27.8f, 36.65f, 23.29f);
            bezier2Path.cubicTo(36.18f, 18.02f, 38.92f, 15.63f, 41.62f, 14.46f);
            bezier2Path.cubicTo(43.51f, 13.7f, 45.12f, 12.75f, 49.53f, 12.79f);
            bezier2Path.cubicTo(53.94f, 12.82f, 55.23f, 13f, 58.61f, 14.32f);
            bezier2Path.cubicTo(61.46f, 15.62f, 64.64f, 18.71f, 63.1f, 25.04f);
            bezier2Path.cubicTo(61.64f, 31.59f, 55.55f, 40.2f, 52.74f, 42.89f);
            bezier2Path.cubicTo(51f, 44.31f, 48.99f, 44.57f, 47.27f, 42.78f);
            bezier2Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(iconTint);
            canvas.drawPath(bezier2Path, paint);
            canvas.restore();
            
            // Bezier
            RectF bezierRect = CacheForBtnMediaJamAlongs.bezierRect;
            bezierRect.set(45.57f, 19.41f, 56.13f, 32.48f);
            Path bezierPath = CacheForBtnMediaJamAlongs.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(55.63f, 26.75f);
            bezierPath.cubicTo(55.36f, 26.97f, 46.71f, 32.12f, 46.67f, 32.16f);
            bezierPath.cubicTo(46.22f, 32.5f, 45.6f, 32.8f, 45.63f, 31.74f);
            bezierPath.cubicTo(45.66f, 31.77f, 45.44f, 23.13f, 45.67f, 20.06f);
            bezierPath.cubicTo(45.7f, 19.47f, 45.89f, 19.3f, 46.53f, 19.48f);
            bezierPath.cubicTo(46.69f, 19.53f, 55.26f, 24.35f, 55.73f, 24.82f);
            bezierPath.cubicTo(56.29f, 25.25f, 56.26f, 26.25f, 55.63f, 26.75f);
            bezierPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(iconColor);
            canvas.drawPath(bezierPath, paint);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(iconTint);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
        }
    }
    
    private static class CacheForBtnMediaLessons {
        private static Paint paint = new Paint();
        private static RectF backgroundRect = new RectF();
        private static Path backgroundPath = new Path();
        private static RectF rightBorderRect = new RectF();
        private static Path rightBorderPath = new Path();
        private static RectF bottomBorderRect = new RectF();
        private static Path bottomBorderPath = new Path();
        private static RectF text2Rect = new RectF();
        private static Path text2Path = new Path();
        private static TextPaint text2TextPaint = new TextPaint();
        private static PaintCodeStaticLayout text2StaticLayout = new PaintCodeStaticLayout();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF bezier4Rect = new RectF();
        private static Path bezier4Path = new Path();
    }
    
    
    public static void drawBtnMediaLessons(Canvas canvas, Context context, boolean isPressed) {
        // General Declarations
        Paint paint = CacheForBtnMediaLessons.paint;
        
        // Local Colors
        int iconUpColor = Color.argb(255, 80, 80, 79);
        int iconDownColor = Color.argb(255, 255, 255, 255);
        int lightGold = Color.argb(255, 249, 248, 244);
        int gold = Color.argb(255, 158, 136, 68);
        
        // Local Variables
        int iconColor = isPressed ? gold : lightGold;
        int iconTint = isPressed ? iconDownColor : iconUpColor;
        
        // background
        RectF backgroundRect = CacheForBtnMediaLessons.backgroundRect;
        backgroundRect.set(0f, 0f, 100f, 80f);
        Path backgroundPath = CacheForBtnMediaLessons.backgroundPath;
        backgroundPath.reset();
        backgroundPath.addRect(backgroundRect, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(iconColor);
        canvas.drawPath(backgroundPath, paint);
        
        // rightBorder
        RectF rightBorderRect = CacheForBtnMediaLessons.rightBorderRect;
        rightBorderRect.set(99.5f, -0.5f, 99.5f, 79.5f);
        Path rightBorderPath = CacheForBtnMediaLessons.rightBorderPath;
        rightBorderPath.reset();
        rightBorderPath.moveTo(99.5f, -0.5f);
        rightBorderPath.lineTo(99.5f, 79.5f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(1f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(gold);
        canvas.drawPath(rightBorderPath, paint);
        canvas.restore();
        
        // bottomBorder
        RectF bottomBorderRect = CacheForBtnMediaLessons.bottomBorderRect;
        bottomBorderRect.set(-0.5f, 79f, 100.5f, 79f);
        Path bottomBorderPath = CacheForBtnMediaLessons.bottomBorderPath;
        bottomBorderPath.reset();
        bottomBorderPath.moveTo(-0.5f, 79f);
        bottomBorderPath.lineTo(100.5f, 79f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(1f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(gold);
        canvas.drawPath(bottomBorderPath, paint);
        canvas.restore();
        
        // Text 2
        RectF text2Rect = CacheForBtnMediaLessons.text2Rect;
        text2Rect.set(20.98f, 50f, 79.41f, 70f);
        Path text2Path = CacheForBtnMediaLessons.text2Path;
        text2Path.reset();
        text2Path.moveTo(text2Rect.left, text2Rect.top);
        text2Path.lineTo(text2Rect.right, text2Rect.top);
        text2Path.lineTo(text2Rect.right, text2Rect.bottom);
        text2Path.lineTo(text2Rect.left, text2Rect.bottom);
        text2Path.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(iconColor);
        canvas.drawPath(text2Path, paint);
        TextPaint text2TextPaint = CacheForBtnMediaLessons.text2TextPaint;
        text2TextPaint.reset();
        text2TextPaint.setFlags(Paint.ANTI_ALIAS_FLAG);
        text2TextPaint.setColor(iconTint);
        text2TextPaint.setTypeface(Typeface.createFromAsset(context.getAssets(), "SF-UI-Text-Regular.otf"));
        text2TextPaint.setTextSize(12f);
        StaticLayout text2StaticLayout = CacheForBtnMediaLessons.text2StaticLayout.get((int) text2Rect.width(), Layout.Alignment.ALIGN_CENTER, "Lessons", text2TextPaint);
        canvas.save();
        canvas.clipRect(text2Rect);
        canvas.translate(text2Rect.left, text2Rect.top + (text2Rect.height() - text2StaticLayout.getHeight()) / 2f);
        text2StaticLayout.draw(canvas);
        canvas.restore();
        
        // Group
        {
            // Bezier
            RectF bezierRect = CacheForBtnMediaLessons.bezierRect;
            bezierRect.set(32.79f, 17.24f, 67.71f, 29.75f);
            Path bezierPath = CacheForBtnMediaLessons.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(32.79f, 23.94f);
            bezierPath.lineTo(50.34f, 17.24f);
            bezierPath.lineTo(67.71f, 23.96f);
            bezierPath.lineTo(49.83f, 29.75f);
            bezierPath.lineTo(32.79f, 23.94f);
            bezierPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(iconTint);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
            
            // Bezier 2
            RectF bezier2Rect = CacheForBtnMediaLessons.bezier2Rect;
            bezier2Rect.set(39.49f, 28f, 60.38f, 36.19f);
            Path bezier2Path = CacheForBtnMediaLessons.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(39.49f, 28f);
            bezier2Path.lineTo(49.84f, 31.49f);
            bezier2Path.lineTo(60.38f, 28f);
            bezier2Path.lineTo(60.33f, 32.89f);
            bezier2Path.cubicTo(60.33f, 32.89f, 54.98f, 32.79f, 49.96f, 36.19f);
            bezier2Path.cubicTo(44.39f, 32.83f, 39.57f, 32.83f, 39.57f, 32.83f);
            bezier2Path.lineTo(39.49f, 28f);
            bezier2Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(iconTint);
            canvas.drawPath(bezier2Path, paint);
            canvas.restore();
            
            // Bezier 4
            RectF bezier4Rect = CacheForBtnMediaLessons.bezier4Rect;
            bezier4Rect.set(61.36f, 26.8f, 63.33f, 43.87f);
            Path bezier4Path = CacheForBtnMediaLessons.bezier4Path;
            bezier4Path.reset();
            bezier4Path.moveTo(61.94f, 27.08f);
            bezier4Path.lineTo(62.76f, 26.8f);
            bezier4Path.lineTo(62.76f, 34.35f);
            bezier4Path.cubicTo(62.76f, 34.35f, 63.31f, 34.53f, 63.33f, 35.14f);
            bezier4Path.cubicTo(63.34f, 35.75f, 62.87f, 36.05f, 62.9f, 36.05f);
            bezier4Path.cubicTo(63.12f, 36.19f, 63.22f, 36.22f, 63.33f, 36.68f);
            bezier4Path.cubicTo(63.31f, 36.68f, 63.33f, 43.87f, 63.33f, 43.87f);
            bezier4Path.lineTo(61.36f, 43.86f);
            bezier4Path.cubicTo(61.36f, 43.86f, 61.38f, 36.68f, 61.37f, 36.7f);
            bezier4Path.cubicTo(61.42f, 36.39f, 61.46f, 36.27f, 61.83f, 36.01f);
            bezier4Path.cubicTo(61.84f, 36.04f, 61.36f, 35.77f, 61.38f, 35.14f);
            bezier4Path.cubicTo(61.41f, 34.51f, 61.92f, 34.34f, 61.92f, 34.34f);
            bezier4Path.lineTo(61.94f, 27.08f);
            bezier4Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(iconTint);
            canvas.drawPath(bezier4Path, paint);
        }
    }
    
    private static class CacheForBtnCloudDownload {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
        private static RectF bezier4Rect = new RectF();
        private static Path bezier4Path = new Path();
        private static RectF bezier5Rect = new RectF();
        private static Path bezier5Path = new Path();
        private static RectF bezier6Rect = new RectF();
        private static Path bezier6Path = new Path();
        private static RectF bezier7Rect = new RectF();
        private static Path bezier7Path = new Path();
        private static RectF bezier8Rect = new RectF();
        private static Path bezier8Path = new Path();
        private static RectF bezier9Rect = new RectF();
        private static Path bezier9Path = new Path();
        private static RectF bezier10Rect = new RectF();
        private static Path bezier10Path = new Path();
        private static RectF bezier11Rect = new RectF();
        private static Path bezier11Path = new Path();
    }
    
    public static void drawBtnCloudDownload(Canvas canvas) {
        GuitarTunesStyleKit.drawBtnCloudDownload(canvas, new RectF(0f, 0f, 44f, 44f), ResizingBehavior.AspectFit);
    }
    
    public static void drawBtnCloudDownload(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForBtnCloudDownload.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForBtnCloudDownload.resizedFrame;
        GuitarTunesStyleKit.resizingBehaviorApply(resizing, CacheForBtnCloudDownload.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 44f);
        
        // cloud
        {
            // Bezier 2
            RectF bezier2Rect = CacheForBtnCloudDownload.bezier2Rect;
            bezier2Rect.set(10.56f, 21.37f, 19.6f, 27.39f);
            Path bezier2Path = CacheForBtnCloudDownload.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(19.6f, 27.02f);
            bezier2Path.cubicTo(19.6f, 26.81f, 19.43f, 26.64f, 19.23f, 26.64f);
            bezier2Path.lineTo(13.58f, 26.64f);
            bezier2Path.cubicTo(12.33f, 26.64f, 11.31f, 25.63f, 11.31f, 24.38f);
            bezier2Path.cubicTo(11.31f, 23.14f, 12.33f, 22.12f, 13.58f, 22.12f);
            bezier2Path.cubicTo(13.78f, 22.12f, 13.95f, 21.95f, 13.95f, 21.75f);
            bezier2Path.cubicTo(13.95f, 21.54f, 13.78f, 21.37f, 13.58f, 21.37f);
            bezier2Path.cubicTo(11.91f, 21.37f, 10.56f, 22.72f, 10.56f, 24.38f);
            bezier2Path.cubicTo(10.56f, 26.04f, 11.91f, 27.39f, 13.58f, 27.39f);
            bezier2Path.lineTo(19.23f, 27.39f);
            bezier2Path.cubicTo(19.43f, 27.39f, 19.6f, 27.23f, 19.6f, 27.02f);
            bezier2Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(GuitarTunesStyleKit.goldDark);
            canvas.drawPath(bezier2Path, paint);
            
            // Bezier 3
            RectF bezier3Rect = CacheForBtnCloudDownload.bezier3Rect;
            bezier3Rect.set(10.56f, 21.37f, 19.6f, 27.39f);
            Path bezier3Path = CacheForBtnCloudDownload.bezier3Path;
            bezier3Path.reset();
            bezier3Path.moveTo(19.6f, 27.02f);
            bezier3Path.cubicTo(19.6f, 26.81f, 19.43f, 26.64f, 19.23f, 26.64f);
            bezier3Path.lineTo(13.58f, 26.64f);
            bezier3Path.cubicTo(12.33f, 26.64f, 11.31f, 25.63f, 11.31f, 24.38f);
            bezier3Path.cubicTo(11.31f, 23.14f, 12.33f, 22.12f, 13.58f, 22.12f);
            bezier3Path.cubicTo(13.78f, 22.12f, 13.95f, 21.95f, 13.95f, 21.75f);
            bezier3Path.cubicTo(13.95f, 21.54f, 13.78f, 21.37f, 13.58f, 21.37f);
            bezier3Path.cubicTo(11.91f, 21.37f, 10.56f, 22.72f, 10.56f, 24.38f);
            bezier3Path.cubicTo(10.56f, 26.04f, 11.91f, 27.39f, 13.58f, 27.39f);
            bezier3Path.lineTo(19.23f, 27.39f);
            bezier3Path.cubicTo(19.43f, 27.39f, 19.6f, 27.23f, 19.6f, 27.02f);
            bezier3Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(0.5f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(GuitarTunesStyleKit.goldDark);
            canvas.drawPath(bezier3Path, paint);
            canvas.restore();
            
            // Bezier 4
            RectF bezier4Rect = CacheForBtnCloudDownload.bezier4Rect;
            bezier4Rect.set(19.05f, 12.33f, 30.15f, 20.24f);
            Path bezier4Path = CacheForBtnCloudDownload.bezier4Path;
            bezier4Path.reset();
            bezier4Path.moveTo(19.22f, 15.52f);
            bezier4Path.cubicTo(19.39f, 15.64f, 19.62f, 15.59f, 19.74f, 15.42f);
            bezier4Path.cubicTo(20.72f, 13.96f, 22.36f, 13.08f, 24.12f, 13.08f);
            bezier4Path.cubicTo(27.03f, 13.08f, 29.4f, 15.45f, 29.4f, 18.36f);
            bezier4Path.cubicTo(29.4f, 18.83f, 29.33f, 19.31f, 29.21f, 19.76f);
            bezier4Path.cubicTo(29.15f, 19.96f, 29.27f, 20.17f, 29.47f, 20.23f);
            bezier4Path.cubicTo(29.5f, 20.23f, 29.54f, 20.24f, 29.57f, 20.24f);
            bezier4Path.cubicTo(29.74f, 20.24f, 29.89f, 20.13f, 29.93f, 19.96f);
            bezier4Path.cubicTo(30.08f, 19.44f, 30.15f, 18.9f, 30.15f, 18.36f);
            bezier4Path.cubicTo(30.15f, 15.03f, 27.45f, 12.33f, 24.12f, 12.33f);
            bezier4Path.cubicTo(22.11f, 12.33f, 20.24f, 13.33f, 19.12f, 15f);
            bezier4Path.cubicTo(19f, 15.17f, 19.05f, 15.41f, 19.22f, 15.52f);
            bezier4Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(GuitarTunesStyleKit.goldDark);
            canvas.drawPath(bezier4Path, paint);
            
            // Bezier 5
            RectF bezier5Rect = CacheForBtnCloudDownload.bezier5Rect;
            bezier5Rect.set(19.05f, 12.33f, 30.15f, 20.24f);
            Path bezier5Path = CacheForBtnCloudDownload.bezier5Path;
            bezier5Path.reset();
            bezier5Path.moveTo(19.22f, 15.52f);
            bezier5Path.cubicTo(19.39f, 15.64f, 19.62f, 15.59f, 19.74f, 15.42f);
            bezier5Path.cubicTo(20.72f, 13.96f, 22.36f, 13.08f, 24.12f, 13.08f);
            bezier5Path.cubicTo(27.03f, 13.08f, 29.4f, 15.45f, 29.4f, 18.36f);
            bezier5Path.cubicTo(29.4f, 18.83f, 29.33f, 19.31f, 29.21f, 19.76f);
            bezier5Path.cubicTo(29.15f, 19.96f, 29.27f, 20.17f, 29.47f, 20.23f);
            bezier5Path.cubicTo(29.5f, 20.23f, 29.54f, 20.24f, 29.57f, 20.24f);
            bezier5Path.cubicTo(29.74f, 20.24f, 29.89f, 20.13f, 29.93f, 19.96f);
            bezier5Path.cubicTo(30.08f, 19.44f, 30.15f, 18.9f, 30.15f, 18.36f);
            bezier5Path.cubicTo(30.15f, 15.03f, 27.45f, 12.33f, 24.12f, 12.33f);
            bezier5Path.cubicTo(22.11f, 12.33f, 20.24f, 13.33f, 19.12f, 15f);
            bezier5Path.cubicTo(19f, 15.17f, 19.05f, 15.41f, 19.22f, 15.52f);
            bezier5Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(0.5f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(GuitarTunesStyleKit.goldDark);
            canvas.drawPath(bezier5Path, paint);
            canvas.restore();
            
            // Bezier 6
            RectF bezier6Rect = CacheForBtnCloudDownload.bezier6Rect;
            bezier6Rect.set(12.07f, 15.34f, 19.96f, 21f);
            Path bezier6Path = CacheForBtnCloudDownload.bezier6Path;
            bezier6Path.reset();
            bezier6Path.moveTo(12.51f, 21f);
            bezier6Path.cubicTo(12.54f, 21f, 12.56f, 20.99f, 12.58f, 20.99f);
            bezier6Path.cubicTo(12.79f, 20.95f, 12.92f, 20.75f, 12.88f, 20.55f);
            bezier6Path.cubicTo(12.84f, 20.33f, 12.82f, 20.09f, 12.82f, 19.86f);
            bezier6Path.cubicTo(12.82f, 17.79f, 14.51f, 16.1f, 16.59f, 16.1f);
            bezier6Path.cubicTo(17.63f, 16.1f, 18.6f, 16.51f, 19.32f, 17.26f);
            bezier6Path.cubicTo(19.46f, 17.41f, 19.7f, 17.42f, 19.85f, 17.28f);
            bezier6Path.cubicTo(20f, 17.13f, 20f, 16.9f, 19.86f, 16.74f);
            bezier6Path.cubicTo(19f, 15.84f, 17.84f, 15.34f, 16.59f, 15.34f);
            bezier6Path.cubicTo(14.1f, 15.34f, 12.07f, 17.37f, 12.07f, 19.86f);
            bezier6Path.cubicTo(12.07f, 20.14f, 12.09f, 20.42f, 12.14f, 20.69f);
            bezier6Path.cubicTo(12.18f, 20.87f, 12.34f, 21f, 12.51f, 21f);
            bezier6Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(GuitarTunesStyleKit.goldDark);
            canvas.drawPath(bezier6Path, paint);
            
            // Bezier 7
            RectF bezier7Rect = CacheForBtnCloudDownload.bezier7Rect;
            bezier7Rect.set(12.07f, 15.34f, 19.96f, 21f);
            Path bezier7Path = CacheForBtnCloudDownload.bezier7Path;
            bezier7Path.reset();
            bezier7Path.moveTo(12.51f, 21f);
            bezier7Path.cubicTo(12.54f, 21f, 12.56f, 20.99f, 12.58f, 20.99f);
            bezier7Path.cubicTo(12.79f, 20.95f, 12.92f, 20.75f, 12.88f, 20.55f);
            bezier7Path.cubicTo(12.84f, 20.33f, 12.82f, 20.09f, 12.82f, 19.86f);
            bezier7Path.cubicTo(12.82f, 17.79f, 14.51f, 16.1f, 16.59f, 16.1f);
            bezier7Path.cubicTo(17.63f, 16.1f, 18.6f, 16.51f, 19.32f, 17.26f);
            bezier7Path.cubicTo(19.46f, 17.41f, 19.7f, 17.42f, 19.85f, 17.28f);
            bezier7Path.cubicTo(20f, 17.13f, 20f, 16.9f, 19.86f, 16.74f);
            bezier7Path.cubicTo(19f, 15.84f, 17.84f, 15.34f, 16.59f, 15.34f);
            bezier7Path.cubicTo(14.1f, 15.34f, 12.07f, 17.37f, 12.07f, 19.86f);
            bezier7Path.cubicTo(12.07f, 20.14f, 12.09f, 20.42f, 12.14f, 20.69f);
            bezier7Path.cubicTo(12.18f, 20.87f, 12.34f, 21f, 12.51f, 21f);
            bezier7Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(0.5f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(GuitarTunesStyleKit.goldDark);
            canvas.drawPath(bezier7Path, paint);
            canvas.restore();
            
            // Bezier 8
            RectF bezier8Rect = CacheForBtnCloudDownload.bezier8Rect;
            bezier8Rect.set(23.37f, 19.11f, 33.16f, 27.39f);
            Path bezier8Path = CacheForBtnCloudDownload.bezier8Path;
            bezier8Path.reset();
            bezier8Path.moveTo(31.25f, 19.18f);
            bezier8Path.cubicTo(31.08f, 19.06f, 30.84f, 19.1f, 30.72f, 19.27f);
            bezier8Path.cubicTo(30.6f, 19.44f, 30.64f, 19.68f, 30.81f, 19.8f);
            bezier8Path.cubicTo(31.81f, 20.5f, 32.41f, 21.65f, 32.41f, 22.88f);
            bezier8Path.cubicTo(32.41f, 24.95f, 30.72f, 26.64f, 28.64f, 26.64f);
            bezier8Path.lineTo(23.75f, 26.64f);
            bezier8Path.cubicTo(23.54f, 26.64f, 23.37f, 26.81f, 23.37f, 27.02f);
            bezier8Path.cubicTo(23.37f, 27.23f, 23.54f, 27.39f, 23.75f, 27.39f);
            bezier8Path.lineTo(28.64f, 27.39f);
            bezier8Path.cubicTo(31.14f, 27.39f, 33.16f, 25.37f, 33.16f, 22.88f);
            bezier8Path.cubicTo(33.16f, 21.41f, 32.45f, 20.03f, 31.25f, 19.18f);
            bezier8Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(GuitarTunesStyleKit.goldDark);
            canvas.drawPath(bezier8Path, paint);
            
            // Bezier 9
            RectF bezier9Rect = CacheForBtnCloudDownload.bezier9Rect;
            bezier9Rect.set(23.37f, 19.11f, 33.16f, 27.39f);
            Path bezier9Path = CacheForBtnCloudDownload.bezier9Path;
            bezier9Path.reset();
            bezier9Path.moveTo(31.25f, 19.18f);
            bezier9Path.cubicTo(31.08f, 19.06f, 30.84f, 19.1f, 30.72f, 19.27f);
            bezier9Path.cubicTo(30.6f, 19.44f, 30.64f, 19.68f, 30.81f, 19.8f);
            bezier9Path.cubicTo(31.81f, 20.5f, 32.41f, 21.65f, 32.41f, 22.88f);
            bezier9Path.cubicTo(32.41f, 24.95f, 30.72f, 26.64f, 28.64f, 26.64f);
            bezier9Path.lineTo(23.75f, 26.64f);
            bezier9Path.cubicTo(23.54f, 26.64f, 23.37f, 26.81f, 23.37f, 27.02f);
            bezier9Path.cubicTo(23.37f, 27.23f, 23.54f, 27.39f, 23.75f, 27.39f);
            bezier9Path.lineTo(28.64f, 27.39f);
            bezier9Path.cubicTo(31.14f, 27.39f, 33.16f, 25.37f, 33.16f, 22.88f);
            bezier9Path.cubicTo(33.16f, 21.41f, 32.45f, 20.03f, 31.25f, 19.18f);
            bezier9Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(0.5f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(GuitarTunesStyleKit.goldDark);
            canvas.drawPath(bezier9Path, paint);
            canvas.restore();
            
            // Bezier 10
            RectF bezier10Rect = CacheForBtnCloudDownload.bezier10Rect;
            bezier10Rect.set(17.34f, 20.62f, 25.63f, 34.93f);
            Path bezier10Path = CacheForBtnCloudDownload.bezier10Path;
            bezier10Path.reset();
            bezier10Path.moveTo(24.99f, 30.52f);
            bezier10Path.lineTo(21.86f, 33.64f);
            bezier10Path.lineTo(21.86f, 20.99f);
            bezier10Path.cubicTo(21.86f, 20.78f, 21.69f, 20.62f, 21.49f, 20.62f);
            bezier10Path.cubicTo(21.28f, 20.62f, 21.11f, 20.78f, 21.11f, 20.99f);
            bezier10Path.lineTo(21.11f, 33.64f);
            bezier10Path.lineTo(17.98f, 30.52f);
            bezier10Path.cubicTo(17.84f, 30.37f, 17.6f, 30.37f, 17.45f, 30.52f);
            bezier10Path.cubicTo(17.31f, 30.67f, 17.31f, 30.9f, 17.45f, 31.05f);
            bezier10Path.lineTo(21.22f, 34.82f);
            bezier10Path.cubicTo(21.25f, 34.85f, 21.3f, 34.88f, 21.34f, 34.9f);
            bezier10Path.cubicTo(21.39f, 34.92f, 21.44f, 34.93f, 21.49f, 34.93f);
            bezier10Path.cubicTo(21.53f, 34.93f, 21.58f, 34.92f, 21.63f, 34.9f);
            bezier10Path.cubicTo(21.68f, 34.88f, 21.72f, 34.85f, 21.75f, 34.82f);
            bezier10Path.lineTo(25.52f, 31.05f);
            bezier10Path.cubicTo(25.67f, 30.9f, 25.67f, 30.67f, 25.52f, 30.52f);
            bezier10Path.cubicTo(25.37f, 30.37f, 25.13f, 30.37f, 24.99f, 30.52f);
            bezier10Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(GuitarTunesStyleKit.goldDark);
            canvas.drawPath(bezier10Path, paint);
            
            // Bezier 11
            RectF bezier11Rect = CacheForBtnCloudDownload.bezier11Rect;
            bezier11Rect.set(17.34f, 20.62f, 25.63f, 34.93f);
            Path bezier11Path = CacheForBtnCloudDownload.bezier11Path;
            bezier11Path.reset();
            bezier11Path.moveTo(24.99f, 30.52f);
            bezier11Path.lineTo(21.86f, 33.64f);
            bezier11Path.lineTo(21.86f, 20.99f);
            bezier11Path.cubicTo(21.86f, 20.78f, 21.69f, 20.62f, 21.49f, 20.62f);
            bezier11Path.cubicTo(21.28f, 20.62f, 21.11f, 20.78f, 21.11f, 20.99f);
            bezier11Path.lineTo(21.11f, 33.64f);
            bezier11Path.lineTo(17.98f, 30.52f);
            bezier11Path.cubicTo(17.84f, 30.37f, 17.6f, 30.37f, 17.45f, 30.52f);
            bezier11Path.cubicTo(17.31f, 30.67f, 17.31f, 30.9f, 17.45f, 31.05f);
            bezier11Path.lineTo(21.22f, 34.82f);
            bezier11Path.cubicTo(21.25f, 34.85f, 21.3f, 34.88f, 21.34f, 34.9f);
            bezier11Path.cubicTo(21.39f, 34.92f, 21.44f, 34.93f, 21.49f, 34.93f);
            bezier11Path.cubicTo(21.53f, 34.93f, 21.58f, 34.92f, 21.63f, 34.9f);
            bezier11Path.cubicTo(21.68f, 34.88f, 21.72f, 34.85f, 21.75f, 34.82f);
            bezier11Path.lineTo(25.52f, 31.05f);
            bezier11Path.cubicTo(25.67f, 30.9f, 25.67f, 30.67f, 25.52f, 30.52f);
            bezier11Path.cubicTo(25.37f, 30.37f, 25.13f, 30.37f, 24.99f, 30.52f);
            bezier11Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(0.5f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(GuitarTunesStyleKit.goldDark);
            canvas.drawPath(bezier11Path, paint);
            canvas.restore();
        }
        
        canvas.restore();
    }
    
    private static class CacheForIndeterminateCircle {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF oval2Rect = new RectF();
        private static Path oval2Path = new Path();
    }
    
    public static void drawIndeterminateCircle(Canvas canvas, float angle) {
        GuitarTunesStyleKit.drawIndeterminateCircle(canvas, new RectF(0f, 0f, 44f, 44f), ResizingBehavior.AspectFit, angle);
    }
    
    public static void drawIndeterminateCircle(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, float angle) {
        // General Declarations
        Stack<Matrix> currentTransformation = new Stack<Matrix>();
        currentTransformation.push(new Matrix());
        Paint paint = CacheForIndeterminateCircle.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForIndeterminateCircle.resizedFrame;
        GuitarTunesStyleKit.resizingBehaviorApply(resizing, CacheForIndeterminateCircle.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 44f);
        
        // Group
        {
            canvas.save();
            canvas.translate(21.26f, 20f);
            currentTransformation.peek().postTranslate(21.26f, 20f);
            canvas.rotate(-angle);
            currentTransformation.peek().postRotate(-angle);
            
            // Oval 2
            RectF oval2Rect = CacheForIndeterminateCircle.oval2Rect;
            oval2Rect.set(-10.5f, -10.5f, 10.5f, 10.5f);
            Path oval2Path = CacheForIndeterminateCircle.oval2Path;
            oval2Path.reset();
            oval2Path.addArc(oval2Rect, 0f, (360f * (float) Math.ceil(45f / 360f)) - 45f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(GuitarTunesStyleKit.mediaTitle);
            canvas.drawPath(oval2Path, paint);
            canvas.restore();
            
            canvas.restore();
        }
        
        canvas.restore();
    }
    
    private static class CacheForLibraryHeader {
        private static Paint paint = new Paint();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    
    public static void drawLibraryHeader(Canvas canvas, RectF frame) {
        // General Declarations
        Paint paint = CacheForLibraryHeader.paint;
        
        // Local Colors
        int libraryHeaderBG = Color.argb(255, 250, 250, 250);
        
        // Rectangle
        RectF rectangleRect = CacheForLibraryHeader.rectangleRect;
        rectangleRect.set(frame.left,
            frame.top,
            frame.left + (float) Math.floor(frame.width() + 0.5f),
            frame.top + (float) Math.floor(frame.height() + 0.5f));
        Path rectanglePath = CacheForLibraryHeader.rectanglePath;
        rectanglePath.reset();
        rectanglePath.moveTo(rectangleRect.left, rectangleRect.top);
        rectanglePath.lineTo(rectangleRect.right, rectangleRect.top);
        rectanglePath.lineTo(rectangleRect.right, rectangleRect.bottom);
        rectanglePath.lineTo(rectangleRect.left, rectangleRect.bottom);
        rectanglePath.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(libraryHeaderBG);
        canvas.drawPath(rectanglePath, paint);
        
        // Bezier
        RectF bezierRect = CacheForLibraryHeader.bezierRect;
        bezierRect.set(frame.left,
            frame.top + 49.5f,
            frame.left + 49.5f,
            frame.top + 50f);
        Path bezierPath = CacheForLibraryHeader.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(frame.left, frame.top + frame.height());
        bezierPath.lineTo(frame.left + frame.width() * 0.99f, frame.top + frame.height() * 0.99f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(libraryHeaderBG);
        canvas.drawPath(bezierPath, paint);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(1f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(Color.GRAY);
        canvas.drawPath(bezierPath, paint);
        canvas.restore();
    }
    
    private static class CacheForCircularProgress {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF ovalRect = new RectF();
        private static Path ovalPath = new Path();
        private static RectF oval2Rect = new RectF();
        private static Path oval2Path = new Path();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
    }
    
    public static void drawCircularProgress(Canvas canvas, float angle) {
        GuitarTunesStyleKit.drawCircularProgress(canvas, new RectF(0f, 0f, 44f, 44f), ResizingBehavior.AspectFit, angle);
    }
    
    public static void drawCircularProgress(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, float angle) {
        // General Declarations
        Stack<Matrix> currentTransformation = new Stack<Matrix>();
        currentTransformation.push(new Matrix());
        Paint paint = CacheForCircularProgress.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForCircularProgress.resizedFrame;
        GuitarTunesStyleKit.resizingBehaviorApply(resizing, CacheForCircularProgress.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 44f);
        
        // Group
        {
            // Oval
            canvas.save();
            canvas.translate(11f, 9.5f);
            currentTransformation.peek().postTranslate(11f, 9.5f);
            RectF ovalRect = CacheForCircularProgress.ovalRect;
            ovalRect.set(1f, 1f, 20f, 20f);
            Path ovalPath = CacheForCircularProgress.ovalPath;
            ovalPath.reset();
            ovalPath.addArc(ovalRect, -90f, 90f - angle + (-angle < -90f ? 360f * (float) Math.ceil((angle - 90f) / 360f) : 0f));
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(GuitarTunesStyleKit.goldDark);
            canvas.drawPath(ovalPath, paint);
            canvas.restore();
            canvas.restore();
            
            // Oval 2
            RectF oval2Rect = CacheForCircularProgress.oval2Rect;
            oval2Rect.set(10.88f, 9.5f, 31.88f, 30.5f);
            Path oval2Path = CacheForCircularProgress.oval2Path;
            oval2Path.reset();
            oval2Path.addOval(oval2Rect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(GuitarTunesStyleKit.goldDark);
            canvas.drawPath(oval2Path, paint);
            canvas.restore();
            
            // Rectangle
            RectF rectangleRect = CacheForCircularProgress.rectangleRect;
            rectangleRect.set(17.71f, 15.91f, 25.71f, 23.91f);
            Path rectanglePath = CacheForCircularProgress.rectanglePath;
            rectanglePath.reset();
            rectanglePath.moveTo(rectangleRect.left, rectangleRect.top);
            rectanglePath.lineTo(rectangleRect.right, rectangleRect.top);
            rectanglePath.lineTo(rectangleRect.right, rectangleRect.bottom);
            rectanglePath.lineTo(rectangleRect.left, rectangleRect.bottom);
            rectanglePath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(GuitarTunesStyleKit.goldDark);
            canvas.drawPath(rectanglePath, paint);
        }
        
        canvas.restore();
    }
    
    private static class CacheForBuyButton {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 78f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
        private static TextPaint rectangleTextPaint = new TextPaint();
        private static PaintCodeStaticLayout rectangleStaticLayout = new PaintCodeStaticLayout();
        private static RectF topRect = new RectF();
        private static TextPaint topTextPaint = new TextPaint();
        private static PaintCodeStaticLayout topStaticLayout = new PaintCodeStaticLayout();
        private static RectF bottomRect = new RectF();
        private static TextPaint bottomTextPaint = new TextPaint();
        private static PaintCodeStaticLayout bottomStaticLayout = new PaintCodeStaticLayout();
    }
    
    public static void drawBuyButton(Canvas canvas, Context context, String priceText, float fontSize, String topText, String bottomText) {
        GuitarTunesStyleKit.drawBuyButton(canvas, context, new RectF(0f, 0f, 78f, 44f), ResizingBehavior.AspectFit, priceText, fontSize, topText, bottomText);
    }
    
    public static void drawBuyButton(Canvas canvas, Context context, RectF targetFrame, ResizingBehavior resizing, String priceText, float fontSize, String topText, String bottomText) {
        // General Declarations
        Paint paint = CacheForBuyButton.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForBuyButton.resizedFrame;
        GuitarTunesStyleKit.resizingBehaviorApply(resizing, CacheForBuyButton.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 78f, resizedFrame.height() / 44f);
        
        // Rectangle
        RectF rectangleRect = CacheForBuyButton.rectangleRect;
        rectangleRect.set(1f, 9.88f, 77f, 35.88f);
        Path rectanglePath = CacheForBuyButton.rectanglePath;
        rectanglePath.reset();
        rectanglePath.addRoundRect(rectangleRect, 4f, 4f, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(1f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(GuitarTunesStyleKit.mediaTitle);
        canvas.drawPath(rectanglePath, paint);
        canvas.restore();
        TextPaint rectangleTextPaint = CacheForBuyButton.rectangleTextPaint;
        rectangleTextPaint.reset();
        rectangleTextPaint.setFlags(Paint.ANTI_ALIAS_FLAG);
        rectangleTextPaint.setColor(GuitarTunesStyleKit.mediaTitle);
        rectangleTextPaint.setTypeface(Typeface.create((String) null, Typeface.NORMAL));
        rectangleTextPaint.setTextSize(fontSize);
        StaticLayout rectangleStaticLayout = CacheForBuyButton.rectangleStaticLayout.get((int) rectangleRect.width(), Layout.Alignment.ALIGN_CENTER, priceText, rectangleTextPaint);
        canvas.save();
        canvas.clipRect(rectangleRect);
        canvas.translate(rectangleRect.left, rectangleRect.top + (rectangleRect.height() - rectangleStaticLayout.getHeight()) / 2f);
        rectangleStaticLayout.draw(canvas);
        canvas.restore();
        
        // Top
        RectF topRect = CacheForBuyButton.topRect;
        topRect.set(1f, 11.77f, 77f, 23.77f);
        TextPaint topTextPaint = CacheForBuyButton.topTextPaint;
        topTextPaint.reset();
        topTextPaint.setFlags(Paint.ANTI_ALIAS_FLAG);
        topTextPaint.setColor(GuitarTunesStyleKit.mediaTitle);
        topTextPaint.setTypeface(Typeface.create((String) null, Typeface.NORMAL));
        topTextPaint.setTextSize(10f);
        StaticLayout topStaticLayout = CacheForBuyButton.topStaticLayout.get((int) topRect.width(), Layout.Alignment.ALIGN_CENTER, topText, topTextPaint);
        canvas.save();
        canvas.clipRect(topRect);
        canvas.translate(topRect.left, topRect.top + (topRect.height() - topStaticLayout.getHeight()) / 2f);
        topStaticLayout.draw(canvas);
        canvas.restore();
        
        // Bottom
        RectF bottomRect = CacheForBuyButton.bottomRect;
        bottomRect.set(1f, 22f, 77f, 34f);
        TextPaint bottomTextPaint = CacheForBuyButton.bottomTextPaint;
        bottomTextPaint.reset();
        bottomTextPaint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bottomTextPaint.setColor(GuitarTunesStyleKit.mediaTitle);
        bottomTextPaint.setTypeface(Typeface.create((String) null, Typeface.NORMAL));
        bottomTextPaint.setTextSize(10f);
        StaticLayout bottomStaticLayout = CacheForBuyButton.bottomStaticLayout.get((int) bottomRect.width(), Layout.Alignment.ALIGN_CENTER, bottomText, bottomTextPaint);
        canvas.save();
        canvas.clipRect(bottomRect);
        canvas.translate(bottomRect.left, bottomRect.top + (bottomRect.height() - bottomStaticLayout.getHeight()) / 2f);
        bottomStaticLayout.draw(canvas);
        canvas.restore();
        
        canvas.restore();
    }
    
    private static class CacheForBtnFavoriteSmall {
        private static Paint paint = new Paint();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF selectedRect = new RectF();
        private static Path selectedPath = new Path();
    }
    
    
    public static void drawBtnFavoriteSmall(Canvas canvas, boolean isPressed) {
        // General Declarations
        Paint paint = CacheForBtnFavoriteSmall.paint;
        
        // Local Colors
        int favorite = Color.argb(255, 234, 24, 109);
        
        // Bezier
        RectF bezierRect = CacheForBtnFavoriteSmall.bezierRect;
        bezierRect.set(15.57f, 14.57f, 28.3f, 27.31f);
        Path bezierPath = CacheForBtnFavoriteSmall.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(21.93f, 27.31f);
        bezierPath.cubicTo(21.93f, 27.31f, 28.3f, 22.58f, 28.3f, 18.1f);
        bezierPath.cubicTo(28.3f, 13.62f, 22.65f, 13.28f, 21.93f, 17.76f);
        bezierPath.cubicTo(21.22f, 13.28f, 15.57f, 13.62f, 15.57f, 18.45f);
        bezierPath.cubicTo(15.57f, 23.27f, 21.93f, 27.31f, 21.93f, 27.31f);
        bezierPath.lineTo(21.93f, 27.31f);
        bezierPath.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(1f);
        paint.setStrokeJoin(Paint.Join.ROUND);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(favorite);
        canvas.drawPath(bezierPath, paint);
        canvas.restore();
        
        // selected
        if (isPressed) {
            RectF selectedRect = CacheForBtnFavoriteSmall.selectedRect;
            selectedRect.set(15.57f, 14.57f, 28.3f, 27.31f);
            Path selectedPath = CacheForBtnFavoriteSmall.selectedPath;
            selectedPath.reset();
            selectedPath.moveTo(21.93f, 27.31f);
            selectedPath.cubicTo(21.93f, 27.31f, 28.3f, 22.58f, 28.3f, 18.1f);
            selectedPath.cubicTo(28.3f, 13.62f, 22.65f, 13.28f, 21.93f, 17.76f);
            selectedPath.cubicTo(21.22f, 13.28f, 15.57f, 13.62f, 15.57f, 18.45f);
            selectedPath.cubicTo(15.57f, 23.27f, 21.93f, 27.31f, 21.93f, 27.31f);
            selectedPath.lineTo(21.93f, 27.31f);
            selectedPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(favorite);
            canvas.drawPath(selectedPath, paint);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(favorite);
            canvas.drawPath(selectedPath, paint);
            canvas.restore();
        }
    }
    
    private static class CacheForBtnTrashCan {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
        private static RectF bezier4Rect = new RectF();
        private static Path bezier4Path = new Path();
    }
    
    public static void drawBtnTrashCan(Canvas canvas) {
        GuitarTunesStyleKit.drawBtnTrashCan(canvas, new RectF(0f, 0f, 44f, 44f), ResizingBehavior.AspectFit);
    }
    
    public static void drawBtnTrashCan(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForBtnTrashCan.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForBtnTrashCan.resizedFrame;
        GuitarTunesStyleKit.resizingBehaviorApply(resizing, CacheForBtnTrashCan.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 44f);
        
        // Group 2
        {
            // Bezier
            RectF bezierRect = CacheForBtnTrashCan.bezierRect;
            bezierRect.set(10.5f, 9.5f, 32.5f, 22.72f);
            Path bezierPath = CacheForBtnTrashCan.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(28.2f, 22.72f);
            bezierPath.cubicTo(28.2f, 22.72f, 32.5f, 22.26f, 32.5f, 18.04f);
            bezierPath.cubicTo(32.5f, 15.36f, 30.29f, 13.21f, 27.55f, 13.31f);
            bezierPath.cubicTo(26.47f, 11.05f, 24.17f, 9.5f, 21.5f, 9.5f);
            bezierPath.cubicTo(17.94f, 9.5f, 15.03f, 12.3f, 14.82f, 15.81f);
            bezierPath.cubicTo(12.59f, 15.34f, 10.5f, 16.95f, 10.5f, 19.22f);
            bezierPath.cubicTo(10.5f, 21.64f, 12.18f, 22.39f, 13.31f, 22.62f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(GuitarTunesStyleKit.mediaTitle);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
            
            // Rectangle
            RectF rectangleRect = CacheForBtnTrashCan.rectangleRect;
            rectangleRect.set(18.5f, 21.22f, 24.5f, 31.22f);
            Path rectanglePath = CacheForBtnTrashCan.rectanglePath;
            rectanglePath.reset();
            rectanglePath.addRoundRect(rectangleRect, 1f, 1f, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(GuitarTunesStyleKit.mediaTitle);
            canvas.drawPath(rectanglePath, paint);
            canvas.restore();
            
            // Bezier 2
            RectF bezier2Rect = CacheForBtnTrashCan.bezier2Rect;
            bezier2Rect.set(18.5f, 29.22f, 24.5f, 29.22f);
            Path bezier2Path = CacheForBtnTrashCan.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(18.5f, 29.22f);
            bezier2Path.lineTo(24.5f, 29.22f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(GuitarTunesStyleKit.mediaTitle);
            canvas.drawPath(bezier2Path, paint);
            canvas.restore();
            
            // Bezier 3
            RectF bezier3Rect = CacheForBtnTrashCan.bezier3Rect;
            bezier3Rect.set(21.5f, 13.72f, 21.5f, 18.72f);
            Path bezier3Path = CacheForBtnTrashCan.bezier3Path;
            bezier3Path.reset();
            bezier3Path.moveTo(21.5f, 13.72f);
            bezier3Path.lineTo(21.5f, 18.72f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(GuitarTunesStyleKit.mediaTitle);
            canvas.drawPath(bezier3Path, paint);
            canvas.restore();
            
            // Bezier 4
            RectF bezier4Rect = CacheForBtnTrashCan.bezier4Rect;
            bezier4Rect.set(19.5f, 13.72f, 23.5f, 15.72f);
            Path bezier4Path = CacheForBtnTrashCan.bezier4Path;
            bezier4Path.reset();
            bezier4Path.moveTo(23.5f, 15.72f);
            bezier4Path.lineTo(21.5f, 13.72f);
            bezier4Path.lineTo(19.5f, 15.72f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(GuitarTunesStyleKit.mediaTitle);
            canvas.drawPath(bezier4Path, paint);
            canvas.restore();
        }
        
        canvas.restore();
    }
    
    private static class CacheForPreviewProgress {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF ovalRect = new RectF();
        private static Path ovalPath = new Path();
        private static RectF oval2Rect = new RectF();
        private static Path oval2Path = new Path();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
    }
    
    public static void drawPreviewProgress(Canvas canvas, float angle) {
        GuitarTunesStyleKit.drawPreviewProgress(canvas, new RectF(0f, 0f, 44f, 44f), ResizingBehavior.AspectFit, angle);
    }
    
    public static void drawPreviewProgress(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, float angle) {
        // General Declarations
        Stack<Matrix> currentTransformation = new Stack<Matrix>();
        currentTransformation.push(new Matrix());
        Paint paint = CacheForPreviewProgress.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForPreviewProgress.resizedFrame;
        GuitarTunesStyleKit.resizingBehaviorApply(resizing, CacheForPreviewProgress.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 44f);
        
        // Group
        {
            // Oval
            canvas.save();
            canvas.translate(11f, 9.5f);
            currentTransformation.peek().postTranslate(11f, 9.5f);
            RectF ovalRect = CacheForPreviewProgress.ovalRect;
            ovalRect.set(1f, 1f, 20f, 20f);
            Path ovalPath = CacheForPreviewProgress.ovalPath;
            ovalPath.reset();
            ovalPath.addArc(ovalRect, -90f, 90f - angle + (-angle < -90f ? 360f * (float) Math.ceil((angle - 90f) / 360f) : 0f));
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(GuitarTunesStyleKit.mediaTitle);
            canvas.drawPath(ovalPath, paint);
            canvas.restore();
            canvas.restore();
            
            // Oval 2
            RectF oval2Rect = CacheForPreviewProgress.oval2Rect;
            oval2Rect.set(10.88f, 9.5f, 31.88f, 30.5f);
            Path oval2Path = CacheForPreviewProgress.oval2Path;
            oval2Path.reset();
            oval2Path.addOval(oval2Rect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(GuitarTunesStyleKit.mediaTitle);
            canvas.drawPath(oval2Path, paint);
            canvas.restore();
            
            // Rectangle
            RectF rectangleRect = CacheForPreviewProgress.rectangleRect;
            rectangleRect.set(17.71f, 15.91f, 25.71f, 23.91f);
            Path rectanglePath = CacheForPreviewProgress.rectanglePath;
            rectanglePath.reset();
            rectanglePath.moveTo(rectangleRect.left, rectangleRect.top);
            rectanglePath.lineTo(rectangleRect.right, rectangleRect.top);
            rectanglePath.lineTo(rectangleRect.right, rectangleRect.bottom);
            rectanglePath.lineTo(rectangleRect.left, rectangleRect.bottom);
            rectanglePath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(GuitarTunesStyleKit.mediaTitle);
            canvas.drawPath(rectanglePath, paint);
        }
        
        canvas.restore();
    }
    
    private static class CacheForPreviewPlay {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF ovalRect = new RectF();
        private static Path ovalPath = new Path();
        private static RectF playRect = new RectF();
        private static Path playPath = new Path();
    }
    
    public static void drawPreviewPlay(Canvas canvas, boolean isShowingPause) {
        GuitarTunesStyleKit.drawPreviewPlay(canvas, new RectF(0f, 0f, 44f, 44f), ResizingBehavior.AspectFit, isShowingPause);
    }
    
    public static void drawPreviewPlay(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, boolean isShowingPause) {
        // General Declarations
        Paint paint = CacheForPreviewPlay.paint;
        
        // Local Colors
        int white = Color.argb(255, 255, 255, 255);
        
        // Local Variables
        boolean isPlaying = !isShowingPause;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForPreviewPlay.resizedFrame;
        GuitarTunesStyleKit.resizingBehaviorApply(resizing, CacheForPreviewPlay.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 44f);
        
        // Oval
        RectF ovalRect = CacheForPreviewPlay.ovalRect;
        ovalRect.set(9.9f, 8.64f, 34.9f, 33.64f);
        Path ovalPath = CacheForPreviewPlay.ovalPath;
        ovalPath.reset();
        ovalPath.addOval(ovalRect, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(GuitarTunesStyleKit.mediaTitleSemi);
        canvas.drawPath(ovalPath, paint);
        
        // Play
        if (isPlaying) {
            RectF playRect = CacheForPreviewPlay.playRect;
            playRect.set(18.84f, 15.28f, 28.9f, 26.37f);
            Path playPath = CacheForPreviewPlay.playPath;
            playPath.reset();
            playPath.moveTo(18.84f, 26.37f);
            playPath.lineTo(18.84f, 15.28f);
            playPath.lineTo(28.9f, 20.82f);
            playPath.lineTo(18.84f, 26.37f);
            playPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            playPath.setFillType(Path.FillType.EVEN_ODD);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(white);
            canvas.drawPath(playPath, paint);
        }
        
        canvas.restore();
    }
    
    private static class CacheForBtnDetails {
        private static Paint paint = new Paint();
        private static RectF ovalRect = new RectF();
        private static Path ovalPath = new Path();
        private static RectF textRect = new RectF();
        private static TextPaint textTextPaint = new TextPaint();
        private static PaintCodeStaticLayout textStaticLayout = new PaintCodeStaticLayout();
    }
    
    
    public static void drawBtnDetails(Canvas canvas, Context context, boolean isPressed) {
        // General Declarations
        Paint paint = CacheForBtnDetails.paint;
        
        // Local Colors
        int upColor = Color.argb(255, 76, 142, 162);
        int downColor = Color.argb(255, 63, 113, 129);
        
        // Local Variables
        int btnColor = isPressed ? downColor : upColor;
        
        // Oval
        RectF ovalRect = CacheForBtnDetails.ovalRect;
        ovalRect.set(13.9f, 13.64f, 28.9f, 28.64f);
        Path ovalPath = CacheForBtnDetails.ovalPath;
        ovalPath.reset();
        ovalPath.addOval(ovalRect, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(1f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(btnColor);
        canvas.drawPath(ovalPath, paint);
        canvas.restore();
        
        // Text
        RectF textRect = CacheForBtnDetails.textRect;
        textRect.set(14f, 13.94f, 29f, 28.94f);
        TextPaint textTextPaint = CacheForBtnDetails.textTextPaint;
        textTextPaint.reset();
        textTextPaint.setFlags(Paint.ANTI_ALIAS_FLAG);
        textTextPaint.setColor(btnColor);
        textTextPaint.setTypeface(Typeface.createFromAsset(context.getAssets(), "HelveticaNeue.dfont"));
        textTextPaint.setTextSize(12f);
        StaticLayout textStaticLayout = CacheForBtnDetails.textStaticLayout.get((int) textRect.width(), Layout.Alignment.ALIGN_CENTER, "i", textTextPaint);
        canvas.save();
        canvas.clipRect(textRect);
        canvas.translate(textRect.left, textRect.top + (textRect.height() - textStaticLayout.getHeight()) / 2f);
        textStaticLayout.draw(canvas);
        canvas.restore();
    }
    
    // Tuner
    
    private static class CacheForBtnTuningNote {
        private static Paint paint = new Paint();
        private static RectF ovalRect = new RectF();
        private static Path ovalPath = new Path();
        private static RectF textRect = new RectF();
        private static TextPaint textTextPaint = new TextPaint();
        private static PaintCodeStaticLayout textStaticLayout = new PaintCodeStaticLayout();
    }
    
    
    public static void drawBtnTuningNote(Canvas canvas, Context context, boolean isPressed, String note) {
        // General Declarations
        Paint paint = CacheForBtnTuningNote.paint;
        
        // Local Colors
        int guitarNoteDown = Color.argb(255, 23, 163, 227);
        int guitarNoteUp = Color.argb(255, 255, 255, 255);
        
        // Local Variables
        int btnTuningColor = isPressed ? guitarNoteDown : guitarNoteUp;
        
        // Oval
        RectF ovalRect = CacheForBtnTuningNote.ovalRect;
        ovalRect.set(1f, 1f, 43f, 43f);
        Path ovalPath = CacheForBtnTuningNote.ovalPath;
        ovalPath.reset();
        ovalPath.addOval(ovalRect, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(btnTuningColor);
        canvas.drawPath(ovalPath, paint);
        
        // Text
        RectF textRect = CacheForBtnTuningNote.textRect;
        textRect.set(1f, 1f, 43f, 43f);
        TextPaint textTextPaint = CacheForBtnTuningNote.textTextPaint;
        textTextPaint.reset();
        textTextPaint.setFlags(Paint.ANTI_ALIAS_FLAG);
        textTextPaint.setColor(Color.BLACK);
        textTextPaint.setTypeface(Typeface.create((String) null, Typeface.NORMAL));
        textTextPaint.setTextSize(22f);
        StaticLayout textStaticLayout = CacheForBtnTuningNote.textStaticLayout.get((int) textRect.width(), Layout.Alignment.ALIGN_CENTER, note, textTextPaint);
        canvas.save();
        canvas.clipRect(textRect);
        canvas.translate(textRect.left, textRect.top + (textRect.height() - textStaticLayout.getHeight()) / 2f);
        textStaticLayout.draw(canvas);
        canvas.restore();
    }
    
    private static class CacheForTunerBG {
        private static Paint paint = new Paint();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF group2 = new RectF();
        private static RectF background = new RectF();
        private static RectF iNTUNERect = new RectF();
        private static Path iNTUNEPath = new Path();
        private static RectF fLATRect = new RectF();
        private static Path fLATPath = new Path();
        private static RectF sHARPRect = new RectF();
        private static Path sHARPPath = new Path();
        private static RectF group = new RectF();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
        private static RectF bezier4Rect = new RectF();
        private static Path bezier4Path = new Path();
        private static RectF bezier6Rect = new RectF();
        private static Path bezier6Path = new Path();
        private static RectF bezier7Rect = new RectF();
        private static Path bezier7Path = new Path();
        private static RectF bezier10Rect = new RectF();
        private static Path bezier10Path = new Path();
        private static RectF bezier13Rect = new RectF();
        private static Path bezier13Path = new Path();
        private static RectF bezier16Rect = new RectF();
        private static Path bezier16Path = new Path();
        private static RectF bezier19Rect = new RectF();
        private static Path bezier19Path = new Path();
        private static RectF bezier21Rect = new RectF();
        private static Path bezier21Path = new Path();
        private static RectF bezier22Rect = new RectF();
        private static Path bezier22Path = new Path();
        private static RectF bezier23Rect = new RectF();
        private static Path bezier23Path = new Path();
        private static RectF arrowFlat = new RectF();
        private static RectF bezier8Rect = new RectF();
        private static Path bezier8Path = new Path();
        private static RectF bezier14Rect = new RectF();
        private static Path bezier14Path = new Path();
        private static RectF arrowSharp = new RectF();
        private static RectF bezier5Rect = new RectF();
        private static Path bezier5Path = new Path();
        private static RectF bezier20Rect = new RectF();
        private static Path bezier20Path = new Path();
    }
    
    
    public static void drawTunerBG(Canvas canvas, RectF frame, float tuningDistance) {
        // General Declarations
        Paint paint = CacheForTunerBG.paint;
        
        // Local Colors
        int tunerOn = Color.argb(255, 255, 0, 0);
        int color8 = Color.argb(0, 255, 255, 255);
        int connectedColor = Color.argb(255, 255, 0, 0);
        int tunerOff = Color.argb(255, 76, 1, 1);
        
        // Local Variables
        boolean tuningIsFlat = tuningDistance < 0.2f;
        boolean tuningIsSharp = tuningDistance > -0.2f;
        
        // Bezier
        RectF bezierRect = CacheForTunerBG.bezierRect;
        bezierRect.set(frame.left + 6.73f,
            frame.top + 8f,
            frame.left + 841.98f,
            frame.top + 641.54f);
        Path bezierPath = CacheForTunerBG.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(frame.left + frame.width() * 0.00795f, frame.top + frame.height() * 0.04592f);
        bezierPath.cubicTo(frame.left + frame.width() * 0.00795f, frame.top + frame.height() * 0.02737f, frame.left + frame.width() * 0.01953f, frame.top + frame.height() * 0.01233f, frame.left + frame.width() * 0.03381f, frame.top + frame.height() * 0.01233f);
        bezierPath.lineTo(frame.left + frame.width() * 0.96797f, frame.top + frame.height() * 0.01233f);
        bezierPath.cubicTo(frame.left + frame.width() * 0.98225f, frame.top + frame.height() * 0.01233f, frame.left + frame.width() * 0.99383f, frame.top + frame.height() * 0.02736f, frame.left + frame.width() * 0.99383f, frame.top + frame.height() * 0.04592f);
        bezierPath.lineTo(frame.left + frame.width() * 0.99383f, frame.top + frame.height() * 0.95566f);
        bezierPath.cubicTo(frame.left + frame.width() * 0.99383f, frame.top + frame.height() * 0.97421f, frame.left + frame.width() * 0.98225f, frame.top + frame.height() * 0.98925f, frame.left + frame.width() * 0.96797f, frame.top + frame.height() * 0.98925f);
        bezierPath.lineTo(frame.left + frame.width() * 0.03381f, frame.top + frame.height() * 0.98925f);
        bezierPath.cubicTo(frame.left + frame.width() * 0.01953f, frame.top + frame.height() * 0.98925f, frame.left + frame.width() * 0.00795f, frame.top + frame.height() * 0.97423f, frame.left + frame.width() * 0.00795f, frame.top + frame.height() * 0.95566f);
        bezierPath.lineTo(frame.left + frame.width() * 0.00795f, frame.top + frame.height() * 0.04592f);
        bezierPath.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezierPath.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(color8);
        canvas.drawPath(bezierPath, paint);
        
        // Group 2
        {
            RectF group2 = CacheForTunerBG.group2;
            group2.set(frame.left + (float) Math.floor((frame.width() - 17.85f) * 0.07461f - 0.38f) + 0.88f,
                frame.top + (float) Math.floor(frame.height() * 0.14512f + 0.39f) + 0.11f,
                frame.right - 17.85f,
                frame.top + (float) Math.floor(frame.height() * 0.8594f + 0.17f) + 0.33f);
            
            // background
            {
                RectF background = CacheForTunerBG.background;
                background.set(group2.left,
                    group2.top,
                    group2.left + (float) Math.floor(group2.width() + 0.02f) + 0.48f,
                    group2.top + (float) Math.floor(group2.height() * 0.54439f + 0.33f) + 0.17f);
                
                // IN TUNE
                RectF iNTUNERect = CacheForTunerBG.iNTUNERect;
                iNTUNERect.set(background.left + (float) Math.floor(background.width() * 0.41003f - 0.19f) + 0.69f,
                    background.top,
                    background.left + (float) Math.floor(background.width() * 0.57362f + 0.25f) + 0.25f,
                    background.top + (float) Math.floor(background.height() * 0.12982f - 0.24f) + 0.74f);
                Path iNTUNEPath = CacheForTunerBG.iNTUNEPath;
                iNTUNEPath.reset();
                iNTUNEPath.moveTo(background.left + background.width() * 0.41003f, background.top);
                iNTUNEPath.lineTo(background.left + background.width() * 0.41003f, background.top + background.height() * 0.12829f);
                iNTUNEPath.lineTo(background.left + background.width() * 0.41819f, background.top + background.height() * 0.12829f);
                iNTUNEPath.lineTo(background.left + background.width() * 0.41819f, background.top);
                iNTUNEPath.lineTo(background.left + background.width() * 0.41003f, background.top);
                iNTUNEPath.close();
                iNTUNEPath.moveTo(background.left + background.width() * 0.43264f, background.top + background.height() * 0.12829f);
                iNTUNEPath.lineTo(background.left + background.width() * 0.43264f, background.top + background.height() * 0.09936f);
                iNTUNEPath.cubicTo(background.left + background.width() * 0.43264f, background.top + background.height() * 0.07366f, background.left + background.width() * 0.43233f, background.top + background.height() * 0.05387f, background.left + background.width() * 0.43214f, background.top + background.height() * 0.04092f);
                iNTUNEPath.lineTo(background.left + background.width() * 0.43227f, background.top + background.height() * 0.04092f);
                iNTUNEPath.cubicTo(background.left + background.width() * 0.4332f, background.top + background.height() * 0.05254f, background.left + background.width() * 0.43513f, background.top + background.height() * 0.06872f, background.left + background.width() * 0.4365f, background.top + background.height() * 0.07957f);
                iNTUNEPath.lineTo(background.left + background.width() * 0.44292f, background.top + background.height() * 0.12829f);
                iNTUNEPath.lineTo(background.left + background.width() * 0.4504f, background.top + background.height() * 0.12829f);
                iNTUNEPath.lineTo(background.left + background.width() * 0.4504f, background.top);
                iNTUNEPath.lineTo(background.left + background.width() * 0.44323f, background.top);
                iNTUNEPath.lineTo(background.left + background.width() * 0.44323f, background.top + background.height() * 0.02836f);
                iNTUNEPath.cubicTo(background.left + background.width() * 0.44323f, background.top + background.height() * 0.05196f, background.left + background.width() * 0.44379f, background.top + background.height() * 0.07424f, background.left + background.width() * 0.44404f, background.top + background.height() * 0.08775f);
                iNTUNEPath.lineTo(background.left + background.width() * 0.44392f, background.top + background.height() * 0.08775f);
                iNTUNEPath.cubicTo(background.left + background.width() * 0.44273f, background.top + background.height() * 0.07671f, background.left + background.width() * 0.44068f, background.top + background.height() * 0.06015f, background.left + background.width() * 0.43943f, background.top + background.height() * 0.05025f);
                iNTUNEPath.lineTo(background.left + background.width() * 0.43295f, background.top);
                iNTUNEPath.lineTo(background.left + background.width() * 0.42548f, background.top);
                iNTUNEPath.lineTo(background.left + background.width() * 0.42548f, background.top + background.height() * 0.12829f);
                iNTUNEPath.lineTo(background.left + background.width() * 0.43264f, background.top + background.height() * 0.12829f);
                iNTUNEPath.close();
                iNTUNEPath.moveTo(background.left + background.width() * 0.47139f, background.top + background.height() * 0.12829f);
                iNTUNEPath.lineTo(background.left + background.width() * 0.47955f, background.top + background.height() * 0.12829f);
                iNTUNEPath.lineTo(background.left + background.width() * 0.47955f, background.top + background.height() * 0.02303f);
                iNTUNEPath.lineTo(background.left + background.width() * 0.48703f, background.top + background.height() * 0.02303f);
                iNTUNEPath.lineTo(background.left + background.width() * 0.48703f, background.top);
                iNTUNEPath.lineTo(background.left + background.width() * 0.46398f, background.top);
                iNTUNEPath.lineTo(background.left + background.width() * 0.46398f, background.top + background.height() * 0.02303f);
                iNTUNEPath.lineTo(background.left + background.width() * 0.47139f, background.top + background.height() * 0.02303f);
                iNTUNEPath.lineTo(background.left + background.width() * 0.47139f, background.top + background.height() * 0.12829f);
                iNTUNEPath.close();
                iNTUNEPath.moveTo(background.left + background.width() * 0.49108f, background.top);
                iNTUNEPath.lineTo(background.left + background.width() * 0.49108f, background.top + background.height() * 0.07918f);
                iNTUNEPath.cubicTo(background.left + background.width() * 0.49108f, background.top + background.height() * 0.11135f, background.left + background.width() * 0.49451f, background.top + background.height() * 0.12982f, background.left + background.width() * 0.50329f, background.top + background.height() * 0.12982f);
                iNTUNEPath.cubicTo(background.left + background.width() * 0.51139f, background.top + background.height() * 0.12982f, background.left + background.width() * 0.51544f, background.top + background.height() * 0.11192f, background.left + background.width() * 0.51544f, background.top + background.height() * 0.07899f);
                iNTUNEPath.lineTo(background.left + background.width() * 0.51544f, background.top);
                iNTUNEPath.lineTo(background.left + background.width() * 0.50728f, background.top);
                iNTUNEPath.lineTo(background.left + background.width() * 0.50728f, background.top + background.height() * 0.08337f);
                iNTUNEPath.cubicTo(background.left + background.width() * 0.50728f, background.top + background.height() * 0.10279f, background.left + background.width() * 0.50559f, background.top + background.height() * 0.10793f, background.left + background.width() * 0.50323f, background.top + background.height() * 0.10793f);
                iNTUNEPath.cubicTo(background.left + background.width() * 0.50111f, background.top + background.height() * 0.10793f, background.left + background.width() * 0.49924f, background.top + background.height() * 0.10222f, background.left + background.width() * 0.49924f, background.top + background.height() * 0.08337f);
                iNTUNEPath.lineTo(background.left + background.width() * 0.49924f, background.top);
                iNTUNEPath.lineTo(background.left + background.width() * 0.49108f, background.top);
                iNTUNEPath.close();
                iNTUNEPath.moveTo(background.left + background.width() * 0.52964f, background.top + background.height() * 0.12829f);
                iNTUNEPath.lineTo(background.left + background.width() * 0.52964f, background.top + background.height() * 0.09936f);
                iNTUNEPath.cubicTo(background.left + background.width() * 0.52964f, background.top + background.height() * 0.07366f, background.left + background.width() * 0.52933f, background.top + background.height() * 0.05387f, background.left + background.width() * 0.52914f, background.top + background.height() * 0.04092f);
                iNTUNEPath.lineTo(background.left + background.width() * 0.52927f, background.top + background.height() * 0.04092f);
                iNTUNEPath.cubicTo(background.left + background.width() * 0.5302f, background.top + background.height() * 0.05254f, background.left + background.width() * 0.53213f, background.top + background.height() * 0.06872f, background.left + background.width() * 0.5335f, background.top + background.height() * 0.07957f);
                iNTUNEPath.lineTo(background.left + background.width() * 0.53992f, background.top + background.height() * 0.12829f);
                iNTUNEPath.lineTo(background.left + background.width() * 0.5474f, background.top + background.height() * 0.12829f);
                iNTUNEPath.lineTo(background.left + background.width() * 0.5474f, background.top);
                iNTUNEPath.lineTo(background.left + background.width() * 0.54023f, background.top);
                iNTUNEPath.lineTo(background.left + background.width() * 0.54023f, background.top + background.height() * 0.02836f);
                iNTUNEPath.cubicTo(background.left + background.width() * 0.54023f, background.top + background.height() * 0.05196f, background.left + background.width() * 0.54079f, background.top + background.height() * 0.07424f, background.left + background.width() * 0.54104f, background.top + background.height() * 0.08775f);
                iNTUNEPath.lineTo(background.left + background.width() * 0.54092f, background.top + background.height() * 0.08775f);
                iNTUNEPath.cubicTo(background.left + background.width() * 0.53973f, background.top + background.height() * 0.07671f, background.left + background.width() * 0.53768f, background.top + background.height() * 0.06015f, background.left + background.width() * 0.53643f, background.top + background.height() * 0.05025f);
                iNTUNEPath.lineTo(background.left + background.width() * 0.52995f, background.top);
                iNTUNEPath.lineTo(background.left + background.width() * 0.52248f, background.top);
                iNTUNEPath.lineTo(background.left + background.width() * 0.52248f, background.top + background.height() * 0.12829f);
                iNTUNEPath.lineTo(background.left + background.width() * 0.52964f, background.top + background.height() * 0.12829f);
                iNTUNEPath.close();
                iNTUNEPath.moveTo(background.left + background.width() * 0.57238f, background.top + background.height() * 0.0512f);
                iNTUNEPath.lineTo(background.left + background.width() * 0.56278f, background.top + background.height() * 0.0512f);
                iNTUNEPath.lineTo(background.left + background.width() * 0.56278f, background.top + background.height() * 0.0217f);
                iNTUNEPath.lineTo(background.left + background.width() * 0.57288f, background.top + background.height() * 0.0217f);
                iNTUNEPath.lineTo(background.left + background.width() * 0.57288f, background.top);
                iNTUNEPath.lineTo(background.left + background.width() * 0.55462f, background.top);
                iNTUNEPath.lineTo(background.left + background.width() * 0.55462f, background.top + background.height() * 0.12829f);
                iNTUNEPath.lineTo(background.left + background.width() * 0.57362f, background.top + background.height() * 0.12829f);
                iNTUNEPath.lineTo(background.left + background.width() * 0.57362f, background.top + background.height() * 0.10659f);
                iNTUNEPath.lineTo(background.left + background.width() * 0.56278f, background.top + background.height() * 0.10659f);
                iNTUNEPath.lineTo(background.left + background.width() * 0.56278f, background.top + background.height() * 0.07195f);
                iNTUNEPath.lineTo(background.left + background.width() * 0.57238f, background.top + background.height() * 0.07195f);
                iNTUNEPath.lineTo(background.left + background.width() * 0.57238f, background.top + background.height() * 0.0512f);
                iNTUNEPath.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(Color.WHITE);
                canvas.drawPath(iNTUNEPath, paint);
                
                // FLAT
                RectF fLATRect = CacheForTunerBG.fLATRect;
                fLATRect.set(background.left,
                    background.top + (float) Math.floor(background.height() * 0.552f + 0.3f) + 0.2f,
                    background.left + (float) Math.floor(background.width() * 0.0942f + 0.21f) + 0.29f,
                    background.top + (float) Math.floor(background.height() * 0.6803f - 0.05f) + 0.55f);
                Path fLATPath = CacheForTunerBG.fLATPath;
                fLATPath.reset();
                fLATPath.moveTo(background.left, background.top + background.height() * 0.6803f);
                fLATPath.lineTo(background.left + background.width() * 0.00816f, background.top + background.height() * 0.6803f);
                fLATPath.lineTo(background.left + background.width() * 0.00816f, background.top + background.height() * 0.62738f);
                fLATPath.lineTo(background.left + background.width() * 0.01763f, background.top + background.height() * 0.62738f);
                fLATPath.lineTo(background.left + background.width() * 0.01763f, background.top + background.height() * 0.60663f);
                fLATPath.lineTo(background.left + background.width() * 0.00816f, background.top + background.height() * 0.60663f);
                fLATPath.lineTo(background.left + background.width() * 0.00816f, background.top + background.height() * 0.5737f);
                fLATPath.lineTo(background.left + background.width() * 0.01825f, background.top + background.height() * 0.5737f);
                fLATPath.lineTo(background.left + background.width() * 0.01825f, background.top + background.height() * 0.552f);
                fLATPath.lineTo(background.left, background.top + background.height() * 0.552f);
                fLATPath.lineTo(background.left, background.top + background.height() * 0.6803f);
                fLATPath.close();
                fLATPath.moveTo(background.left + background.width() * 0.02442f, background.top + background.height() * 0.6803f);
                fLATPath.lineTo(background.left + background.width() * 0.04336f, background.top + background.height() * 0.6803f);
                fLATPath.lineTo(background.left + background.width() * 0.04336f, background.top + background.height() * 0.65917f);
                fLATPath.lineTo(background.left + background.width() * 0.03258f, background.top + background.height() * 0.65917f);
                fLATPath.lineTo(background.left + background.width() * 0.03258f, background.top + background.height() * 0.552f);
                fLATPath.lineTo(background.left + background.width() * 0.02442f, background.top + background.height() * 0.552f);
                fLATPath.lineTo(background.left + background.width() * 0.02442f, background.top + background.height() * 0.6803f);
                fLATPath.close();
                fLATPath.moveTo(background.left + background.width() * 0.0628f, background.top + background.height() * 0.65099f);
                fLATPath.lineTo(background.left + background.width() * 0.0646f, background.top + background.height() * 0.6803f);
                fLATPath.lineTo(background.left + background.width() * 0.07252f, background.top + background.height() * 0.6803f);
                fLATPath.lineTo(background.left + background.width() * 0.06435f, background.top + background.height() * 0.552f);
                fLATPath.lineTo(background.left + background.width() * 0.05457f, background.top + background.height() * 0.552f);
                fLATPath.lineTo(background.left + background.width() * 0.04548f, background.top + background.height() * 0.6803f);
                fLATPath.lineTo(background.left + background.width() * 0.05339f, background.top + background.height() * 0.6803f);
                fLATPath.lineTo(background.left + background.width() * 0.05526f, background.top + background.height() * 0.65099f);
                fLATPath.lineTo(background.left + background.width() * 0.0628f, background.top + background.height() * 0.65099f);
                fLATPath.close();
                fLATPath.moveTo(background.left + background.width() * 0.05607f, background.top + background.height() * 0.63157f);
                fLATPath.lineTo(background.left + background.width() * 0.05763f, background.top + background.height() * 0.60492f);
                fLATPath.cubicTo(background.left + background.width() * 0.05806f, background.top + background.height() * 0.5975f, background.left + background.width() * 0.05869f, background.top + background.height() * 0.58417f, background.left + background.width() * 0.05912f, background.top + background.height() * 0.57561f);
                fLATPath.lineTo(background.left + background.width() * 0.05931f, background.top + background.height() * 0.57561f);
                fLATPath.cubicTo(background.left + background.width() * 0.05968f, background.top + background.height() * 0.58417f, background.left + background.width() * 0.06024f, background.top + background.height() * 0.59693f, background.left + background.width() * 0.06068f, background.top + background.height() * 0.60473f);
                fLATPath.lineTo(background.left + background.width() * 0.06205f, background.top + background.height() * 0.63157f);
                fLATPath.lineTo(background.left + background.width() * 0.05607f, background.top + background.height() * 0.63157f);
                fLATPath.close();
                fLATPath.moveTo(background.left + background.width() * 0.07856f, background.top + background.height() * 0.6803f);
                fLATPath.lineTo(background.left + background.width() * 0.08672f, background.top + background.height() * 0.6803f);
                fLATPath.lineTo(background.left + background.width() * 0.08672f, background.top + background.height() * 0.57504f);
                fLATPath.lineTo(background.left + background.width() * 0.0942f, background.top + background.height() * 0.57504f);
                fLATPath.lineTo(background.left + background.width() * 0.0942f, background.top + background.height() * 0.552f);
                fLATPath.lineTo(background.left + background.width() * 0.07115f, background.top + background.height() * 0.552f);
                fLATPath.lineTo(background.left + background.width() * 0.07115f, background.top + background.height() * 0.57504f);
                fLATPath.lineTo(background.left + background.width() * 0.07856f, background.top + background.height() * 0.57504f);
                fLATPath.lineTo(background.left + background.width() * 0.07856f, background.top + background.height() * 0.6803f);
                fLATPath.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(Color.WHITE);
                canvas.drawPath(fLATPath, paint);
                
                // SHARP
                RectF sHARPRect = CacheForTunerBG.sHARPRect;
                sHARPRect.set(background.left + (float) Math.floor(background.width() * 0.85989f - 0.45f) + 0.95f,
                    background.top + (float) Math.floor(background.height() * 0.55086f - 0.41f) + 0.91f,
                    background.left + (float) Math.floor(background.width() * 1f + 0.02f) + 0.48f,
                    background.top + (float) Math.floor(background.height() * 0.68144f - 0.34f) + 0.84f);
                Path sHARPPath = CacheForTunerBG.sHARPPath;
                sHARPPath.reset();
                sHARPPath.moveTo(background.left + background.width() * 0.85989f, background.top + background.height() * 0.6763f);
                sHARPPath.cubicTo(background.left + background.width() * 0.86126f, background.top + background.height() * 0.67878f, background.left + background.width() * 0.86456f, background.top + background.height() * 0.68144f, background.left + background.width() * 0.86793f, background.top + background.height() * 0.68144f);
                sHARPPath.cubicTo(background.left + background.width() * 0.87615f, background.top + background.height() * 0.68144f, background.left + background.width() * 0.88182f, background.top + background.height() * 0.66602f, background.left + background.width() * 0.88182f, background.top + background.height() * 0.64261f);
                sHARPPath.cubicTo(background.left + background.width() * 0.88182f, background.top + background.height() * 0.6291f, background.left + background.width() * 0.87976f, background.top + background.height() * 0.61615f, background.left + background.width() * 0.87422f, background.top + background.height() * 0.60587f);
                sHARPPath.cubicTo(background.left + background.width() * 0.86967f, background.top + background.height() * 0.5975f, background.left + background.width() * 0.86842f, background.top + background.height() * 0.5935f, background.left + background.width() * 0.86842f, background.top + background.height() * 0.58589f);
                sHARPPath.cubicTo(background.left + background.width() * 0.86842f, background.top + background.height() * 0.57903f, background.left + background.width() * 0.87011f, background.top + background.height() * 0.57256f, background.left + background.width() * 0.8736f, background.top + background.height() * 0.57256f);
                sHARPPath.cubicTo(background.left + background.width() * 0.87596f, background.top + background.height() * 0.57256f, background.left + background.width() * 0.87777f, background.top + background.height() * 0.57466f, background.left + background.width() * 0.87895f, background.top + background.height() * 0.57694f);
                sHARPPath.lineTo(background.left + background.width() * 0.88026f, background.top + background.height() * 0.55543f);
                sHARPPath.cubicTo(background.left + background.width() * 0.87902f, background.top + background.height() * 0.55315f, background.left + background.width() * 0.8764f, background.top + background.height() * 0.55086f, background.left + background.width() * 0.87366f, background.top + background.height() * 0.55086f);
                sHARPPath.cubicTo(background.left + background.width() * 0.86487f, background.top + background.height() * 0.55086f, background.left + background.width() * 0.86039f, background.top + background.height() * 0.56799f, background.left + background.width() * 0.86039f, background.top + background.height() * 0.58855f);
                sHARPPath.cubicTo(background.left + background.width() * 0.86039f, background.top + background.height() * 0.60016f, background.left + background.width() * 0.86257f, background.top + background.height() * 0.61368f, background.left + background.width() * 0.8683f, background.top + background.height() * 0.62434f);
                sHARPPath.cubicTo(background.left + background.width() * 0.87185f, background.top + background.height() * 0.63138f, background.left + background.width() * 0.87372f, background.top + background.height() * 0.63595f, background.left + background.width() * 0.87372f, background.top + background.height() * 0.64527f);
                sHARPPath.cubicTo(background.left + background.width() * 0.87372f, background.top + background.height() * 0.65365f, background.left + background.width() * 0.87185f, background.top + background.height() * 0.65974f, background.left + background.width() * 0.86799f, background.top + background.height() * 0.65974f);
                sHARPPath.cubicTo(background.left + background.width() * 0.86562f, background.top + background.height() * 0.65974f, background.left + background.width() * 0.86276f, background.top + background.height() * 0.65765f, background.left + background.width() * 0.86107f, background.top + background.height() * 0.65479f);
                sHARPPath.lineTo(background.left + background.width() * 0.85989f, background.top + background.height() * 0.6763f);
                sHARPPath.close();
                sHARPPath.moveTo(background.left + background.width() * 0.88655f, background.top + background.height() * 0.552f);
                sHARPPath.lineTo(background.left + background.width() * 0.88655f, background.top + background.height() * 0.6803f);
                sHARPPath.lineTo(background.left + background.width() * 0.89471f, background.top + background.height() * 0.6803f);
                sHARPPath.lineTo(background.left + background.width() * 0.89471f, background.top + background.height() * 0.62662f);
                sHARPPath.lineTo(background.left + background.width() * 0.90325f, background.top + background.height() * 0.62662f);
                sHARPPath.lineTo(background.left + background.width() * 0.90325f, background.top + background.height() * 0.6803f);
                sHARPPath.lineTo(background.left + background.width() * 0.91141f, background.top + background.height() * 0.6803f);
                sHARPPath.lineTo(background.left + background.width() * 0.91141f, background.top + background.height() * 0.552f);
                sHARPPath.lineTo(background.left + background.width() * 0.90325f, background.top + background.height() * 0.552f);
                sHARPPath.lineTo(background.left + background.width() * 0.90325f, background.top + background.height() * 0.6034f);
                sHARPPath.lineTo(background.left + background.width() * 0.89471f, background.top + background.height() * 0.6034f);
                sHARPPath.lineTo(background.left + background.width() * 0.89471f, background.top + background.height() * 0.552f);
                sHARPPath.lineTo(background.left + background.width() * 0.88655f, background.top + background.height() * 0.552f);
                sHARPPath.close();
                sHARPPath.moveTo(background.left + background.width() * 0.93284f, background.top + background.height() * 0.65099f);
                sHARPPath.lineTo(background.left + background.width() * 0.93465f, background.top + background.height() * 0.6803f);
                sHARPPath.lineTo(background.left + background.width() * 0.94256f, background.top + background.height() * 0.6803f);
                sHARPPath.lineTo(background.left + background.width() * 0.9344f, background.top + background.height() * 0.552f);
                sHARPPath.lineTo(background.left + background.width() * 0.92462f, background.top + background.height() * 0.552f);
                sHARPPath.lineTo(background.left + background.width() * 0.91552f, background.top + background.height() * 0.6803f);
                sHARPPath.lineTo(background.left + background.width() * 0.92343f, background.top + background.height() * 0.6803f);
                sHARPPath.lineTo(background.left + background.width() * 0.9253f, background.top + background.height() * 0.65099f);
                sHARPPath.lineTo(background.left + background.width() * 0.93284f, background.top + background.height() * 0.65099f);
                sHARPPath.close();
                sHARPPath.moveTo(background.left + background.width() * 0.92611f, background.top + background.height() * 0.63157f);
                sHARPPath.lineTo(background.left + background.width() * 0.92767f, background.top + background.height() * 0.60492f);
                sHARPPath.cubicTo(background.left + background.width() * 0.92811f, background.top + background.height() * 0.5975f, background.left + background.width() * 0.92873f, background.top + background.height() * 0.58417f, background.left + background.width() * 0.92917f, background.top + background.height() * 0.57561f);
                sHARPPath.lineTo(background.left + background.width() * 0.92935f, background.top + background.height() * 0.57561f);
                sHARPPath.cubicTo(background.left + background.width() * 0.92973f, background.top + background.height() * 0.58417f, background.left + background.width() * 0.93029f, background.top + background.height() * 0.59693f, background.left + background.width() * 0.93072f, background.top + background.height() * 0.60473f);
                sHARPPath.lineTo(background.left + background.width() * 0.93209f, background.top + background.height() * 0.63157f);
                sHARPPath.lineTo(background.left + background.width() * 0.92611f, background.top + background.height() * 0.63157f);
                sHARPPath.close();
                sHARPPath.moveTo(background.left + background.width() * 0.94717f, background.top + background.height() * 0.6803f);
                sHARPPath.lineTo(background.left + background.width() * 0.95533f, background.top + background.height() * 0.6803f);
                sHARPPath.lineTo(background.left + background.width() * 0.95533f, background.top + background.height() * 0.6291f);
                sHARPPath.lineTo(background.left + background.width() * 0.95652f, background.top + background.height() * 0.6291f);
                sHARPPath.cubicTo(background.left + background.width() * 0.95926f, background.top + background.height() * 0.6291f, background.left + background.width() * 0.96056f, background.top + background.height() * 0.63366f, background.left + background.width() * 0.96131f, background.top + background.height() * 0.64965f);
                sHARPPath.cubicTo(background.left + background.width() * 0.96194f, background.top + background.height() * 0.66374f, background.left + background.width() * 0.96287f, background.top + background.height() * 0.67668f, background.left + background.width() * 0.96337f, background.top + background.height() * 0.6803f);
                sHARPPath.lineTo(background.left + background.width() * 0.9719f, background.top + background.height() * 0.6803f);
                sHARPPath.cubicTo(background.left + background.width() * 0.97116f, background.top + background.height() * 0.67554f, background.left + background.width() * 0.97003f, background.top + background.height() * 0.65974f, background.left + background.width() * 0.96922f, background.top + background.height() * 0.64547f);
                sHARPPath.cubicTo(background.left + background.width() * 0.96841f, background.top + background.height() * 0.63176f, background.left + background.width() * 0.96698f, background.top + background.height() * 0.62358f, background.left + background.width() * 0.96412f, background.top + background.height() * 0.62015f);
                sHARPPath.lineTo(background.left + background.width() * 0.96412f, background.top + background.height() * 0.61977f);
                sHARPPath.cubicTo(background.left + background.width() * 0.96841f, background.top + background.height() * 0.61368f, background.left + background.width() * 0.97059f, background.top + background.height() * 0.6013f, background.left + background.width() * 0.97059f, background.top + background.height() * 0.5876f);
                sHARPPath.cubicTo(background.left + background.width() * 0.97059f, background.top + background.height() * 0.57656f, background.left + background.width() * 0.96985f, background.top + background.height() * 0.56799f, background.left + background.width() * 0.96729f, background.top + background.height() * 0.56095f);
                sHARPPath.cubicTo(background.left + background.width() * 0.96455f, background.top + background.height() * 0.55334f, background.left + background.width() * 0.96056f, background.top + background.height() * 0.55143f, background.left + background.width() * 0.95608f, background.top + background.height() * 0.55143f);
                sHARPPath.cubicTo(background.left + background.width() * 0.95296f, background.top + background.height() * 0.55143f, background.left + background.width() * 0.94972f, background.top + background.height() * 0.55239f, background.left + background.width() * 0.94717f, background.top + background.height() * 0.55391f);
                sHARPPath.lineTo(background.left + background.width() * 0.94717f, background.top + background.height() * 0.6803f);
                sHARPPath.close();
                sHARPPath.moveTo(background.left + background.width() * 0.95533f, background.top + background.height() * 0.57161f);
                sHARPPath.cubicTo(background.left + background.width() * 0.95577f, background.top + background.height() * 0.57104f, background.left + background.width() * 0.95658f, background.top + background.height() * 0.57085f, background.left + background.width() * 0.95726f, background.top + background.height() * 0.57085f);
                sHARPPath.cubicTo(background.left + background.width() * 0.96094f, background.top + background.height() * 0.57123f, background.left + background.width() * 0.96237f, background.top + background.height() * 0.57903f, background.left + background.width() * 0.96237f, background.top + background.height() * 0.58988f);
                sHARPPath.cubicTo(background.left + background.width() * 0.96237f, background.top + background.height() * 0.60111f, background.left + background.width() * 0.96032f, background.top + background.height() * 0.60987f, background.left + background.width() * 0.95676f, background.top + background.height() * 0.60987f);
                sHARPPath.lineTo(background.left + background.width() * 0.95533f, background.top + background.height() * 0.60987f);
                sHARPPath.lineTo(background.left + background.width() * 0.95533f, background.top + background.height() * 0.57161f);
                sHARPPath.close();
                sHARPPath.moveTo(background.left + background.width() * 0.97645f, background.top + background.height() * 0.6803f);
                sHARPPath.lineTo(background.left + background.width() * 0.98461f, background.top + background.height() * 0.6803f);
                sHARPPath.lineTo(background.left + background.width() * 0.98461f, background.top + background.height() * 0.63252f);
                sHARPPath.cubicTo(background.left + background.width() * 0.98511f, background.top + background.height() * 0.63252f, background.left + background.width() * 0.98567f, background.top + background.height() * 0.63252f, background.left + background.width() * 0.98623f, background.top + background.height() * 0.63252f);
                sHARPPath.cubicTo(background.left + background.width() * 0.9896f, background.top + background.height() * 0.63252f, background.left + background.width() * 0.99383f, background.top + background.height() * 0.62871f, background.left + background.width() * 0.99645f, background.top + background.height() * 0.62034f);
                sHARPPath.cubicTo(background.left + background.width() * 0.99863f, background.top + background.height() * 0.61311f, background.left + background.width() * 1f, background.top + background.height() * 0.6034f, background.left + background.width() * 1f, background.top + background.height() * 0.5895f);
                sHARPPath.cubicTo(background.left + background.width() * 1f, background.top + background.height() * 0.57865f, background.left + background.width() * 0.99888f, background.top + background.height() * 0.56799f, background.left + background.width() * 0.99639f, background.top + background.height() * 0.56133f);
                sHARPPath.cubicTo(background.left + background.width() * 0.99365f, background.top + background.height() * 0.55353f, background.left + background.width() * 0.98985f, background.top + background.height() * 0.55143f, background.left + background.width() * 0.98499f, background.top + background.height() * 0.55143f);
                sHARPPath.cubicTo(background.left + background.width() * 0.98187f, background.top + background.height() * 0.55143f, background.left + background.width() * 0.97876f, background.top + background.height() * 0.55239f, background.left + background.width() * 0.97645f, background.top + background.height() * 0.55391f);
                sHARPPath.lineTo(background.left + background.width() * 0.97645f, background.top + background.height() * 0.6803f);
                sHARPPath.close();
                sHARPPath.moveTo(background.left + background.width() * 0.98461f, background.top + background.height() * 0.57256f);
                sHARPPath.cubicTo(background.left + background.width() * 0.98511f, background.top + background.height() * 0.57199f, background.left + background.width() * 0.98586f, background.top + background.height() * 0.57161f, background.left + background.width() * 0.98661f, background.top + background.height() * 0.57161f);
                sHARPPath.cubicTo(background.left + background.width() * 0.99041f, background.top + background.height() * 0.57161f, background.left + background.width() * 0.9919f, background.top + background.height() * 0.58037f, background.left + background.width() * 0.9919f, background.top + background.height() * 0.5916f);
                sHARPPath.cubicTo(background.left + background.width() * 0.9919f, background.top + background.height() * 0.60359f, background.left + background.width() * 0.99003f, background.top + background.height() * 0.61254f, background.left + background.width() * 0.98592f, background.top + background.height() * 0.61254f);
                sHARPPath.cubicTo(background.left + background.width() * 0.98542f, background.top + background.height() * 0.61254f, background.left + background.width() * 0.98499f, background.top + background.height() * 0.61254f, background.left + background.width() * 0.98461f, background.top + background.height() * 0.61215f);
                sHARPPath.lineTo(background.left + background.width() * 0.98461f, background.top + background.height() * 0.57256f);
                sHARPPath.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(Color.WHITE);
                canvas.drawPath(sHARPPath, paint);
                
                // Group
                {
                    RectF group = CacheForTunerBG.group;
                    group.set(background.left + (float) Math.floor(background.width() * 0.06962f + 0.07f) + 0.43f,
                        background.top + (float) Math.floor(background.height() * 0.34741f - 0.11f) + 0.61f,
                        background.left + (float) Math.floor(background.width() * 0.89359f - 0.31f) + 0.81f,
                        background.top + (float) Math.floor(background.height() * 1f + 0.33f) + 0.17f);
                    
                    // Bezier 3
                    RectF bezier3Rect = CacheForTunerBG.bezier3Rect;
                    bezier3Rect.set(background.left + (float) Math.floor(background.width() * 0.06962f + 0.07f) + 0.43f,
                        background.top + (float) Math.floor(background.height() * 0.9301f - 0.04f) + 0.54f,
                        background.left + (float) Math.floor(background.width() * 0.09587f - 0.08f) + 0.58f,
                        background.top + (float) Math.floor(background.height() * 1f + 0.33f) + 0.17f);
                    Path bezier3Path = CacheForTunerBG.bezier3Path;
                    bezier3Path.reset();
                    bezier3Path.moveTo(group.left + group.width() * 0.03186f, group.top + group.height() * 1f);
                    bezier3Path.lineTo(group.left, group.top + group.height() * 0.89289f);
                    
                    paint.reset();
                    paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                    paint.setStrokeWidth(6f);
                    paint.setStrokeCap(Paint.Cap.ROUND);
                    paint.setStrokeMiter(10f);
                    canvas.save();
                    paint.setStyle(Paint.Style.STROKE);
                    paint.setColor(Color.WHITE);
                    canvas.drawPath(bezier3Path, paint);
                    canvas.restore();
                    
                    // Bezier 4
                    RectF bezier4Rect = CacheForTunerBG.bezier4Rect;
                    bezier4Rect.set(background.left + (float) Math.floor(background.width() * 0.1363f - 0.11f) + 0.61f,
                        background.top + (float) Math.floor(background.height() * 0.73038f + 0.32f) + 0.18f,
                        background.left + (float) Math.floor(background.width() * 0.15443f - 0.02f) + 0.52f,
                        background.top + (float) Math.floor(background.height() * 0.79898f + 0.02f) + 0.48f);
                    Path bezier4Path = CacheForTunerBG.bezier4Path;
                    bezier4Path.reset();
                    bezier4Path.moveTo(group.left + group.width() * 0.10293f, group.top + group.height() * 0.69197f);
                    bezier4Path.lineTo(group.left + group.width() * 0.08093f, group.top + group.height() * 0.58685f);
                    
                    paint.reset();
                    paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                    paint.setStrokeWidth(6f);
                    paint.setStrokeCap(Paint.Cap.ROUND);
                    paint.setStrokeMiter(10f);
                    canvas.save();
                    paint.setStyle(Paint.Style.STROKE);
                    paint.setColor(Color.WHITE);
                    canvas.drawPath(bezier4Path, paint);
                    canvas.restore();
                    
                    // Bezier 6
                    RectF bezier6Rect = CacheForTunerBG.bezier6Rect;
                    bezier6Rect.set(background.left + (float) Math.floor(background.width() * 0.2127f + 0.26f) + 0.24f,
                        background.top + (float) Math.floor(background.height() * 0.56338f + 0.43f) + 0.07f,
                        background.left + (float) Math.floor(background.width() * 0.22865f + 0.02f) + 0.48f,
                        background.top + (float) Math.floor(background.height() * 0.6504f + 0.49f) + 0.01f);
                    Path bezier6Path = CacheForTunerBG.bezier6Path;
                    bezier6Path.reset();
                    bezier6Path.moveTo(group.left + group.width() * 0.19301f, group.top + group.height() * 0.4643f);
                    bezier6Path.lineTo(group.left + group.width() * 0.17365f, group.top + group.height() * 0.33094f);
                    
                    paint.reset();
                    paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                    paint.setStrokeWidth(6f);
                    paint.setStrokeCap(Paint.Cap.ROUND);
                    paint.setStrokeMiter(10f);
                    canvas.save();
                    paint.setStyle(Paint.Style.STROKE);
                    paint.setColor(Color.WHITE);
                    canvas.drawPath(bezier6Path, paint);
                    canvas.restore();
                    
                    // Bezier 7
                    RectF bezier7Rect = CacheForTunerBG.bezier7Rect;
                    bezier7Rect.set(background.left + (float) Math.floor(background.width() * 0.29759f + 0.1f) + 0.4f,
                        background.top + (float) Math.floor(background.height() * 0.44363f - 0.37f) + 0.87f,
                        background.left + (float) Math.floor(background.width() * 0.30798f + 0.13f) + 0.37f,
                        background.top + (float) Math.floor(background.height() * 0.52782f + 0.4f) + 0.1f);
                    Path bezier7Path = CacheForTunerBG.bezier7Path;
                    bezier7Path.reset();
                    bezier7Path.moveTo(group.left + group.width() * 0.28928f, group.top + group.height() * 0.27645f);
                    bezier7Path.lineTo(group.left + group.width() * 0.27668f, group.top + group.height() * 0.14744f);
                    
                    paint.reset();
                    paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                    paint.setStrokeWidth(6f);
                    paint.setStrokeCap(Paint.Cap.ROUND);
                    paint.setStrokeMiter(10f);
                    canvas.save();
                    paint.setStyle(Paint.Style.STROKE);
                    paint.setColor(Color.WHITE);
                    canvas.drawPath(bezier7Path, paint);
                    canvas.restore();
                    
                    // Bezier 10
                    RectF bezier10Rect = CacheForTunerBG.bezier10Rect;
                    bezier10Rect.set(background.left + (float) Math.floor(background.width() * 0.38789f - 0.2f) + 0.7f,
                        background.top + (float) Math.floor(background.height() * 0.36823f - 0.36f) + 0.86f,
                        background.left + (float) Math.floor(background.width() * 0.3938f + 0.27f) + 0.23f,
                        background.top + (float) Math.floor(background.height() * 0.46462f + 0.34f) + 0.16f);
                    Path bezier10Path = CacheForTunerBG.bezier10Path;
                    bezier10Path.reset();
                    bezier10Path.moveTo(group.left + group.width() * 0.39343f, group.top + group.height() * 0.17961f);
                    bezier10Path.lineTo(group.left + group.width() * 0.38626f, group.top + group.height() * 0.0319f);
                    
                    paint.reset();
                    paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                    paint.setStrokeWidth(6f);
                    paint.setStrokeCap(Paint.Cap.ROUND);
                    paint.setStrokeMiter(10f);
                    canvas.save();
                    paint.setStyle(Paint.Style.STROKE);
                    paint.setColor(Color.WHITE);
                    canvas.drawPath(bezier10Path, paint);
                    canvas.restore();
                    
                    // Bezier 13
                    RectF bezier13Rect = CacheForTunerBG.bezier13Rect;
                    bezier13Rect.set(background.left + (float) Math.floor(background.width() * 0.47883f + 0.01f) + 0.49f,
                        background.top + (float) Math.floor(background.height() * 0.34741f - 0.11f) + 0.61f,
                        background.left + (float) Math.floor(background.width() * 0.47883f + 0.01f) + 0.49f,
                        background.top + (float) Math.floor(background.height() * 0.43444f - 0.05f) + 0.55f);
                    Path bezier13Path = CacheForTunerBG.bezier13Path;
                    bezier13Path.reset();
                    bezier13Path.moveTo(group.left + group.width() * 0.49663f, group.top + group.height() * 0.13337f);
                    bezier13Path.lineTo(group.left + group.width() * 0.49663f, group.top);
                    
                    paint.reset();
                    paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                    paint.setStrokeWidth(8f);
                    paint.setStrokeCap(Paint.Cap.ROUND);
                    paint.setStrokeMiter(10f);
                    canvas.save();
                    paint.setStyle(Paint.Style.STROKE);
                    paint.setColor(Color.WHITE);
                    canvas.drawPath(bezier13Path, paint);
                    canvas.restore();
                    
                    // Bezier 16
                    RectF bezier16Rect = CacheForTunerBG.bezier16Rect;
                    bezier16Rect.set(background.left + (float) Math.floor(background.width() * 0.86734f - 0.17f) + 0.67f,
                        background.top + (float) Math.floor(background.height() * 0.9301f - 0.04f) + 0.54f,
                        background.left + (float) Math.floor(background.width() * 0.89359f - 0.31f) + 0.81f,
                        background.top + (float) Math.floor(background.height() * 1f + 0.33f) + 0.17f);
                    Path bezier16Path = CacheForTunerBG.bezier16Path;
                    bezier16Path.reset();
                    bezier16Path.moveTo(group.left + group.width() * 0.96814f, group.top + group.height() * 1f);
                    bezier16Path.lineTo(group.left + group.width() * 1f, group.top + group.height() * 0.89289f);
                    
                    paint.reset();
                    paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                    paint.setStrokeWidth(6f);
                    paint.setStrokeCap(Paint.Cap.ROUND);
                    paint.setStrokeMiter(10f);
                    canvas.save();
                    paint.setStyle(Paint.Style.STROKE);
                    paint.setColor(Color.WHITE);
                    canvas.drawPath(bezier16Path, paint);
                    canvas.restore();
                    
                    // Bezier 19
                    RectF bezier19Rect = CacheForTunerBG.bezier19Rect;
                    bezier19Rect.set(background.left + (float) Math.floor(background.width() * 0.80878f - 0.22f) + 0.72f,
                        background.top + (float) Math.floor(background.height() * 0.73038f + 0.32f) + 0.18f,
                        background.left + (float) Math.floor(background.width() * 0.82691f - 0.14f) + 0.64f,
                        background.top + (float) Math.floor(background.height() * 0.79898f + 0.02f) + 0.48f);
                    Path bezier19Path = CacheForTunerBG.bezier19Path;
                    bezier19Path.reset();
                    bezier19Path.moveTo(group.left + group.width() * 0.89707f, group.top + group.height() * 0.69197f);
                    bezier19Path.lineTo(group.left + group.width() * 0.91907f, group.top + group.height() * 0.58685f);
                    
                    paint.reset();
                    paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                    paint.setStrokeWidth(6f);
                    paint.setStrokeCap(Paint.Cap.ROUND);
                    paint.setStrokeMiter(10f);
                    canvas.save();
                    paint.setStyle(Paint.Style.STROKE);
                    paint.setColor(Color.WHITE);
                    canvas.drawPath(bezier19Path, paint);
                    canvas.restore();
                    
                    // Bezier 21
                    RectF bezier21Rect = CacheForTunerBG.bezier21Rect;
                    bezier21Rect.set(background.left + (float) Math.floor(background.width() * 0.73456f - 0.26f) + 0.76f,
                        background.top + (float) Math.floor(background.height() * 0.56338f + 0.43f) + 0.07f,
                        background.left + (float) Math.floor(background.width() * 0.75051f + 0.5f) + 0f,
                        background.top + (float) Math.floor(background.height() * 0.6504f + 0.49f) + 0.01f);
                    Path bezier21Path = CacheForTunerBG.bezier21Path;
                    bezier21Path.reset();
                    bezier21Path.moveTo(group.left + group.width() * 0.80699f, group.top + group.height() * 0.4643f);
                    bezier21Path.lineTo(group.left + group.width() * 0.82635f, group.top + group.height() * 0.33094f);
                    
                    paint.reset();
                    paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                    paint.setStrokeWidth(6f);
                    paint.setStrokeCap(Paint.Cap.ROUND);
                    paint.setStrokeMiter(10f);
                    canvas.save();
                    paint.setStyle(Paint.Style.STROKE);
                    paint.setColor(Color.WHITE);
                    canvas.drawPath(bezier21Path, paint);
                    canvas.restore();
                    
                    // Bezier 22
                    RectF bezier22Rect = CacheForTunerBG.bezier22Rect;
                    bezier22Rect.set(background.left + (float) Math.floor(background.width() * 0.65523f - 0.38f) + 0.88f,
                        background.top + (float) Math.floor(background.height() * 0.44363f - 0.37f) + 0.87f,
                        background.left + (float) Math.floor(background.width() * 0.66562f - 0.35f) + 0.85f,
                        background.top + (float) Math.floor(background.height() * 0.52782f + 0.4f) + 0.1f);
                    Path bezier22Path = CacheForTunerBG.bezier22Path;
                    bezier22Path.reset();
                    bezier22Path.moveTo(group.left + group.width() * 0.71072f, group.top + group.height() * 0.27645f);
                    bezier22Path.lineTo(group.left + group.width() * 0.72332f, group.top + group.height() * 0.14744f);
                    
                    paint.reset();
                    paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                    paint.setStrokeWidth(6f);
                    paint.setStrokeCap(Paint.Cap.ROUND);
                    paint.setStrokeMiter(10f);
                    canvas.save();
                    paint.setStyle(Paint.Style.STROKE);
                    paint.setColor(Color.WHITE);
                    canvas.drawPath(bezier22Path, paint);
                    canvas.restore();
                    
                    // Bezier 23
                    RectF bezier23Rect = CacheForTunerBG.bezier23Rect;
                    bezier23Rect.set(background.left + (float) Math.floor(background.width() * 0.56941f + 0.49f) + 0.01f,
                        background.top + (float) Math.floor(background.height() * 0.36823f - 0.36f) + 0.86f,
                        background.left + (float) Math.floor(background.width() * 0.57532f - 0.05f) + 0.55f,
                        background.top + (float) Math.floor(background.height() * 0.46462f + 0.34f) + 0.16f);
                    Path bezier23Path = CacheForTunerBG.bezier23Path;
                    bezier23Path.reset();
                    bezier23Path.moveTo(group.left + group.width() * 0.60657f, group.top + group.height() * 0.17961f);
                    bezier23Path.lineTo(group.left + group.width() * 0.61374f, group.top + group.height() * 0.0319f);
                    
                    paint.reset();
                    paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                    paint.setStrokeWidth(6f);
                    paint.setStrokeCap(Paint.Cap.ROUND);
                    paint.setStrokeMiter(10f);
                    canvas.save();
                    paint.setStyle(Paint.Style.STROKE);
                    paint.setColor(Color.WHITE);
                    canvas.drawPath(bezier23Path, paint);
                    canvas.restore();
                }
            }
            
            // arrowFlat
            {
                RectF arrowFlat = CacheForTunerBG.arrowFlat;
                arrowFlat.set(group2.left + (float) Math.floor(group2.width() * 0.13012f - 0.36f) + 0.86f,
                    group2.top + (float) Math.floor(group2.height() * 0.74763f + 0.19f) + 0.31f,
                    group2.left + (float) Math.floor(group2.width() * 0.26354f + 0.24f) + 0.26f,
                    group2.top + (float) Math.floor(group2.height() * 1f + 0.29f) + 0.21f);
                
                // Bezier 8
                RectF bezier8Rect = CacheForTunerBG.bezier8Rect;
                bezier8Rect.set(arrowFlat.left + (float) Math.floor(arrowFlat.width() * 0.01324f + 0.14f) + 0.36f,
                    arrowFlat.top + (float) Math.floor(arrowFlat.height() * 0.01531f - 0.29f) + 0.79f,
                    arrowFlat.left + (float) Math.floor(arrowFlat.width() * 0.96341f - 0.16f) + 0.66f,
                    arrowFlat.top + (float) Math.floor(arrowFlat.height() * 0.98382f + 0.49f) + 0.01f);
                Path bezier8Path = CacheForTunerBG.bezier8Path;
                bezier8Path.reset();
                bezier8Path.moveTo(arrowFlat.left + arrowFlat.width() * 0.01324f, arrowFlat.top + arrowFlat.height() * 0.01531f);
                bezier8Path.lineTo(arrowFlat.left + arrowFlat.width() * 0.96341f, arrowFlat.top + arrowFlat.height() * 0.49957f);
                bezier8Path.lineTo(arrowFlat.left + arrowFlat.width() * 0.01324f, arrowFlat.top + arrowFlat.height() * 0.98382f);
                bezier8Path.lineTo(arrowFlat.left + arrowFlat.width() * 0.01324f, arrowFlat.top + arrowFlat.height() * 0.01531f);
                bezier8Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                bezier8Path.setFillType(Path.FillType.EVEN_ODD);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(tunerOff);
                canvas.drawPath(bezier8Path, paint);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(2.5f);
                paint.setStrokeMiter(10f);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(Color.WHITE);
                canvas.drawPath(bezier8Path, paint);
                canvas.restore();
                
                // Bezier 14
                if (tuningIsFlat) {
                    RectF bezier14Rect = CacheForTunerBG.bezier14Rect;
                    bezier14Rect.set(arrowFlat.left,
                        arrowFlat.top,
                        arrowFlat.left + (float) Math.floor(arrowFlat.width() + 0.1f) + 0.4f,
                        arrowFlat.top + (float) Math.floor(arrowFlat.height() - 0.4f) + 0.9f);
                    Path bezier14Path = CacheForTunerBG.bezier14Path;
                    bezier14Path.reset();
                    bezier14Path.moveTo(arrowFlat.left, arrowFlat.top);
                    bezier14Path.lineTo(arrowFlat.left + arrowFlat.width() * 1f, arrowFlat.top + arrowFlat.height() * 0.5f);
                    bezier14Path.lineTo(arrowFlat.left, arrowFlat.top + arrowFlat.height() * 1f);
                    bezier14Path.lineTo(arrowFlat.left, arrowFlat.top);
                    bezier14Path.close();
                    
                    paint.reset();
                    paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                    bezier14Path.setFillType(Path.FillType.EVEN_ODD);
                    paint.setStyle(Paint.Style.FILL);
                    paint.setColor(tunerOn);
                    canvas.drawPath(bezier14Path, paint);
                    
                    paint.reset();
                    paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                    paint.setStrokeWidth(2.5f);
                    paint.setStrokeMiter(10f);
                    canvas.save();
                    paint.setStyle(Paint.Style.STROKE);
                    paint.setColor(Color.WHITE);
                    canvas.drawPath(bezier14Path, paint);
                    canvas.restore();
                }
            }
            
            // arrowSharp
            {
                RectF arrowSharp = CacheForTunerBG.arrowSharp;
                arrowSharp.set(group2.left + (float) Math.floor(group2.width() * 0.70618f - 0.48f) + 0.98f,
                    group2.top + (float) Math.floor(group2.height() * 0.74736f + 0.31f) + 0.19f,
                    group2.left + (float) Math.floor(group2.width() * 0.84551f - 0.41f) + 0.91f,
                    group2.top + (float) Math.floor(group2.height() * 0.9994f - 0.44f) + 0.94f);
                
                // Bezier 5
                RectF bezier5Rect = CacheForTunerBG.bezier5Rect;
                bezier5Rect.set(arrowSharp.left + (float) Math.floor(arrowSharp.width() * 0.01562f - 0.17f) + 0.67f,
                    arrowSharp.top + (float) Math.floor(arrowSharp.height() * 0.00308f + 0.14f) + 0.36f,
                    arrowSharp.left + (float) Math.floor(arrowSharp.width() * 0.99643f - 0.05f) + 0.55f,
                    arrowSharp.top + (float) Math.floor(arrowSharp.height() * 0.98648f + 0.33f) + 0.17f);
                Path bezier5Path = CacheForTunerBG.bezier5Path;
                bezier5Path.reset();
                bezier5Path.moveTo(arrowSharp.left + arrowSharp.width() * 0.99643f, arrowSharp.top + arrowSharp.height() * 0.00308f);
                bezier5Path.lineTo(arrowSharp.left + arrowSharp.width() * 0.01562f, arrowSharp.top + arrowSharp.height() * 0.49478f);
                bezier5Path.lineTo(arrowSharp.left + arrowSharp.width() * 0.99643f, arrowSharp.top + arrowSharp.height() * 0.98648f);
                bezier5Path.lineTo(arrowSharp.left + arrowSharp.width() * 0.99643f, arrowSharp.top + arrowSharp.height() * 0.00308f);
                bezier5Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                bezier5Path.setFillType(Path.FillType.EVEN_ODD);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(tunerOff);
                canvas.drawPath(bezier5Path, paint);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(2f);
                paint.setStrokeMiter(10f);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(Color.WHITE);
                canvas.drawPath(bezier5Path, paint);
                canvas.restore();
                
                // Bezier 20
                if (tuningIsSharp) {
                    RectF bezier20Rect = CacheForTunerBG.bezier20Rect;
                    bezier20Rect.set(arrowSharp.left,
                        arrowSharp.top,
                        arrowSharp.left + (float) Math.floor(arrowSharp.width() - 0.44f) + 0.94f,
                        arrowSharp.top + (float) Math.floor(arrowSharp.height() - 0.25f) + 0.75f);
                    Path bezier20Path = CacheForTunerBG.bezier20Path;
                    bezier20Path.reset();
                    bezier20Path.moveTo(arrowSharp.left + arrowSharp.width() * 1f, arrowSharp.top);
                    bezier20Path.lineTo(arrowSharp.left, arrowSharp.top + arrowSharp.height() * 0.5f);
                    bezier20Path.lineTo(arrowSharp.left + arrowSharp.width() * 1f, arrowSharp.top + arrowSharp.height() * 1f);
                    bezier20Path.lineTo(arrowSharp.left + arrowSharp.width() * 1f, arrowSharp.top);
                    bezier20Path.close();
                    
                    paint.reset();
                    paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                    bezier20Path.setFillType(Path.FillType.EVEN_ODD);
                    paint.setStyle(Paint.Style.FILL);
                    paint.setColor(connectedColor);
                    canvas.drawPath(bezier20Path, paint);
                    
                    paint.reset();
                    paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                    paint.setStrokeWidth(2f);
                    paint.setStrokeMiter(10f);
                    canvas.save();
                    paint.setStyle(Paint.Style.STROKE);
                    paint.setColor(Color.WHITE);
                    canvas.drawPath(bezier20Path, paint);
                    canvas.restore();
                }
            }
        }
    }
    
    private static class CacheForTunerNeedle {
        private static Paint paint = new Paint();
        private static RectF needleRect = new RectF();
        private static Path needlePath = new Path();
    }
    
    
    public static void drawTunerNeedle(Canvas canvas, RectF frame) {
        // General Declarations
        Paint paint = CacheForTunerNeedle.paint;
        
        // Local Colors
        int tunerOn = Color.argb(255, 255, 0, 0);
        
        // needle
        RectF needleRect = CacheForTunerNeedle.needleRect;
        needleRect.set(frame.left + (float) Math.floor(frame.width() * 0.17529f + 0.1f) + 0.4f,
            frame.top + (float) Math.floor(frame.height() * 0.00472f - 0.47f) + 0.97f,
            frame.left + (float) Math.floor(frame.width() * 0.67529f + 0.1f) + 0.4f,
            frame.top + (float) Math.floor(frame.height() * 0.51663f - 0.47f) + 0.97f);
        Path needlePath = CacheForTunerNeedle.needlePath;
        needlePath.reset();
        needlePath.moveTo(needleRect.left, needleRect.top);
        needlePath.lineTo(needleRect.right, needleRect.top);
        needlePath.lineTo(needleRect.right, needleRect.bottom);
        needlePath.lineTo(needleRect.left, needleRect.bottom);
        needlePath.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(tunerOn);
        canvas.drawPath(needlePath, paint);
    }
    
    private static class CacheForTunerAudial {
        private static RectF guitar = new RectF();
        private static RectF tunerAudialGuitarString0Rect = new RectF();
        private static RectF tunerAudialGuitarString0TargetRect = new RectF();
        private static RectF symbol2Rect = new RectF();
        private static RectF symbol2TargetRect = new RectF();
        private static RectF symbol3Rect = new RectF();
        private static RectF symbol3TargetRect = new RectF();
        private static RectF symbol4Rect = new RectF();
        private static RectF symbol4TargetRect = new RectF();
        private static RectF symbol5Rect = new RectF();
        private static RectF symbol5TargetRect = new RectF();
        private static RectF symbol6Rect = new RectF();
        private static RectF symbol6TargetRect = new RectF();
        private static RectF symbol19Rect = new RectF();
        private static RectF symbol19TargetRect = new RectF();
        private static RectF symbol11Rect = new RectF();
        private static RectF symbol11TargetRect = new RectF();
        private static RectF symbol12Rect = new RectF();
        private static RectF symbol12TargetRect = new RectF();
        private static RectF symbol13Rect = new RectF();
        private static RectF symbol13TargetRect = new RectF();
        private static RectF symbol14Rect = new RectF();
        private static RectF symbol14TargetRect = new RectF();
        private static RectF symbol15Rect = new RectF();
        private static RectF symbol15TargetRect = new RectF();
        private static RectF bass = new RectF();
        private static RectF symbolRect = new RectF();
        private static RectF symbolTargetRect = new RectF();
        private static RectF symbol8Rect = new RectF();
        private static RectF symbol8TargetRect = new RectF();
        private static RectF symbol9Rect = new RectF();
        private static RectF symbol9TargetRect = new RectF();
        private static RectF symbol10Rect = new RectF();
        private static RectF symbol10TargetRect = new RectF();
        private static RectF symbol7Rect = new RectF();
        private static RectF symbol7TargetRect = new RectF();
        private static RectF symbol16Rect = new RectF();
        private static RectF symbol16TargetRect = new RectF();
        private static RectF symbol17Rect = new RectF();
        private static RectF symbol17TargetRect = new RectF();
        private static RectF symbol18Rect = new RectF();
        private static RectF symbol18TargetRect = new RectF();
    }
    
    
    public static void drawTunerAudial(Canvas canvas, RectF frame, boolean isBass, float selectedString) {
        // Local Variables
        boolean string0isSelected = selectedString == 0f;
        boolean string3isSelected = selectedString == 3f;
        boolean string5isSelected = selectedString == 5f;
        boolean string4isSelected = selectedString == 4f;
        boolean isGuitar = !isBass;
        boolean string2isSelected = selectedString == 2f;
        boolean string1isSelected = selectedString == 1f;
        
        // guitar
        if (isGuitar) {
            RectF guitar = CacheForTunerAudial.guitar;
            guitar.set(frame.left + (float) Math.floor(frame.width() * 0.18623f + 0.39f) + 0.11f,
                frame.top + (float) Math.floor(frame.height() * 0.24953f + 0.31f) + 0.19f,
                frame.left + (float) Math.floor(frame.width() * 0.98534f - 0.05f) + 0.55f,
                frame.top + (float) Math.floor(frame.height() * 0.83106f + 0.31f) + 0.19f);
            
            // TunerAudialGuitarString0
            RectF tunerAudialGuitarString0Rect = CacheForTunerAudial.tunerAudialGuitarString0Rect;
            tunerAudialGuitarString0Rect.set(guitar.left,
                guitar.top,
                guitar.left + (float) Math.floor(guitar.width() + 0.06f) + 0.44f,
                guitar.top + (float) Math.floor(guitar.height() * 0.06279f - 0.23f) + 0.73f);
            canvas.save();
            canvas.clipRect(tunerAudialGuitarString0Rect);
            canvas.translate(tunerAudialGuitarString0Rect.left, tunerAudialGuitarString0Rect.top);
            RectF tunerAudialGuitarString0TargetRect = CacheForTunerAudial.tunerAudialGuitarString0TargetRect;
            tunerAudialGuitarString0TargetRect.set(0f, 0f, tunerAudialGuitarString0Rect.width(), tunerAudialGuitarString0Rect.height());
            GuitarTunesStyleKit.drawTunerAudialGuitarString(canvas, tunerAudialGuitarString0TargetRect, ResizingBehavior.Stretch);
            canvas.restore();
            
            // Symbol 2
            RectF symbol2Rect = CacheForTunerAudial.symbol2Rect;
            symbol2Rect.set(guitar.left,
                guitar.top + (float) Math.floor(guitar.height() * 0.17772f + 0.32f) + 0.18f,
                guitar.left + (float) Math.floor(guitar.width() + 0.06f) + 0.44f,
                guitar.top + (float) Math.floor(guitar.height() * 0.24051f - 0.41f) + 0.91f);
            canvas.save();
            canvas.clipRect(symbol2Rect);
            canvas.translate(symbol2Rect.left, symbol2Rect.top);
            RectF symbol2TargetRect = CacheForTunerAudial.symbol2TargetRect;
            symbol2TargetRect.set(0f, 0f, symbol2Rect.width(), symbol2Rect.height());
            GuitarTunesStyleKit.drawTunerAudialGuitarString(canvas, symbol2TargetRect, ResizingBehavior.Stretch);
            canvas.restore();
            
            // Symbol 3
            RectF symbol3Rect = CacheForTunerAudial.symbol3Rect;
            symbol3Rect.set(guitar.left,
                guitar.top + (float) Math.floor(guitar.height() * 0.36026f + 0.32f) + 0.18f,
                guitar.left + (float) Math.floor(guitar.width() + 0.06f) + 0.44f,
                guitar.top + (float) Math.floor(guitar.height() * 0.4257f - 0.41f) + 0.91f);
            canvas.save();
            canvas.clipRect(symbol3Rect);
            canvas.translate(symbol3Rect.left, symbol3Rect.top);
            RectF symbol3TargetRect = CacheForTunerAudial.symbol3TargetRect;
            symbol3TargetRect.set(0f, 0f, symbol3Rect.width(), symbol3Rect.height());
            GuitarTunesStyleKit.drawTunerAudialGuitarString(canvas, symbol3TargetRect, ResizingBehavior.Stretch);
            canvas.restore();
            
            // Symbol 4
            RectF symbol4Rect = CacheForTunerAudial.symbol4Rect;
            symbol4Rect.set(guitar.left,
                guitar.top + (float) Math.floor(guitar.height() * 0.56397f + 0.32f) + 0.18f,
                guitar.left + (float) Math.floor(guitar.width() + 0.06f) + 0.44f,
                guitar.top + (float) Math.floor(guitar.height() * 0.62676f - 0.41f) + 0.91f);
            canvas.save();
            canvas.clipRect(symbol4Rect);
            canvas.translate(symbol4Rect.left, symbol4Rect.top);
            RectF symbol4TargetRect = CacheForTunerAudial.symbol4TargetRect;
            symbol4TargetRect.set(0f, 0f, symbol4Rect.width(), symbol4Rect.height());
            GuitarTunesStyleKit.drawTunerAudialGuitarString(canvas, symbol4TargetRect, ResizingBehavior.Stretch);
            canvas.restore();
            
            // Symbol 5
            RectF symbol5Rect = CacheForTunerAudial.symbol5Rect;
            symbol5Rect.set(guitar.left,
                guitar.top + (float) Math.floor(guitar.height() * 0.74915f + 0.32f) + 0.18f,
                guitar.left + (float) Math.floor(guitar.width() + 0.06f) + 0.44f,
                guitar.top + (float) Math.floor(guitar.height() * 0.81459f - 0.41f) + 0.91f);
            canvas.save();
            canvas.clipRect(symbol5Rect);
            canvas.translate(symbol5Rect.left, symbol5Rect.top);
            RectF symbol5TargetRect = CacheForTunerAudial.symbol5TargetRect;
            symbol5TargetRect.set(0f, 0f, symbol5Rect.width(), symbol5Rect.height());
            GuitarTunesStyleKit.drawTunerAudialGuitarString(canvas, symbol5TargetRect, ResizingBehavior.Stretch);
            canvas.restore();
            
            // Symbol 6
            RectF symbol6Rect = CacheForTunerAudial.symbol6Rect;
            symbol6Rect.set(guitar.left,
                guitar.top + (float) Math.floor(guitar.height() * 0.93698f + 0.32f) + 0.18f,
                guitar.left + (float) Math.floor(guitar.width() + 0.06f) + 0.44f,
                guitar.top + (float) Math.floor(guitar.height() * 0.99977f - 0.41f) + 0.91f);
            canvas.save();
            canvas.clipRect(symbol6Rect);
            canvas.translate(symbol6Rect.left, symbol6Rect.top);
            RectF symbol6TargetRect = CacheForTunerAudial.symbol6TargetRect;
            symbol6TargetRect.set(0f, 0f, symbol6Rect.width(), symbol6Rect.height());
            GuitarTunesStyleKit.drawTunerAudialGuitarString(canvas, symbol6TargetRect, ResizingBehavior.Stretch);
            canvas.restore();
            
            // Symbol 19
            if (string0isSelected) {
                RectF symbol19Rect = CacheForTunerAudial.symbol19Rect;
                symbol19Rect.set(guitar.left,
                    guitar.top + (float) Math.floor(guitar.height() * 0.00265f + 0.5f),
                    guitar.left + (float) Math.floor(guitar.width() + 0.06f) + 0.44f,
                    guitar.top + (float) Math.floor(guitar.height() * 0.06614f + 0.5f));
                canvas.save();
                canvas.clipRect(symbol19Rect);
                canvas.translate(symbol19Rect.left, symbol19Rect.top);
                RectF symbol19TargetRect = CacheForTunerAudial.symbol19TargetRect;
                symbol19TargetRect.set(0f, 0f, symbol19Rect.width(), symbol19Rect.height());
                GuitarTunesStyleKit.drawTunerAudialGuitarStringGlow(canvas, symbol19TargetRect, ResizingBehavior.Stretch);
                canvas.restore();
            }
            
            // Symbol 11
            if (string1isSelected) {
                RectF symbol11Rect = CacheForTunerAudial.symbol11Rect;
                symbol11Rect.set(guitar.left,
                    guitar.top + (float) Math.floor(guitar.height() * 0.18254f + 0.5f),
                    guitar.left + (float) Math.floor(guitar.width() + 0.06f) + 0.44f,
                    guitar.top + (float) Math.floor(guitar.height() * 0.24603f + 0.5f));
                canvas.save();
                canvas.clipRect(symbol11Rect);
                canvas.translate(symbol11Rect.left, symbol11Rect.top);
                RectF symbol11TargetRect = CacheForTunerAudial.symbol11TargetRect;
                symbol11TargetRect.set(0f, 0f, symbol11Rect.width(), symbol11Rect.height());
                GuitarTunesStyleKit.drawTunerAudialGuitarStringGlow(canvas, symbol11TargetRect, ResizingBehavior.Stretch);
                canvas.restore();
            }
            
            // Symbol 12
            if (string2isSelected) {
                RectF symbol12Rect = CacheForTunerAudial.symbol12Rect;
                symbol12Rect.set(guitar.left,
                    guitar.top + (float) Math.floor(guitar.height() * 0.35714f + 0.5f),
                    guitar.left + (float) Math.floor(guitar.width() + 0.06f) + 0.44f,
                    guitar.top + (float) Math.floor(guitar.height() * 0.42328f + 0.5f));
                canvas.save();
                canvas.clipRect(symbol12Rect);
                canvas.translate(symbol12Rect.left, symbol12Rect.top);
                RectF symbol12TargetRect = CacheForTunerAudial.symbol12TargetRect;
                symbol12TargetRect.set(0f, 0f, symbol12Rect.width(), symbol12Rect.height());
                GuitarTunesStyleKit.drawTunerAudialGuitarStringGlow(canvas, symbol12TargetRect, ResizingBehavior.Stretch);
                canvas.restore();
            }
            
            // Symbol 13
            if (string3isSelected) {
                RectF symbol13Rect = CacheForTunerAudial.symbol13Rect;
                symbol13Rect.set(guitar.left,
                    guitar.top + (float) Math.floor(guitar.height() * 0.5582f + 0.5f),
                    guitar.left + (float) Math.floor(guitar.width() + 0.06f) + 0.44f,
                    guitar.top + (float) Math.floor(guitar.height() * 0.62434f + 0.5f));
                canvas.save();
                canvas.clipRect(symbol13Rect);
                canvas.translate(symbol13Rect.left, symbol13Rect.top);
                RectF symbol13TargetRect = CacheForTunerAudial.symbol13TargetRect;
                symbol13TargetRect.set(0f, 0f, symbol13Rect.width(), symbol13Rect.height());
                GuitarTunesStyleKit.drawTunerAudialGuitarStringGlow(canvas, symbol13TargetRect, ResizingBehavior.Stretch);
                canvas.restore();
            }
            
            // Symbol 14
            if (string4isSelected) {
                RectF symbol14Rect = CacheForTunerAudial.symbol14Rect;
                symbol14Rect.set(guitar.left,
                    guitar.top + (float) Math.floor(guitar.height() * 0.74603f + 0.5f),
                    guitar.left + (float) Math.floor(guitar.width() + 0.06f) + 0.44f,
                    guitar.top + (float) Math.floor(guitar.height() * 0.80952f + 0.5f));
                canvas.save();
                canvas.clipRect(symbol14Rect);
                canvas.translate(symbol14Rect.left, symbol14Rect.top);
                RectF symbol14TargetRect = CacheForTunerAudial.symbol14TargetRect;
                symbol14TargetRect.set(0f, 0f, symbol14Rect.width(), symbol14Rect.height());
                GuitarTunesStyleKit.drawTunerAudialGuitarStringGlow(canvas, symbol14TargetRect, ResizingBehavior.Stretch);
                canvas.restore();
            }
            
            // Symbol 15
            if (string5isSelected) {
                RectF symbol15Rect = CacheForTunerAudial.symbol15Rect;
                symbol15Rect.set(guitar.left,
                    guitar.top + (float) Math.floor(guitar.height() * 0.93651f + 0.5f),
                    guitar.left + (float) Math.floor(guitar.width() + 0.06f) + 0.44f,
                    guitar.top + (float) Math.floor(guitar.height() + 0.5f));
                canvas.save();
                canvas.clipRect(symbol15Rect);
                canvas.translate(symbol15Rect.left, symbol15Rect.top);
                RectF symbol15TargetRect = CacheForTunerAudial.symbol15TargetRect;
                symbol15TargetRect.set(0f, 0f, symbol15Rect.width(), symbol15Rect.height());
                GuitarTunesStyleKit.drawTunerAudialGuitarStringGlow(canvas, symbol15TargetRect, ResizingBehavior.Stretch);
                canvas.restore();
            }
        }
        
        // bass
        if (isBass) {
            RectF bass = CacheForTunerAudial.bass;
            bass.set(frame.left + (float) Math.floor(frame.width() * 0.18728f + 0.5f),
                frame.top + (float) Math.floor(frame.height() * 0.28923f + 0.5f),
                frame.left + (float) Math.floor(frame.width() * 0.99239f - 0.04f) + 0.54f,
                frame.top + (float) Math.floor(frame.height() * 0.77846f + 0.5f));
            
            // Symbol
            RectF symbolRect = CacheForTunerAudial.symbolRect;
            symbolRect.set(bass.left,
                bass.top,
                bass.left + (float) Math.floor(bass.width() - 0.04f) + 0.54f,
                bass.top + (float) Math.floor(bass.height() * 0.07862f + 0.5f));
            canvas.save();
            canvas.clipRect(symbolRect);
            canvas.translate(symbolRect.left, symbolRect.top);
            RectF symbolTargetRect = CacheForTunerAudial.symbolTargetRect;
            symbolTargetRect.set(0f, 0f, symbolRect.width(), symbolRect.height());
            GuitarTunesStyleKit.drawTunerAudialBassString(canvas, symbolTargetRect, ResizingBehavior.Stretch);
            canvas.restore();
            
            // Symbol 8
            RectF symbol8Rect = CacheForTunerAudial.symbol8Rect;
            symbol8Rect.set(bass.left,
                bass.top + (float) Math.floor(bass.height() * 0.28616f + 0.5f),
                bass.left + (float) Math.floor(bass.width() - 0.04f) + 0.54f,
                bass.top + (float) Math.floor(bass.height() * 0.36478f + 0.5f));
            canvas.save();
            canvas.clipRect(symbol8Rect);
            canvas.translate(symbol8Rect.left, symbol8Rect.top);
            RectF symbol8TargetRect = CacheForTunerAudial.symbol8TargetRect;
            symbol8TargetRect.set(0f, 0f, symbol8Rect.width(), symbol8Rect.height());
            GuitarTunesStyleKit.drawTunerAudialBassString(canvas, symbol8TargetRect, ResizingBehavior.Stretch);
            canvas.restore();
            
            // Symbol 9
            RectF symbol9Rect = CacheForTunerAudial.symbol9Rect;
            symbol9Rect.set(bass.left,
                bass.top + (float) Math.floor(bass.height() * 0.60377f + 0.5f),
                bass.left + (float) Math.floor(bass.width() - 0.04f) + 0.54f,
                bass.top + (float) Math.floor(bass.height() * 0.68553f + 0.5f));
            canvas.save();
            canvas.clipRect(symbol9Rect);
            canvas.translate(symbol9Rect.left, symbol9Rect.top);
            RectF symbol9TargetRect = CacheForTunerAudial.symbol9TargetRect;
            symbol9TargetRect.set(0f, 0f, symbol9Rect.width(), symbol9Rect.height());
            GuitarTunesStyleKit.drawTunerAudialBassString(canvas, symbol9TargetRect, ResizingBehavior.Stretch);
            canvas.restore();
            
            // Symbol 10
            RectF symbol10Rect = CacheForTunerAudial.symbol10Rect;
            symbol10Rect.set(bass.left,
                bass.top + (float) Math.floor(bass.height() * 0.92138f + 0.5f),
                bass.left + (float) Math.floor(bass.width() - 0.04f) + 0.54f,
                bass.top + (float) Math.floor(bass.height() + 0.5f));
            canvas.save();
            canvas.clipRect(symbol10Rect);
            canvas.translate(symbol10Rect.left, symbol10Rect.top);
            RectF symbol10TargetRect = CacheForTunerAudial.symbol10TargetRect;
            symbol10TargetRect.set(0f, 0f, symbol10Rect.width(), symbol10Rect.height());
            GuitarTunesStyleKit.drawTunerAudialBassString(canvas, symbol10TargetRect, ResizingBehavior.Stretch);
            canvas.restore();
            
            // Symbol 7
            if (string2isSelected) {
                RectF symbol7Rect = CacheForTunerAudial.symbol7Rect;
                symbol7Rect.set(bass.left + (float) Math.floor(bass.width() * 0.00163f + 0.39f) + 0.11f,
                    bass.top + (float) Math.floor(bass.height() * 0.00689f + 0.31f) + 0.19f,
                    bass.left + (float) Math.floor(bass.width() * 0.99707f - 0.04f) + 0.54f,
                    bass.top + (float) Math.floor(bass.height() * 0.08551f + 0.31f) + 0.19f);
                canvas.save();
                canvas.clipRect(symbol7Rect);
                canvas.translate(symbol7Rect.left, symbol7Rect.top);
                RectF symbol7TargetRect = CacheForTunerAudial.symbol7TargetRect;
                symbol7TargetRect.set(0f, 0f, symbol7Rect.width(), symbol7Rect.height());
                GuitarTunesStyleKit.drawTunerAudialGuitarStringGlow(canvas, symbol7TargetRect, ResizingBehavior.Stretch);
                canvas.restore();
            }
            
            // Symbol 16
            if (string3isSelected) {
                RectF symbol16Rect = CacheForTunerAudial.symbol16Rect;
                symbol16Rect.set(bass.left + (float) Math.floor(bass.width() * 0.00163f + 0.39f) + 0.11f,
                    bass.top + (float) Math.floor(bass.height() * 0.29305f + 0.31f) + 0.19f,
                    bass.left + (float) Math.floor(bass.width() * 0.99707f - 0.04f) + 0.54f,
                    bass.top + (float) Math.floor(bass.height() * 0.37167f + 0.31f) + 0.19f);
                canvas.save();
                canvas.clipRect(symbol16Rect);
                canvas.translate(symbol16Rect.left, symbol16Rect.top);
                RectF symbol16TargetRect = CacheForTunerAudial.symbol16TargetRect;
                symbol16TargetRect.set(0f, 0f, symbol16Rect.width(), symbol16Rect.height());
                GuitarTunesStyleKit.drawTunerAudialGuitarStringGlow(canvas, symbol16TargetRect, ResizingBehavior.Stretch);
                canvas.restore();
            }
            
            // Symbol 17
            if (string4isSelected) {
                RectF symbol17Rect = CacheForTunerAudial.symbol17Rect;
                symbol17Rect.set(bass.left + (float) Math.floor(bass.width() * 0.00163f + 0.39f) + 0.11f,
                    bass.top + (float) Math.floor(bass.height() * 0.60752f + 0.31f) + 0.19f,
                    bass.left + (float) Math.floor(bass.width() * 0.99707f - 0.04f) + 0.54f,
                    bass.top + (float) Math.floor(bass.height() * 0.68928f + 0.31f) + 0.19f);
                canvas.save();
                canvas.clipRect(symbol17Rect);
                canvas.translate(symbol17Rect.left, symbol17Rect.top);
                RectF symbol17TargetRect = CacheForTunerAudial.symbol17TargetRect;
                symbol17TargetRect.set(0f, 0f, symbol17Rect.width(), symbol17Rect.height());
                GuitarTunesStyleKit.drawTunerAudialGuitarStringGlow(canvas, symbol17TargetRect, ResizingBehavior.Stretch);
                canvas.restore();
            }
            
            // Symbol 18
            if (string5isSelected) {
                RectF symbol18Rect = CacheForTunerAudial.symbol18Rect;
                symbol18Rect.set(bass.left + (float) Math.floor(bass.width() * 0.00155f + 0.44f) + 0.06f,
                    bass.top + (float) Math.floor(bass.height() * 0.92138f + 0.5f),
                    bass.left + (float) Math.floor(bass.width() * 0.99699f + 0.02f) + 0.48f,
                    bass.top + (float) Math.floor(bass.height() + 0.5f));
                canvas.save();
                canvas.clipRect(symbol18Rect);
                canvas.translate(symbol18Rect.left, symbol18Rect.top);
                RectF symbol18TargetRect = CacheForTunerAudial.symbol18TargetRect;
                symbol18TargetRect.set(0f, 0f, symbol18Rect.width(), symbol18Rect.height());
                GuitarTunesStyleKit.drawTunerAudialGuitarStringGlow(canvas, symbol18TargetRect, ResizingBehavior.Stretch);
                canvas.restore();
            }
        }
    }
    
    private static class CacheForTunerAudialGuitarString {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 603f, 26f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    public static void drawTunerAudialGuitarString(Canvas canvas) {
        GuitarTunesStyleKit.drawTunerAudialGuitarString(canvas, new RectF(0f, 0f, 603f, 26f), ResizingBehavior.AspectFit);
    }
    
    public static void drawTunerAudialGuitarString(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForTunerAudialGuitarString.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForTunerAudialGuitarString.resizedFrame;
        GuitarTunesStyleKit.resizingBehaviorApply(resizing, CacheForTunerAudialGuitarString.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 603f, resizedFrame.height() / 26f);
        
        // Bezier 2
        RectF bezier2Rect = CacheForTunerAudialGuitarString.bezier2Rect;
        bezier2Rect.set(13.49f, 15.38f, 602.68f, 15.38f);
        Path bezier2Path = CacheForTunerAudialGuitarString.bezier2Path;
        bezier2Path.reset();
        bezier2Path.moveTo(13.49f, 15.38f);
        bezier2Path.cubicTo(13.49f, 15.38f, 602.68f, 15.38f, 602.68f, 15.38f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(3f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(Color.BLACK);
        canvas.drawPath(bezier2Path, paint);
        canvas.restore();
        
        // Bezier
        RectF bezierRect = CacheForTunerAudialGuitarString.bezierRect;
        bezierRect.set(11.49f, 10.38f, 602.82f, 10.38f);
        Path bezierPath = CacheForTunerAudialGuitarString.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(11.49f, 10.38f);
        bezierPath.cubicTo(11.49f, 10.38f, 602.82f, 10.38f, 602.82f, 10.38f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(3f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(Color.WHITE);
        canvas.drawPath(bezierPath, paint);
        canvas.restore();
        
        canvas.restore();
    }
    
    private static class CacheForTunerAudialGuitarStringGlow {
        private static Paint paint = new Paint();
        private static Paint shadowPaint = new Paint();
        private static PaintCodeShadow shadow2 = new PaintCodeShadow();
        private static RectF originalFrame = new RectF(0f, 0f, 690f, 22f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    public static void drawTunerAudialGuitarStringGlow(Canvas canvas) {
        GuitarTunesStyleKit.drawTunerAudialGuitarStringGlow(canvas, new RectF(0f, 0f, 690f, 22f), ResizingBehavior.AspectFit);
    }
    
    public static void drawTunerAudialGuitarStringGlow(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForTunerAudialGuitarStringGlow.paint;
        
        // Local Colors
        int guitarNoteRoot = Color.argb(255, 23, 163, 227);
        
        // Local Shadows
        PaintCodeShadow shadow2 = CacheForTunerAudialGuitarStringGlow.shadow2.get(guitarNoteRoot, 3f, 3f, 5f);
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForTunerAudialGuitarStringGlow.resizedFrame;
        GuitarTunesStyleKit.resizingBehaviorApply(resizing, CacheForTunerAudialGuitarStringGlow.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 690f, resizedFrame.height() / 22f);
        
        // Bezier
        RectF bezierRect = CacheForTunerAudialGuitarStringGlow.bezierRect;
        bezierRect.set(11.49f, 8.38f, 690.59f, 8.38f);
        Path bezierPath = CacheForTunerAudialGuitarStringGlow.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(11.49f, 8.38f);
        bezierPath.cubicTo(11.49f, 8.38f, 690.59f, 8.38f, 690.59f, 8.38f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(8f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(guitarNoteRoot);
        canvas.saveLayerAlpha(null, 255, Canvas.ALL_SAVE_FLAG);
        {
            canvas.translate(shadow2.dx, shadow2.dy);
            
            Paint shadowPaint = CacheForTunerAudialGuitarStringGlow.shadowPaint;
            shadowPaint.set(paint);
            shadow2.setBlurOfPaint(shadowPaint);
            canvas.drawPath(bezierPath, shadowPaint);
            shadowPaint.setXfermode(GlobalCache.blendModeSourceIn);
            canvas.saveLayer(null, shadowPaint, Canvas.ALL_SAVE_FLAG);
            {
                canvas.drawColor(shadow2.color);
            }
            canvas.restore();
        }
        canvas.restore();
        canvas.drawPath(bezierPath, paint);
        canvas.restore();
        
        canvas.restore();
    }
    
    private static class CacheForTunerAudialBassString {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 627f, 26f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    public static void drawTunerAudialBassString(Canvas canvas) {
        GuitarTunesStyleKit.drawTunerAudialBassString(canvas, new RectF(0f, 0f, 627f, 26f), ResizingBehavior.AspectFit);
    }
    
    public static void drawTunerAudialBassString(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForTunerAudialBassString.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForTunerAudialBassString.resizedFrame;
        GuitarTunesStyleKit.resizingBehaviorApply(resizing, CacheForTunerAudialBassString.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 627f, resizedFrame.height() / 26f);
        
        // Bezier 2
        RectF bezier2Rect = CacheForTunerAudialBassString.bezier2Rect;
        bezier2Rect.set(11.49f, 17.38f, 623.96f, 17.38f);
        Path bezier2Path = CacheForTunerAudialBassString.bezier2Path;
        bezier2Path.reset();
        bezier2Path.moveTo(11.49f, 17.38f);
        bezier2Path.cubicTo(11.49f, 17.38f, 623.96f, 17.38f, 623.96f, 17.38f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(5f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(Color.BLACK);
        canvas.drawPath(bezier2Path, paint);
        canvas.restore();
        
        // Bezier
        RectF bezierRect = CacheForTunerAudialBassString.bezierRect;
        bezierRect.set(11.49f, 10.38f, 623.61f, 10.38f);
        Path bezierPath = CacheForTunerAudialBassString.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(11.49f, 10.38f);
        bezierPath.cubicTo(11.49f, 10.38f, 623.61f, 10.38f, 623.61f, 10.38f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(6f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(Color.WHITE);
        canvas.drawPath(bezierPath, paint);
        canvas.restore();
        
        canvas.restore();
    }
    
    // Fretboards
    
    private static class CacheForSMARTFret {
        private static Paint paint = new Paint();
        private static PaintCodeGradient fretNutGradient = null;
        private static PaintCodeShadow shadow3 = new PaintCodeShadow();
        private static RectF backgroundRect = new RectF();
        private static Path backgroundPath = new Path();
        private static RectF woodRect = new RectF();
        private static Path woodPath = new Path();
        private static RectF nutRect = new RectF();
        private static Path nutPath = new Path();
        private static RectF nutPathBounds = new RectF();
        private static PaintCodeLinearGradient nutPathGradient = new PaintCodeLinearGradient();
        private static RectF bar = new RectF();
        private static RectF rectangle2Rect = new RectF();
        private static Path rectangle2Path = new Path();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF circleRect = new RectF();
        private static Path circlePath = new Path();
        private static RectF guitarStrings = new RectF();
        private static RectF symbolRect = new RectF();
        private static RectF symbolTargetRect = new RectF();
        private static RectF symbol2Rect = new RectF();
        private static RectF symbol2TargetRect = new RectF();
        private static RectF symbol3Rect = new RectF();
        private static RectF symbol3TargetRect = new RectF();
        private static RectF symbol4Rect = new RectF();
        private static RectF symbol4TargetRect = new RectF();
        private static RectF symbol5Rect = new RectF();
        private static RectF symbol5TargetRect = new RectF();
        private static RectF symbol6Rect = new RectF();
        private static RectF symbol6TargetRect = new RectF();
        private static RectF bassStrings = new RectF();
        private static RectF symbol7Rect = new RectF();
        private static RectF symbol7TargetRect = new RectF();
        private static RectF symbol8Rect = new RectF();
        private static RectF symbol8TargetRect = new RectF();
        private static RectF symbol9Rect = new RectF();
        private static RectF symbol9TargetRect = new RectF();
        private static RectF symbol10Rect = new RectF();
        private static RectF symbol10TargetRect = new RectF();
        private static RectF labelRect = new RectF();
        private static TextPaint labelTextPaint = new TextPaint();
        private static PaintCodeStaticLayout labelStaticLayout = new PaintCodeStaticLayout();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
        private static float[] rectangleCornerRadii = new float[8];
        private static RectF doubleCircle = new RectF();
        private static RectF circle2Rect = new RectF();
        private static Path circle2Path = new Path();
        private static RectF circle3Rect = new RectF();
        private static Path circle3Path = new Path();
    }
    
    
    public static void drawSMARTFret(Canvas canvas, Context context, RectF frame, boolean isBass, boolean hasCapo, float fretNum, float fretLabelSize) {
        // General Declarations
        float displayDensity = context.getResources().getDisplayMetrics().density;
        Paint paint = CacheForSMARTFret.paint;
        
        // Local Colors
        int upControls = Color.argb(255, 0, 0, 0);
        int capodark = Color.argb(255, 59, 41, 20);
        int fretNut1 = Color.argb(255, 243, 178, 115);
        int fretBarDark = Color.argb(255, 207, 208, 209);
        int fretBG = Color.argb(255, 230, 217, 185);
        int capoColor = Color.argb(255, 239, 146, 55);
        int fretNut2 = Color.argb(255, 206, 161, 116);
        int fretNut3 = Color.argb(255, 75, 72, 69);
        int fretBarLight = Color.argb(255, 231, 231, 232);
        
        // Local Gradients
        if (CacheForSMARTFret.fretNutGradient == null)
            CacheForSMARTFret.fretNutGradient = new PaintCodeGradient(new int[]{fretNut1, PaintCodeColor.colorByBlendingColors(fretNut1, 0.5f, fretNut2), fretNut2, PaintCodeColor.colorByBlendingColors(fretNut2, 0.5f, fretNut3), fretNut3, Color.BLACK}, new float[]{0f, 0.49f, 0.67f, 0.78f, 0.96f, 1f});
        PaintCodeGradient fretNutGradient = CacheForSMARTFret.fretNutGradient;
        
        // Local Shadows
        PaintCodeShadow shadow3 = CacheForSMARTFret.shadow3.get(capodark, 0f, 1f, 5f);
        
        // Local Images
        PaintCodeBitmap pc_frettile = GlobalCache.frettile.get(context, R.drawable.frettile);
        
        // Local Variables
        String fretNumString = fretNum > 0f ? String.valueOf((int) Math.round(fretNum)) : "Nut";
        boolean isGuitar = !isBass;
        boolean shouldShowDoubleCircle = fretNum == 12f;
        boolean shouldShowCircle = fretNum == 3f || fretNum == 5f || fretNum == 7f || fretNum == 9f || fretNum == 15f || fretNum == 19f || fretNum == 21f;
        boolean isNut = fretNum == 0f;
        
        // background
        RectF backgroundRect = CacheForSMARTFret.backgroundRect;
        backgroundRect.set(frame.left + (float) Math.floor(frame.width() * 0.00326f + 0.28f) + 0.22f,
            frame.top + (float) Math.floor(frame.height() * 0.00023f + 0.45f) + 0.05f,
            frame.left + (float) Math.floor(frame.width() * 1f + 0.28f) + 0.22f,
            frame.top + (float) Math.floor(frame.height() * 1.00131f - 0.5f) + 1f);
        Path backgroundPath = CacheForSMARTFret.backgroundPath;
        backgroundPath.reset();
        backgroundPath.moveTo(backgroundRect.left, backgroundRect.top);
        backgroundPath.lineTo(backgroundRect.right, backgroundRect.top);
        backgroundPath.lineTo(backgroundRect.right, backgroundRect.bottom);
        backgroundPath.lineTo(backgroundRect.left, backgroundRect.bottom);
        backgroundPath.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(fretBG);
        canvas.drawPath(backgroundPath, paint);
        
        // wood
        RectF woodRect = CacheForSMARTFret.woodRect;
        woodRect.set(frame.left,
            frame.top + (float) Math.floor(frame.height() * 0.11081f + 0.37f) + 0.13f,
            frame.left + (float) Math.floor(frame.width() + 0.28f) + 0.22f,
            frame.top + (float) Math.floor(frame.height() * 0.96192f + 0.37f) + 0.13f);
        Path woodPath = CacheForSMARTFret.woodPath;
        woodPath.reset();
        woodPath.moveTo(woodRect.left, woodRect.top);
        woodPath.lineTo(woodRect.right, woodRect.top);
        woodPath.lineTo(woodRect.right, woodRect.bottom);
        woodPath.lineTo(woodRect.left, woodRect.bottom);
        woodPath.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setShader(pc_frettile.getShader());
        
        canvas.save();
        canvas.clipPath(woodPath);
        canvas.translate(woodRect.left, woodRect.top + 374f);
        canvas.scale(1 / displayDensity, 1 / displayDensity);
        canvas.drawPaint(paint);
        canvas.restore();
        
        // nut
        if (isNut) {
            RectF nutRect = CacheForSMARTFret.nutRect;
            nutRect.set(frame.left,
                frame.top + (float) Math.floor(frame.height() * 0.11079f + 0.37f) + 0.13f,
                frame.left + (float) Math.floor(frame.width() * 0.98208f + 0.5f),
                frame.top + (float) Math.floor(frame.height() * 0.96191f + 0.37f) + 0.13f);
            Path nutPath = CacheForSMARTFret.nutPath;
            nutPath.reset();
            nutPath.moveTo(nutRect.left, nutRect.top);
            nutPath.lineTo(nutRect.right, nutRect.top);
            nutPath.lineTo(nutRect.right, nutRect.bottom);
            nutPath.lineTo(nutRect.left, nutRect.bottom);
            nutPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            RectF nutPathBounds = CacheForSMARTFret.nutPathBounds;
            nutPath.computeBounds(nutPathBounds, true);
            paint.setStyle(Paint.Style.FILL);
            paint.setShader(CacheForSMARTFret.nutPathGradient.get(fretNutGradient, nutPathBounds.left, nutPathBounds.top, nutPathBounds.right, nutPathBounds.top));
            canvas.drawPath(nutPath, paint);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(Color.BLACK);
            canvas.drawPath(nutPath, paint);
            canvas.restore();
        }
        
        // bar
        {
            RectF bar = CacheForSMARTFret.bar;
            bar.set(frame.left + (float) Math.floor((frame.width() - 7.72f) * 1f + 0f) + 0.5f,
                frame.top + (float) Math.floor(frame.height() * 0.11079f + 0.37f) + 0.13f,
                frame.left + (float) Math.floor((frame.width() - 7.72f) * 1f + 0f) + 0.5f + 7.72f,
                frame.top + (float) Math.floor(frame.height() * 0.96138f + 0.48f) + 0.02f);
            
            // Rectangle 2
            RectF rectangle2Rect = CacheForSMARTFret.rectangle2Rect;
            rectangle2Rect.set(bar.left,
                bar.top,
                bar.left + (float) Math.floor(bar.width() - 0.22f) + 0.72f,
                bar.top + (float) Math.floor(bar.height() - 0.39f) + 0.89f);
            Path rectangle2Path = CacheForSMARTFret.rectangle2Path;
            rectangle2Path.reset();
            rectangle2Path.moveTo(rectangle2Rect.left, rectangle2Rect.top);
            rectangle2Path.lineTo(rectangle2Rect.right, rectangle2Rect.top);
            rectangle2Path.lineTo(rectangle2Rect.right, rectangle2Rect.bottom);
            rectangle2Path.lineTo(rectangle2Rect.left, rectangle2Rect.bottom);
            rectangle2Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(fretBarLight);
            canvas.drawPath(rectangle2Path, paint);
            
            // Bezier
            RectF bezierRect = CacheForSMARTFret.bezierRect;
            bezierRect.set(bar.left + (float) Math.floor(bar.width() * 0.25917f + 0.5f) + 0f,
                bar.top + (float) Math.floor(bar.height() * 0.00559f - 0.45f) + 0.95f,
                bar.left + (float) Math.floor(bar.width() * 0.2593f + 0.5f) + 0f,
                bar.top + (float) Math.floor(bar.height() * 0.99782f - 0.02f) + 0.52f);
            Path bezierPath = CacheForSMARTFret.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(bar.left + bar.width() * 0.25917f, bar.top + bar.height() * 0.00559f);
            bezierPath.lineTo(bar.left + bar.width() * 0.25917f, bar.top + bar.height() * 0.99782f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(fretBarLight);
            canvas.drawPath(bezierPath, paint);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(fretBarDark);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
            
            // Bezier 2
            RectF bezier2Rect = CacheForSMARTFret.bezier2Rect;
            bezier2Rect.set(bar.left + (float) Math.floor(bar.width() * 0.74109f - 0.22f) + 0.72f,
                bar.top + (float) Math.floor(bar.height() * 0.00559f - 0.45f) + 0.95f,
                bar.left + (float) Math.floor(bar.width() * 0.74122f - 0.23f) + 0.73f,
                bar.top + (float) Math.floor(bar.height() * 0.99782f - 0.02f) + 0.52f);
            Path bezier2Path = CacheForSMARTFret.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(bar.left + bar.width() * 0.74109f, bar.top + bar.height() * 0.00559f);
            bezier2Path.lineTo(bar.left + bar.width() * 0.74109f, bar.top + bar.height() * 0.99782f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(fretBarLight);
            canvas.drawPath(bezier2Path, paint);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(fretBarDark);
            canvas.drawPath(bezier2Path, paint);
            canvas.restore();
        }
        
        // circle
        if (shouldShowCircle) {
            RectF circleRect = CacheForSMARTFret.circleRect;
            circleRect.set(frame.left + (float) Math.floor(frame.width() * 0.34882f - 0.3f) + 0.8f,
                frame.top + (float) Math.floor(frame.height() * 0.49796f + 0.04f) + 0.46f,
                frame.left + (float) Math.floor(frame.width() * 0.5721f + 0.47f) + 0.03f,
                frame.top + (float) Math.floor(frame.height() * 0.57422f - 0.19f) + 0.69f);
            Path circlePath = CacheForSMARTFret.circlePath;
            circlePath.reset();
            circlePath.addOval(circleRect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(fretBarLight);
            canvas.drawPath(circlePath, paint);
        }
        
        // guitarStrings
        if (isGuitar) {
            RectF guitarStrings = CacheForSMARTFret.guitarStrings;
            guitarStrings.set(frame.left + (float) Math.floor(frame.width() * -0.00326f - 0.28f) + 0.78f,
                frame.top + (float) Math.floor(frame.height() * 0.14542f + 0.45f) + 0.05f,
                frame.left + (float) Math.floor(frame.width() * 1f + 0.28f) + 0.22f,
                frame.top + (float) Math.floor(frame.height() * 0.94147f + 0.45f) + 0.05f);
            
            // Symbol
            RectF symbolRect = CacheForSMARTFret.symbolRect;
            symbolRect.set(guitarStrings.left + (float) Math.floor(guitarStrings.width() * 0.00325f + 0.28f) + 0.22f,
                guitarStrings.top,
                guitarStrings.left + (float) Math.floor(guitarStrings.width() * 1f + 0.05f) + 0.45f,
                guitarStrings.top + (float) Math.floor(guitarStrings.height() * 0.13208f + 0.5f));
            canvas.save();
            canvas.clipRect(symbolRect);
            canvas.translate(symbolRect.left, symbolRect.top);
            RectF symbolTargetRect = CacheForSMARTFret.symbolTargetRect;
            symbolTargetRect.set(0f, 0f, symbolRect.width(), symbolRect.height());
            GuitarTunesStyleKit.drawSMARTGuitarString(canvas, symbolTargetRect, ResizingBehavior.Stretch);
            canvas.restore();
            
            // Symbol 2
            RectF symbol2Rect = CacheForSMARTFret.symbol2Rect;
            symbol2Rect.set(guitarStrings.left + (float) Math.floor(guitarStrings.width() * 0.00325f + 0.28f) + 0.22f,
                guitarStrings.top + (float) Math.floor(guitarStrings.height() * 0.1761f + 0.5f),
                guitarStrings.left + (float) Math.floor(guitarStrings.width() * 1f + 0.05f) + 0.45f,
                guitarStrings.top + (float) Math.floor(guitarStrings.height() * 0.30818f + 0.5f));
            canvas.save();
            canvas.clipRect(symbol2Rect);
            canvas.translate(symbol2Rect.left, symbol2Rect.top);
            RectF symbol2TargetRect = CacheForSMARTFret.symbol2TargetRect;
            symbol2TargetRect.set(0f, 0f, symbol2Rect.width(), symbol2Rect.height());
            GuitarTunesStyleKit.drawSMARTGuitarString(canvas, symbol2TargetRect, ResizingBehavior.Stretch);
            canvas.restore();
            
            // Symbol 3
            RectF symbol3Rect = CacheForSMARTFret.symbol3Rect;
            symbol3Rect.set(guitarStrings.left + (float) Math.floor(guitarStrings.width() * 0.00325f + 0.28f) + 0.22f,
                guitarStrings.top + (float) Math.floor(guitarStrings.height() * 0.34591f + 0.5f),
                guitarStrings.left + (float) Math.floor(guitarStrings.width() * 1f + 0.05f) + 0.45f,
                guitarStrings.top + (float) Math.floor(guitarStrings.height() * 0.47799f + 0.5f));
            canvas.save();
            canvas.clipRect(symbol3Rect);
            canvas.translate(symbol3Rect.left, symbol3Rect.top);
            RectF symbol3TargetRect = CacheForSMARTFret.symbol3TargetRect;
            symbol3TargetRect.set(0f, 0f, symbol3Rect.width(), symbol3Rect.height());
            GuitarTunesStyleKit.drawSMARTGuitarString(canvas, symbol3TargetRect, ResizingBehavior.Stretch);
            canvas.restore();
            
            // Symbol 4
            RectF symbol4Rect = CacheForSMARTFret.symbol4Rect;
            symbol4Rect.set(guitarStrings.left + (float) Math.floor(guitarStrings.width() * 0.00325f + 0.28f) + 0.22f,
                guitarStrings.top + (float) Math.floor(guitarStrings.height() * 0.51572f + 0.5f),
                guitarStrings.left + (float) Math.floor(guitarStrings.width() * 1f + 0.05f) + 0.45f,
                guitarStrings.top + (float) Math.floor(guitarStrings.height() * 0.65409f + 0.5f));
            canvas.save();
            canvas.clipRect(symbol4Rect);
            canvas.translate(symbol4Rect.left, symbol4Rect.top);
            RectF symbol4TargetRect = CacheForSMARTFret.symbol4TargetRect;
            symbol4TargetRect.set(0f, 0f, symbol4Rect.width(), symbol4Rect.height());
            GuitarTunesStyleKit.drawSMARTGuitarString(canvas, symbol4TargetRect, ResizingBehavior.Stretch);
            canvas.restore();
            
            // Symbol 5
            RectF symbol5Rect = CacheForSMARTFret.symbol5Rect;
            symbol5Rect.set(guitarStrings.left,
                guitarStrings.top + (float) Math.floor(guitarStrings.height() * 0.69811f + 0.5f),
                guitarStrings.left + (float) Math.floor(guitarStrings.width() * 0.99675f + 0.28f) + 0.22f,
                guitarStrings.top + (float) Math.floor(guitarStrings.height() * 0.83019f + 0.5f));
            canvas.save();
            canvas.clipRect(symbol5Rect);
            canvas.translate(symbol5Rect.left, symbol5Rect.top);
            RectF symbol5TargetRect = CacheForSMARTFret.symbol5TargetRect;
            symbol5TargetRect.set(0f, 0f, symbol5Rect.width(), symbol5Rect.height());
            GuitarTunesStyleKit.drawSMARTGuitarString(canvas, symbol5TargetRect, ResizingBehavior.Stretch);
            canvas.restore();
            
            // Symbol 6
            RectF symbol6Rect = CacheForSMARTFret.symbol6Rect;
            symbol6Rect.set(guitarStrings.left + (float) Math.floor(guitarStrings.width() * 0.00325f + 0.28f) + 0.22f,
                guitarStrings.top + (float) Math.floor(guitarStrings.height() * 0.86792f + 0.5f),
                guitarStrings.left + (float) Math.floor(guitarStrings.width() * 1f + 0.05f) + 0.45f,
                guitarStrings.top + (float) Math.floor(guitarStrings.height() + 0.5f));
            canvas.save();
            canvas.clipRect(symbol6Rect);
            canvas.translate(symbol6Rect.left, symbol6Rect.top);
            RectF symbol6TargetRect = CacheForSMARTFret.symbol6TargetRect;
            symbol6TargetRect.set(0f, 0f, symbol6Rect.width(), symbol6Rect.height());
            GuitarTunesStyleKit.drawSMARTGuitarString(canvas, symbol6TargetRect, ResizingBehavior.Stretch);
            canvas.restore();
        }
        
        // bassStrings
        if (isBass) {
            RectF bassStrings = CacheForSMARTFret.bassStrings;
            bassStrings.set(frame.left,
                frame.top + (float) Math.floor(frame.height() * 0.18521f - 0.49f) + 0.99f,
                frame.left + (float) Math.floor(frame.width() + 0.28f) + 0.22f,
                frame.top + (float) Math.floor(frame.height() * 0.90616f - 0.49f) + 0.99f);
            
            // Symbol 7
            RectF symbol7Rect = CacheForSMARTFret.symbol7Rect;
            symbol7Rect.set(bassStrings.left,
                bassStrings.top,
                bassStrings.left + (float) Math.floor(bassStrings.width() + 0.28f) + 0.22f,
                bassStrings.top + (float) Math.floor(bassStrings.height() * 0.15972f + 0.5f));
            canvas.save();
            canvas.clipRect(symbol7Rect);
            canvas.translate(symbol7Rect.left, symbol7Rect.top);
            RectF symbol7TargetRect = CacheForSMARTFret.symbol7TargetRect;
            symbol7TargetRect.set(0f, 0f, symbol7Rect.width(), symbol7Rect.height());
            GuitarTunesStyleKit.drawSMARTBassString(canvas, symbol7TargetRect, ResizingBehavior.Stretch);
            canvas.restore();
            
            // Symbol 8
            RectF symbol8Rect = CacheForSMARTFret.symbol8Rect;
            symbol8Rect.set(bassStrings.left,
                bassStrings.top + (float) Math.floor(bassStrings.height() * 0.29167f + 0.5f),
                bassStrings.left + (float) Math.floor(bassStrings.width() + 0.28f) + 0.22f,
                bassStrings.top + (float) Math.floor(bassStrings.height() * 0.4375f + 0.5f));
            canvas.save();
            canvas.clipRect(symbol8Rect);
            canvas.translate(symbol8Rect.left, symbol8Rect.top);
            RectF symbol8TargetRect = CacheForSMARTFret.symbol8TargetRect;
            symbol8TargetRect.set(0f, 0f, symbol8Rect.width(), symbol8Rect.height());
            GuitarTunesStyleKit.drawSMARTBassString(canvas, symbol8TargetRect, ResizingBehavior.Stretch);
            canvas.restore();
            
            // Symbol 9
            RectF symbol9Rect = CacheForSMARTFret.symbol9Rect;
            symbol9Rect.set(bassStrings.left,
                bassStrings.top + (float) Math.floor(bassStrings.height() * 0.5625f + 0.5f),
                bassStrings.left + (float) Math.floor(bassStrings.width() + 0.28f) + 0.22f,
                bassStrings.top + (float) Math.floor(bassStrings.height() * 0.72222f + 0.5f));
            canvas.save();
            canvas.clipRect(symbol9Rect);
            canvas.translate(symbol9Rect.left, symbol9Rect.top);
            RectF symbol9TargetRect = CacheForSMARTFret.symbol9TargetRect;
            symbol9TargetRect.set(0f, 0f, symbol9Rect.width(), symbol9Rect.height());
            GuitarTunesStyleKit.drawSMARTBassString(canvas, symbol9TargetRect, ResizingBehavior.Stretch);
            canvas.restore();
            
            // Symbol 10
            RectF symbol10Rect = CacheForSMARTFret.symbol10Rect;
            symbol10Rect.set(bassStrings.left,
                bassStrings.top + (float) Math.floor(bassStrings.height() * 0.84722f + 0.5f),
                bassStrings.left + (float) Math.floor(bassStrings.width() + 0.28f) + 0.22f,
                bassStrings.top + (float) Math.floor(bassStrings.height() + 0.5f));
            canvas.save();
            canvas.clipRect(symbol10Rect);
            canvas.translate(symbol10Rect.left, symbol10Rect.top);
            RectF symbol10TargetRect = CacheForSMARTFret.symbol10TargetRect;
            symbol10TargetRect.set(0f, 0f, symbol10Rect.width(), symbol10Rect.height());
            GuitarTunesStyleKit.drawSMARTBassString(canvas, symbol10TargetRect, ResizingBehavior.Stretch);
            canvas.restore();
        }
        
        // Label
        RectF labelRect = CacheForSMARTFret.labelRect;
        labelRect.set(frame.left,
            frame.top + (float) Math.floor(frame.height() * 0.0063f + 0.24f) + 0.26f,
            frame.left + (float) Math.floor(frame.width() + 0.28f) + 0.22f,
            frame.top + (float) Math.floor(frame.height() * 0.10778f - 0.03f) + 0.53f);
        TextPaint labelTextPaint = CacheForSMARTFret.labelTextPaint;
        labelTextPaint.reset();
        labelTextPaint.setFlags(Paint.ANTI_ALIAS_FLAG);
        labelTextPaint.setColor(upControls);
        labelTextPaint.setTypeface(Typeface.createFromAsset(context.getAssets(), "HelveticaNeue.dfont"));
        labelTextPaint.setTextSize(fretLabelSize);
        StaticLayout labelStaticLayout = CacheForSMARTFret.labelStaticLayout.get((int) labelRect.width(), Layout.Alignment.ALIGN_CENTER, fretNumString, labelTextPaint);
        canvas.save();
        canvas.clipRect(labelRect);
        canvas.translate(labelRect.left, labelRect.top + (labelRect.height() - labelStaticLayout.getHeight()) / 2f);
        labelStaticLayout.draw(canvas);
        canvas.restore();
        
        // Rectangle
        if (hasCapo) {
            RectF rectangleRect = CacheForSMARTFret.rectangleRect;
            rectangleRect.set(frame.left + (float) Math.floor(frame.width() * 0.07329f + 0.5f),
                frame.top + (float) Math.floor(frame.height() * 0.09536f + 0.45f) + 0.05f,
                frame.left + (float) Math.floor(frame.width() * 0.52768f + 0.5f),
                frame.top + (float) Math.floor(frame.height() * 0.97243f + 0.27f) + 0.23f);
            Path rectanglePath = CacheForSMARTFret.rectanglePath;
            rectanglePath.reset();
            float rectangleCornerRadius = Math.min(Math.min(rectangleRect.width(), rectangleRect.height()) / 2f, 5f);
            float[] rectangleCornerRadii = CacheForSMARTFret.rectangleCornerRadii;
            rectangleCornerRadii[0] = rectangleCornerRadii[1] = rectangleCornerRadius;
            rectangleCornerRadii[2] = rectangleCornerRadii[3] = rectangleCornerRadius;
            rectangleCornerRadii[4] = rectangleCornerRadii[5] = 0f;
            rectangleCornerRadii[6] = rectangleCornerRadii[7] = 0f;
            rectanglePath.addRoundRect(rectangleRect, rectangleCornerRadii, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(capoColor);
            canvas.drawPath(rectanglePath, paint);
            canvas.saveLayerAlpha(null, 255, Canvas.ALL_SAVE_FLAG);
            {
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setColor(shadow3.color);
                canvas.drawPath(rectanglePath, paint);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setXfermode(GlobalCache.blendModeDestinationOut);
                canvas.saveLayer(null, paint, Canvas.ALL_SAVE_FLAG);
                {
                    canvas.translate(shadow3.dx, shadow3.dy);
                    
                    
                    paint.reset();
                    paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                    paint.setColor(Color.WHITE);
                    shadow3.setBlurOfPaint(paint);
                    canvas.drawPath(rectanglePath, paint);
                }
                canvas.restore();
            }
            canvas.restore();
        }
        
        // doubleCircle
        if (shouldShowDoubleCircle) {
            RectF doubleCircle = CacheForSMARTFret.doubleCircle;
            doubleCircle.set(frame.left + (float) Math.floor(frame.width() * 0.34882f - 0.3f) + 0.8f,
                frame.top + (float) Math.floor(frame.height() * 0.36779f + 0.04f) + 0.46f,
                frame.left + (float) Math.floor(frame.width() * 0.5721f + 0.47f) + 0.03f,
                frame.top + (float) Math.floor(frame.height() * 0.71941f - 0.19f) + 0.69f);
            
            // circle 2
            RectF circle2Rect = CacheForSMARTFret.circle2Rect;
            circle2Rect.set(doubleCircle.left,
                doubleCircle.top,
                doubleCircle.left + (float) Math.floor(doubleCircle.width() + 0.27f) + 0.23f,
                doubleCircle.top + (float) Math.floor(doubleCircle.height() * 0.21689f + 0.27f) + 0.23f);
            Path circle2Path = CacheForSMARTFret.circle2Path;
            circle2Path.reset();
            circle2Path.addOval(circle2Rect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(fretBarLight);
            canvas.drawPath(circle2Path, paint);
            
            // circle 3
            RectF circle3Rect = CacheForSMARTFret.circle3Rect;
            circle3Rect.set(doubleCircle.left,
                doubleCircle.top + (float) Math.floor(doubleCircle.height() * 0.78311f + 0.5f),
                doubleCircle.left + (float) Math.floor(doubleCircle.width() + 0.27f) + 0.23f,
                doubleCircle.top + (float) Math.floor(doubleCircle.height() + 0.27f) + 0.23f);
            Path circle3Path = CacheForSMARTFret.circle3Path;
            circle3Path.reset();
            circle3Path.addOval(circle3Rect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(fretBarLight);
            canvas.drawPath(circle3Path, paint);
        }
    }
    
    private static class CacheForFretNote {
        private static Paint paint = new Paint();
        private static RectF ovalRect = new RectF();
        private static Path ovalPath = new Path();
        private static RectF textRect = new RectF();
        private static TextPaint textTextPaint = new TextPaint();
        private static PaintCodeStaticLayout textStaticLayout = new PaintCodeStaticLayout();
    }
    
    
    public static void drawFretNote(Canvas canvas, Context context, String note, boolean isRoot) {
        // General Declarations
        Paint paint = CacheForFretNote.paint;
        
        // Local Colors
        int guitarNoteRoot = Color.argb(255, 23, 163, 227);
        int guitarNote = Color.argb(255, 151, 250, 238);
        
        // Local Variables
        int guitarNoteColor = isRoot ? guitarNoteRoot : guitarNote;
        
        // Oval
        RectF ovalRect = CacheForFretNote.ovalRect;
        ovalRect.set(1f, 1f, 27f, 27f);
        Path ovalPath = CacheForFretNote.ovalPath;
        ovalPath.reset();
        ovalPath.addOval(ovalRect, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(guitarNoteColor);
        canvas.drawPath(ovalPath, paint);
        
        // Text
        RectF textRect = CacheForFretNote.textRect;
        textRect.set(3f, 5.96f, 26f, 22.19f);
        TextPaint textTextPaint = CacheForFretNote.textTextPaint;
        textTextPaint.reset();
        textTextPaint.setFlags(Paint.ANTI_ALIAS_FLAG);
        textTextPaint.setColor(Color.BLACK);
        textTextPaint.setTypeface(Typeface.create((String) null, Typeface.NORMAL));
        textTextPaint.setTextSize(14f);
        StaticLayout textStaticLayout = CacheForFretNote.textStaticLayout.get((int) textRect.width(), Layout.Alignment.ALIGN_CENTER, note, textTextPaint);
        canvas.save();
        canvas.clipRect(textRect);
        canvas.translate(textRect.left, textRect.top + (textRect.height() - textStaticLayout.getHeight()) / 2f);
        textStaticLayout.draw(canvas);
        canvas.restore();
    }
    
    private static class CacheForSMARTGuitarString {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 147f, 22f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    public static void drawSMARTGuitarString(Canvas canvas) {
        GuitarTunesStyleKit.drawSMARTGuitarString(canvas, new RectF(0f, 0f, 147f, 22f), ResizingBehavior.AspectFit);
    }
    
    public static void drawSMARTGuitarString(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForSMARTGuitarString.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForSMARTGuitarString.resizedFrame;
        GuitarTunesStyleKit.resizingBehaviorApply(resizing, CacheForSMARTGuitarString.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 147f, resizedFrame.height() / 22f);
        
        // Group
        {
            // Bezier 2
            RectF bezier2Rect = CacheForSMARTGuitarString.bezier2Rect;
            bezier2Rect.set(-0.01f, 12.38f, 146.78f, 12.38f);
            Path bezier2Path = CacheForSMARTGuitarString.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(-0.01f, 12.38f);
            bezier2Path.cubicTo(-0.01f, 12.38f, 146.78f, 12.38f, 146.78f, 12.38f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(Color.BLACK);
            canvas.drawPath(bezier2Path, paint);
            canvas.restore();
            
            // Bezier
            RectF bezierRect = CacheForSMARTGuitarString.bezierRect;
            bezierRect.set(-0.51f, 10.38f, 146.82f, 10.38f);
            Path bezierPath = CacheForSMARTGuitarString.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(-0.51f, 10.38f);
            bezierPath.cubicTo(-0.51f, 10.38f, 146.82f, 10.38f, 146.82f, 10.38f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(Color.WHITE);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
        }
        
        canvas.restore();
    }
    
    private static class CacheForSMARTBassString {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 147f, 22f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    public static void drawSMARTBassString(Canvas canvas) {
        GuitarTunesStyleKit.drawSMARTBassString(canvas, new RectF(0f, 0f, 147f, 22f), ResizingBehavior.AspectFit);
    }
    
    public static void drawSMARTBassString(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForSMARTBassString.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForSMARTBassString.resizedFrame;
        GuitarTunesStyleKit.resizingBehaviorApply(resizing, CacheForSMARTBassString.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 147f, resizedFrame.height() / 22f);
        
        // Group
        {
            // Bezier 2
            RectF bezier2Rect = CacheForSMARTBassString.bezier2Rect;
            bezier2Rect.set(-0.01f, 11.38f, 146.78f, 11.38f);
            Path bezier2Path = CacheForSMARTBassString.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(-0.01f, 11.38f);
            bezier2Path.cubicTo(-0.01f, 11.38f, 146.78f, 11.38f, 146.78f, 11.38f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(Color.BLACK);
            canvas.drawPath(bezier2Path, paint);
            canvas.restore();
            
            // Bezier
            RectF bezierRect = CacheForSMARTBassString.bezierRect;
            bezierRect.set(-0.51f, 9.38f, 146.82f, 9.38f);
            Path bezierPath = CacheForSMARTBassString.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(-0.51f, 9.38f);
            bezierPath.cubicTo(-0.51f, 9.38f, 146.82f, 9.38f, 146.82f, 9.38f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(Color.WHITE);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
        }
        
        canvas.restore();
    }
    
    private static class CacheForSMARTFretNote {
        private static Paint paint = new Paint();
        private static RectF ovalRect = new RectF();
        private static Path ovalPath = new Path();
        private static RectF textRect = new RectF();
        private static TextPaint textTextPaint = new TextPaint();
        private static PaintCodeStaticLayout textStaticLayout = new PaintCodeStaticLayout();
    }
    
    
    public static void drawSMARTFretNote(Canvas canvas, Context context, RectF frame, String note, float noteLabelSize, boolean isRoot) {
        // General Declarations
        Paint paint = CacheForSMARTFretNote.paint;
        
        // Local Colors
        int guitarNoteRoot = Color.argb(255, 23, 163, 227);
        int guitarNote = Color.argb(255, 151, 250, 238);
        
        // Local Variables
        int guitarNoteColor = isRoot ? guitarNoteRoot : guitarNote;
        
        // Oval
        RectF ovalRect = CacheForSMARTFretNote.ovalRect;
        ovalRect.set(frame.left + (float) Math.floor(frame.width() * 0.03214f - 0.4f) + 0.9f,
            frame.top + (float) Math.floor(frame.height() * 0.04107f + 0.34f) + 0.16f,
            frame.left + (float) Math.floor(frame.width() * 0.96415f - 0.4f) + 0.9f,
            frame.top + (float) Math.floor(frame.height() * 0.96448f + 0.34f) + 0.16f);
        Path ovalPath = CacheForSMARTFretNote.ovalPath;
        ovalPath.reset();
        ovalPath.addOval(ovalRect, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(guitarNoteColor);
        canvas.drawPath(ovalPath, paint);
        
        // Text
        RectF textRect = CacheForSMARTFretNote.textRect;
        textRect.set(frame.left + (float) Math.floor(frame.width() * 0.10383f - 0.4f) + 0.9f,
            frame.top + (float) Math.floor(frame.height() * 0.21865f + 0.34f) + 0.16f,
            frame.left + (float) Math.floor(frame.width() * 0.92831f - 0.4f) + 0.9f,
            frame.top + (float) Math.floor(frame.height() * 0.7869f + 0.34f) + 0.16f);
        TextPaint textTextPaint = CacheForSMARTFretNote.textTextPaint;
        textTextPaint.reset();
        textTextPaint.setFlags(Paint.ANTI_ALIAS_FLAG);
        textTextPaint.setColor(Color.BLACK);
        textTextPaint.setTypeface(Typeface.create((String) null, Typeface.NORMAL));
        textTextPaint.setTextSize(noteLabelSize);
        StaticLayout textStaticLayout = CacheForSMARTFretNote.textStaticLayout.get((int) textRect.width(), Layout.Alignment.ALIGN_CENTER, note, textTextPaint);
        canvas.save();
        canvas.clipRect(textRect);
        canvas.translate(textRect.left, textRect.top + (textRect.height() - textStaticLayout.getHeight()) / 2f);
        textStaticLayout.draw(canvas);
        canvas.restore();
    }
    
    // Signup
    
    private static class CacheForBtnSignupGreen {
        private static Paint paint = new Paint();
        private static RectF textRect = new RectF();
        private static Path textPath = new Path();
        private static TextPaint textTextPaint = new TextPaint();
        private static PaintCodeStaticLayout textStaticLayout = new PaintCodeStaticLayout();
    }
    
    
    public static void drawBtnSignupGreen(Canvas canvas, Context context, RectF frame, boolean isPressed, String btnTitle) {
        // General Declarations
        Paint paint = CacheForBtnSignupGreen.paint;
        
        // Local Colors
        int signupGreenUp = Color.argb(255, 81, 171, 75);
        int signupGreenDown = Color.argb(255, 62, 134, 57);
        
        // Local Variables
        int signupButtonColor = isPressed ? signupGreenDown : signupGreenUp;
        
        // Text
        RectF textRect = CacheForBtnSignupGreen.textRect;
        textRect.set(frame.left + (float) Math.floor(frame.width() * 0.00333f + 0.5f),
            frame.top + (float) Math.floor(frame.height() * 0.01667f + 0.5f),
            frame.left + (float) Math.floor(frame.width() * 0.99667f + 0.5f),
            frame.top + (float) Math.floor(frame.height() * 0.94544f - 0.23f) + 0.73f);
        Path textPath = CacheForBtnSignupGreen.textPath;
        textPath.reset();
        textPath.addRoundRect(textRect, 6f, 6f, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(signupButtonColor);
        canvas.drawPath(textPath, paint);
        TextPaint textTextPaint = CacheForBtnSignupGreen.textTextPaint;
        textTextPaint.reset();
        textTextPaint.setFlags(Paint.ANTI_ALIAS_FLAG);
        textTextPaint.setColor(Color.WHITE);
        textTextPaint.setTypeface(Typeface.createFromAsset(context.getAssets(), "HelveticaNeue.dfont"));
        textTextPaint.setTextSize(22f);
        StaticLayout textStaticLayout = CacheForBtnSignupGreen.textStaticLayout.get((int) textRect.width(), Layout.Alignment.ALIGN_CENTER, btnTitle, textTextPaint);
        canvas.save();
        canvas.clipRect(textRect);
        canvas.translate(textRect.left, textRect.top + (textRect.height() - textStaticLayout.getHeight()) / 2f);
        textStaticLayout.draw(canvas);
        canvas.restore();
    }
    
    private static class CacheForBtnSignupGreenIPhone {
        private static Paint paint = new Paint();
        private static RectF textRect = new RectF();
        private static Path textPath = new Path();
        private static TextPaint textTextPaint = new TextPaint();
        private static PaintCodeStaticLayout textStaticLayout = new PaintCodeStaticLayout();
    }
    
    
    public static void drawBtnSignupGreenIPhone(Canvas canvas, Context context, RectF frame, boolean isPressed, String btnTitle) {
        // General Declarations
        Paint paint = CacheForBtnSignupGreenIPhone.paint;
        
        // Local Colors
        int signupGreenUp = Color.argb(255, 81, 171, 75);
        int signupGreenDown = Color.argb(255, 62, 134, 57);
        
        // Local Variables
        int signupButtonColor = isPressed ? signupGreenDown : signupGreenUp;
        
        // Text
        RectF textRect = CacheForBtnSignupGreenIPhone.textRect;
        textRect.set(frame.left + (float) Math.floor(frame.width() * 0.00361f + 0.5f),
            frame.top + (float) Math.floor(frame.height() * 0.02164f + 0.5f),
            frame.left + (float) Math.floor(frame.width() * 0.99558f + 0.37f) + 0.13f,
            frame.top + (float) Math.floor(frame.height() * 0.97392f + 0.5f));
        Path textPath = CacheForBtnSignupGreenIPhone.textPath;
        textPath.reset();
        textPath.addRoundRect(textRect, 3f, 3f, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(signupButtonColor);
        canvas.drawPath(textPath, paint);
        TextPaint textTextPaint = CacheForBtnSignupGreenIPhone.textTextPaint;
        textTextPaint.reset();
        textTextPaint.setFlags(Paint.ANTI_ALIAS_FLAG);
        textTextPaint.setColor(Color.WHITE);
        textTextPaint.setTypeface(Typeface.createFromAsset(context.getAssets(), "HelveticaNeue.dfont"));
        textTextPaint.setTextSize(20f);
        StaticLayout textStaticLayout = CacheForBtnSignupGreenIPhone.textStaticLayout.get((int) textRect.width(), Layout.Alignment.ALIGN_CENTER, btnTitle, textTextPaint);
        canvas.save();
        canvas.clipRect(textRect);
        canvas.translate(textRect.left, textRect.top + (textRect.height() - textStaticLayout.getHeight()) / 2f);
        textStaticLayout.draw(canvas);
        canvas.restore();
    }
    
    
    // Resizing Behavior
    public static void resizingBehaviorApply(ResizingBehavior behavior, RectF rect, RectF target, RectF result) {
        if (rect.equals(target) || target == null) {
            result.set(rect);
            return;
        }
        
        if (behavior == ResizingBehavior.Stretch) {
            result.set(target);
            return;
        }
        
        float xRatio = Math.abs(target.width() / rect.width());
        float yRatio = Math.abs(target.height() / rect.height());
        float scale = 0f;
        
        switch (behavior) {
            case AspectFit: {
                scale = Math.min(xRatio, yRatio);
                break;
            }
            case AspectFill: {
                scale = Math.max(xRatio, yRatio);
                break;
            }
            case Center: {
                scale = 1f;
                break;
            }
        }
        
        float newWidth = Math.abs(rect.width() * scale);
        float newHeight = Math.abs(rect.height() * scale);
        result.set(target.centerX() - newWidth / 2,
            target.centerY() - newHeight / 2,
            target.centerX() + newWidth / 2,
            target.centerY() + newHeight / 2);
    }
    
    
}

class PaintCodeColor extends Color {
    private static float[] ColorToHSV(int originalColor) {
        float hsv[] = new float[3];
        RGBToHSV(red(originalColor), green(originalColor), blue(originalColor), hsv);
        return hsv;
    }
    
    public static int colorByChangingHue(int originalColor, float newHue) {
        float hsv[] = ColorToHSV(originalColor);
        hsv[0] = newHue;
        return HSVToColor(alpha(originalColor), hsv);
    }
    
    public static int colorByChangingSaturation(int originalColor, float newSaturation) {
        float hsv[] = ColorToHSV(originalColor);
        hsv[1] = newSaturation;
        return HSVToColor(alpha(originalColor), hsv);
    }
    
    public static int colorByChangingValue(int originalColor, float newValue) {
        float hsv[] = ColorToHSV(originalColor);
        hsv[2] = newValue;
        return HSVToColor(alpha(originalColor), hsv);
    }
    
    public static float hue(int color) {
        return ColorToHSV(color)[0];
    }
    
    public static float saturation(int color) {
        return ColorToHSV(color)[1];
    }
    
    public static float brightness(int color) {
        return ColorToHSV(color)[2];
    }
    
    public static int colorByChangingAlpha(int color, int newAlpha) {
        return argb(newAlpha, red(color), green(color), blue(color));
    }
    
    public static int colorByBlendingColors(int c1, float ratio, int c2) {
        return argb((int) ((1f - ratio) * alpha(c1) + ratio * alpha(c2)),
            (int) ((1f - ratio) * red(c1) + ratio * red(c2)),
            (int) ((1f - ratio) * green(c1) + ratio * green(c2)),
            (int) ((1f - ratio) * blue(c1) + ratio * blue(c2)));
    }
    
    public static int colorByApplyingHighlight(int color, float ratio) {
        return colorByBlendingColors(color, ratio, colorByChangingAlpha(WHITE, alpha(color)));
    }
    
    public static int colorByApplyingShadow(int color, float ratio) {
        return colorByBlendingColors(color, ratio, colorByChangingAlpha(BLACK, alpha(color)));
    }
}

class PaintCodeGradient {
    private int[] colors;
    private float[] positions;
    
    public PaintCodeGradient(int[] colors, float[] positions) {
        if (positions == null) {
            int steps = colors.length;
            positions = new float[steps];
            for (int i = 0; i < steps; i++)
                positions[i] = (float) i / (steps - 1);
        }
        
        this.colors = colors;
        this.positions = positions;
    }
    
    public LinearGradient linearGradient(float x0, float y0, float x1, float y1) {
        return new LinearGradient(x0, y0, x1, y1, this.colors, this.positions, Shader.TileMode.CLAMP);
    }
    
    public RadialGradient radialGradient(float startX, float startY, float startRadius, float endX, float endY, float endRadius) {
        int steps = this.colors.length;
        float[] positions = new float[steps];
        
        if (startRadius > endRadius) {
            float ratio = endRadius / startRadius;
            int[] colors = new int[steps];
            
            for (int i = 0; i < steps; i++) {
                colors[i] = this.colors[steps - i - 1];
                positions[i] = (1 - this.positions[steps - i - 1]) * (1 - ratio) + ratio;
            }
            
            return new RadialGradient(endX, endY, startRadius, colors, positions, Shader.TileMode.CLAMP);
        } else {
            float ratio = startRadius / endRadius;
            
            for (int i = 0; i < steps; i++) {
                positions[i] = this.positions[i] * (1 - ratio) + ratio;
            }
            
            return new RadialGradient(startX, startY, endRadius, this.colors, positions, Shader.TileMode.CLAMP);
        }
    }
    
    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof PaintCodeGradient))
            return false;
        PaintCodeGradient other = (PaintCodeGradient) obj;
        return Arrays.equals(this.colors, other.colors) && Arrays.equals(this.positions, other.positions);
    }
}


class PaintCodeLinearGradient {
    private LinearGradient shader;
    private PaintCodeGradient paintCodeGradient;
    private float x0, y0, x1, y1;
    LinearGradient get(PaintCodeGradient paintCodeGradient, float x0, float y0, float x1, float y1) {
        if (this.shader == null || this.x0 != x0 || this.y0 != y0 || this.x1 != x1 || this.y1 != y1 || !this.paintCodeGradient.equals(paintCodeGradient)) {
            this.x0 = x0;
            this.y0 = y0;
            this.x1 = x1;
            this.y1 = y1;
            this.paintCodeGradient = paintCodeGradient;
            this.shader = paintCodeGradient.linearGradient(x0, y0, x1, y1);
        }
        return this.shader;
    }
}


class PaintCodeRadialGradient {
    private RadialGradient shader;
    private PaintCodeGradient paintCodeGradient;
    private float x0, y0, x1, y1, radius0, radius1;
    RadialGradient get(PaintCodeGradient paintCodeGradient, float x0, float y0, float radius0, float x1, float y1, float radius1) {
        if (this.shader == null || this.x0 != x0 || this.y0 != y0 || this.radius0 != radius0 || this.x1 != x1 || this.y1 != y1 || this.radius1 != radius1 || !this.paintCodeGradient.equals(paintCodeGradient)) {
            this.x0 = x0;
            this.y0 = y0;
            this.radius0 = radius0;
            this.x1 = x1;
            this.y1 = y1;
            this.radius1 = radius1;
            this.paintCodeGradient = paintCodeGradient;
            this.shader = paintCodeGradient.radialGradient(x0, y0, radius0, x1, y1, radius1);
        }
        return this.shader;
    }
}

class PaintCodeShadow {
    int color;
    float dx, dy;
    private float radius;
    private BlurMaskFilter blurMaskFilter;
    
    PaintCodeShadow() {
        
    }
    
    PaintCodeShadow(int color, float dx, float dy, float radius) {
        this.get(color, dx, dy, radius);
    }
    
    PaintCodeShadow get(int color, float dx, float dy, float radius) {
        this.color = color;
        this.dx = dx;
        this.dy = dy;
        
        if (this.radius != radius) {
            this.blurMaskFilter = null;
            this.radius = radius;
        }
        
        return this;
    }
    
    void setBlurOfPaint(Paint paint) {
        if (this.radius <= 0)
            return;
        
        if (this.blurMaskFilter == null)
            this.blurMaskFilter = new BlurMaskFilter(this.radius, BlurMaskFilter.Blur.NORMAL);
        
        paint.setMaskFilter(this.blurMaskFilter);
    }
}


class PaintCodeBitmap {
    private BitmapShader shader;
    private Bitmap bitmap;
    private RectF bounds;
    private int resource;
    private WeakReference<Context> context;
    
    PaintCodeBitmap get(Context context, int resource) {
        if (this.context == null || this.context.get() != context || this.resource != resource) {
            this.context = new WeakReference<>(context);
            this.resource = resource;
            this.bitmap = BitmapFactory.decodeResource(context.getResources(), resource);
            this.bounds = new RectF(0, 0, bitmap.getWidth(), bitmap.getHeight());
            this.shader = new BitmapShader(bitmap, Shader.TileMode.REPEAT, Shader.TileMode.REPEAT);
        }
        return this;
    }
    
    PaintCodeBitmap get(Bitmap bitmap) {
        if (this.bitmap != bitmap) {
            this.context = null;
            this.resource = 0;
            this.bitmap = bitmap;
            this.bounds = new RectF(0, 0, bitmap.getWidth(), bitmap.getHeight());
            this.shader = new BitmapShader(bitmap, Shader.TileMode.REPEAT, Shader.TileMode.REPEAT);
        }
        return this;
    }
    
    BitmapShader getShader() {
        return this.shader;
    }
    
    RectF getBounds() {
        return this.bounds;
    }
}


class PaintCodeStaticLayout {
    private StaticLayout layout;
    private int width;
    private Layout.Alignment alignment;
    private CharSequence source;
    private TextPaint paint;
    
    StaticLayout get(int width, Layout.Alignment alignment, CharSequence source, TextPaint paint) {
        if (this.layout == null || this.width != width || this.alignment != alignment || !this.source.equals(source) || !this.paint.equals(paint)) {
            this.width = width;
            this.alignment = alignment;
            this.source = source;
            this.paint = paint;
            this.layout = new StaticLayout(source, paint, width, alignment, 1, 0, false);
        }
        return this.layout;
    }
}
